{"file_contents":{"README.md":{"content":"# FarmConnect - Smart Farming Assistant\n\nA bilingual agricultural platform that helps farmers detect crop diseases, track weather, monitor market prices, and connect with the farming community.\n\n## üå± Features\n\n- **Crop Disease Detection**: AI-powered disease identification using camera capture\n- **Weather Monitoring**: Real-time weather updates with farming advice\n- **Mandi Prices**: Live market prices for agricultural commodities\n- **Community Platform**: Connect and share experiences with fellow farmers\n- **Marketplace**: Buy and sell agricultural products and equipment\n- **AI Assistant**: Get farming advice and answers to agricultural questions\n- **Bilingual Support**: Available in English and Hindi\n\n## üöÄ Tech Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Tailwind CSS** for styling\n- **Framer Motion** for animations\n- **React Query** for data fetching\n- **Wouter** for routing\n- **react-i18next** for internationalization\n- **Zustand** for state management\n\n### Backend\n- **Node.js** with Express\n- **TypeScript**\n- **Multer** for file uploads\n- **Zod** for validation\n- **Session-based authentication**\n\n### Database & Services\n- **Supabase** for database, authentication, and file storage\n- **Google Gemini API** for AI-powered crop disease detection\n- **OpenWeather API** for weather data\n- **Government Mandi API** for market prices\n\n## üìÅ Project Structure\n\n","size_bytes":1395},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# FarmConnect - Smart Farming Assistant\n\n## Overview\n\nFarmConnect is a bilingual agricultural platform that empowers farmers with AI-powered crop disease detection, real-time weather monitoring, market price tracking, and community features. The application provides a comprehensive farming assistant that combines computer vision, weather APIs, and social features to help farmers make informed decisions and connect with their community.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Styling**: Tailwind CSS with custom design system using CSS variables and shadcn/ui components\n- **Animations**: Framer Motion for smooth page transitions and component animations\n- **State Management**: Zustand for lightweight client-side state with persistence\n- **Routing**: Wouter for minimal client-side routing\n- **Internationalization**: react-i18next supporting English and Hindi languages\n- **Data Fetching**: React Query (TanStack Query) for server state management and caching\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js web framework\n- **Language**: TypeScript for type safety across the full stack\n- **File Uploads**: Multer middleware for handling multipart form data (image uploads)\n- **Validation**: Zod for request/response schema validation\n- **Authentication**: Session-based authentication with mock OTP system (OTP always \"0000\")\n- **API Design**: RESTful endpoints with consistent error handling and logging\n\n### Database Design\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema**: PostgreSQL with UUID primary keys and proper relationships\n- **Key Tables**:\n  - `users`: User profiles with farming details and preferences\n  - `disease_reports`: AI analysis results with image paths and metadata\n  - `mandi_prices`: Market price data with temporal tracking\n  - `community_posts`: Social features for farmer interaction\n  - `marketplace_items`: Buy/sell agricultural products\n\n### Storage Strategy\n- **Primary Storage**: Supabase for database, authentication, and file storage\n- **Image Storage**: Supabase Storage with organized bucket structure (`disease-images`)\n- **Fallback**: In-memory storage implementation for development without external dependencies\n\n### AI Integration\n- **Vision AI**: Google Gemini API for crop disease detection and analysis\n- **Graceful Degradation**: Mock responses when API keys are not configured\n- **Image Processing**: Direct buffer processing with structured JSON responses\n\n## External Dependencies\n\n### Core Services\n- **Supabase**: Primary backend service providing PostgreSQL database, authentication, and file storage\n- **Google Gemini API**: AI-powered crop disease detection and farming assistant chatbot\n- **OpenWeather API**: Real-time weather data and forecasting\n- **Government Mandi API**: Live agricultural commodity prices from Indian markets\n\n### Development Tools\n- **Drizzle Kit**: Database schema management and migrations\n- **Vite**: Fast development server and build tool with hot module replacement\n- **ESBuild**: Production bundling for server-side code\n\n### UI Component Library\n- **Radix UI**: Accessible, unstyled component primitives\n- **Lucide React**: Consistent iconography system\n- **Tailwind CSS**: Utility-first styling with custom design tokens\n\n### Authentication Flow\n- **Mock OTP System**: Development-friendly authentication with hardcoded OTP \"0000\"\n- **Session Management**: Server-side session handling with Supabase integration\n- **Progressive Onboarding**: Multi-step user profile completion\n\n### Internationalization\n- **Language Support**: English and Hindi with JSON translation files\n- **User Preference**: Language selection stored in user profile\n- **Dynamic Switching**: Real-time language updates without page refresh\n\n### Error Handling Strategy\n- **Graceful Degradation**: Fallback to mock data when external APIs are unavailable\n- **User Feedback**: Toast notifications for user actions and error states\n- **Development Mode**: Enhanced error reporting and debugging tools","size_bytes":4179},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        gradientShift: {\n          \"0%\": { backgroundPosition: \"0% 50%\" },\n          \"50%\": { backgroundPosition: \"100% 50%\" },\n          \"100%\": { backgroundPosition: \"0% 50%\" },\n        },\n        blob: {\n          \"0%\": { transform: \"translate(0px, 0px) scale(1)\" },\n          \"33%\": { transform: \"translate(30px, -50px) scale(1.1)\" },\n          \"66%\": { transform: \"translate(-20px, 20px) scale(0.9)\" },\n          \"100%\": { transform: \"translate(0px, 0px) scale(1)\" },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"gradient-shift\": \"gradientShift 15s ease infinite\",\n        blob: \"blob 7s infinite\",\n        float: \"float 6s ease-in-out infinite\",\n        \"pulse-slow\": \"pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3591},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\n\n// Initialize database connection with error handling\nlet db: ReturnType<typeof drizzle> | null = null;\n\nexport function getDb() {\n  if (db) return db;\n  \n  const databaseUrl = process.env.DATABASE_URL;\n  if (!databaseUrl) {\n    console.warn(\"DATABASE_URL not found, database operations will be handled by fallback storage\");\n    throw new Error(\"No database connection available\");\n  }\n  \n  try {\n    const sql = neon(databaseUrl);\n    db = drizzle(sql, { schema });\n    return db;\n  } catch (error) {\n    console.error(\"Failed to initialize database connection:\", error);\n    throw error;\n  }\n}\n\n// Export db for backward compatibility, but it will throw if not properly initialized\nexport { db };","size_bytes":840},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport \"./services/priceMonitor\"; // Initialize price monitoring service\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2139},"server/routes.ts":{"content":"import express, { type Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport session from \"express-session\";\nimport multer from \"multer\";\nimport { z } from \"zod\";\nimport { validateRequest } from \"zod-express-middleware\";\nimport { storage } from \"./storage\";\nimport { analyzeImage } from \"./services/gemini\";\nimport { getCurrentWeather } from \"./services/weather\";\nimport { getMandiPrices } from \"./services/mandi\";\nimport { saveImageLocally } from \"./services/fileUpload\";\nimport { analyzeCropImage } from \"./services/pytorchService\";\n// Demo OTP system - always accepts \"0000\" as valid OTP\nfunction isValidPhoneNumber(phone: string): boolean {\n  // Basic phone validation - should have digits and optional country code\n  const phoneRegex = /^[+]?[1-9]\\d{1,14}$/;\n  return phoneRegex.test(phone.replace(/[\\s()-]/g, ''));\n}\n\nfunction sendDemoOTP(phone: string): { success: boolean; error?: string } {\n  // Demo mode - always successful\n  console.log(`Demo OTP sent to ${phone}: 0000`);\n  return { success: true };\n}\n\nfunction verifyDemoOTP(phone: string, otp: string): boolean {\n  // Demo mode - only accept \"0000\" as valid OTP\n  return otp === \"0000\";\n}\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n});\n\n// Validation schemas\nconst sendOTPSchema = z.object({\n  body: z.object({\n    phone: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  }),\n});\n\nconst verifyOTPSchema = z.object({\n  body: z.object({\n    phone: z.string(),\n    otp: z.string().length(4, \"OTP must be 4 digits\"),\n  }),\n});\n\nconst updateProfileSchema = z.object({\n  body: z.object({\n    name: z.string().optional(),\n    age: z.string().optional(),\n    location: z.string().optional(),\n    farmSize: z.string().optional(),\n    primaryCrops: z.array(z.string()).optional(),\n    language: z.string().optional(),\n  }),\n});\n\nconst chatMessageSchema = z.object({\n  body: z.object({\n    message: z.string().min(1, \"Message cannot be empty\"),\n    context: z.string().optional(),\n  }),\n});\n\nconst createPriceAlertSchema = z.object({\n  body: z.object({\n    commodity: z.string().min(1, \"Commodity is required\"),\n    market: z.string().min(1, \"Market is required\"),\n    targetPrice: z.number().positive(\"Target price must be positive\"),\n    priceUnit: z.string().optional(),\n    alertType: z.enum([\"above\", \"below\"], { required_error: \"Alert type must be 'above' or 'below'\" }),\n  }),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'farmconnect-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { \n      secure: false, // Set to true in production with HTTPS\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Serve uploaded files\n  app.use('/uploads', express.static('uploads'));\n\n  // Authentication routes\n  app.post(\"/api/auth/send-otp\", validateRequest(sendOTPSchema), async (req, res) => {\n    try {\n      const { phone } = req.body;\n      \n      // Validate phone number format\n      if (!isValidPhoneNumber(phone)) {\n        return res.status(400).json({ \n          message: \"Please enter a valid phone number with country code (e.g., +1234567890)\" \n        });\n      }\n      \n      // Send OTP via demo system\n      const result = sendDemoOTP(phone);\n      \n      if (!result.success) {\n        return res.status(500).json({ \n          message: result.error || \"Failed to send OTP\" \n        });\n      }\n      \n      // Store the phone in session for verification\n      req.session.phone = phone;\n      req.session.otpSent = true;\n      \n      res.json({ \n        success: true, \n        message: \"OTP sent successfully\",\n        phone: phone \n      });\n    } catch (error) {\n      console.error(\"Send OTP error:\", error);\n      res.status(500).json({ message: \"Failed to send OTP\" });\n    }\n  });\n\n  app.post(\"/api/auth/verify-otp\", validateRequest(verifyOTPSchema), async (req, res) => {\n    try {\n      const { phone, otp } = req.body;\n      \n      // Check if OTP was sent for this phone\n      if (req.session.phone !== phone || !req.session.otpSent) {\n        return res.status(400).json({ message: \"Invalid request. Please request OTP first.\" });\n      }\n      \n      // Verify OTP using demo system\n      const isValidOTP = verifyDemoOTP(phone, otp);\n      \n      if (!isValidOTP) {\n        return res.status(400).json({ message: \"Invalid or expired OTP. Please try again.\" });\n      }\n      \n      // Check if user exists\n      let user = await storage.getUserByPhone(phone);\n      \n      if (!user) {\n        // Create new user\n        user = await storage.createUser({\n          phone,\n          isOnboarded: false,\n          language: \"en\",\n        });\n      }\n      \n      // Set user session\n      req.session.userId = user.id;\n      req.session.authenticated = true;\n      \n      // Clear OTP session data\n      req.session.phone = undefined;\n      req.session.otpSent = undefined;\n      \n      res.json({\n        success: true,\n        user,\n        message: \"Authentication successful\",\n      });\n    } catch (error) {\n      console.error(\"Verify OTP error:\", error);\n      res.status(500).json({ message: \"Authentication failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ success: true, message: \"Logged out successfully\" });\n    });\n  });\n\n  // User routes\n  app.get(\"/api/user/profile\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ user });\n    } catch (error) {\n      console.error(\"Get profile error:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.put(\"/api/user/profile\", validateRequest(updateProfileSchema), async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const updateData = { ...req.body };\n      \n      // Convert age and farmSize to numbers if provided and not empty\n      if (updateData.age && updateData.age.trim() !== '') {\n        const parsedAge = parseInt(updateData.age);\n        updateData.age = isNaN(parsedAge) ? null : parsedAge;\n      } else if (updateData.age === '') {\n        updateData.age = null;\n      }\n      \n      if (updateData.farmSize && updateData.farmSize.trim() !== '') {\n        const parsedFarmSize = parseFloat(updateData.farmSize);\n        updateData.farmSize = isNaN(parsedFarmSize) ? null : parsedFarmSize;\n      } else if (updateData.farmSize === '') {\n        updateData.farmSize = null;\n      }\n      \n      // Mark user as onboarded if they're updating their profile\n      updateData.isOnboarded = true;\n      \n      const user = await storage.updateUser(req.session.userId, updateData);\n      \n      res.json({ user, message: \"Profile updated successfully\" });\n    } catch (error) {\n      console.error(\"Update profile error:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Disease detection route\n  app.post(\"/api/detect\", upload.single('image'), async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      if (!req.file) {\n        return res.status(400).json({ message: \"No image file provided\" });\n      }\n      \n      const cropType = req.body.cropType || \"Unknown\";\n      let imagePath = \"\";\n      \n      // Upload image to local storage\n      try {\n        imagePath = await saveImageLocally(req.file, req.session.userId);\n      } catch (uploadError) {\n        console.error(\"Image upload failed:\", uploadError);\n        // Continue with local processing, use a placeholder path\n        imagePath = `local/${Date.now()}_${req.file.originalname}`;\n      }\n      \n      let detectionResult;\n      let isRealResult = false;\n      let analysisMethod = \"mock\";\n      \n      // Priority 1: Try PyTorch model first\n      try {\n        console.log(\"Attempting PyTorch disease detection...\");\n        detectionResult = await analyzeCropImage(req.file.buffer);\n        \n        if (detectionResult && !detectionResult.error) {\n          isRealResult = true;\n          analysisMethod = \"pytorch\";\n          console.log(\"PyTorch analysis successful\");\n        } else {\n          throw new Error(detectionResult?.error || \"PyTorch analysis returned error\");\n        }\n      } catch (pytorchError) {\n        console.error(\"PyTorch analysis failed:\", pytorchError);\n        \n        // Priority 2: Fallback to Gemini API\n        const hasGeminiKey = !!process.env.GEMINI_API_KEY;\n        if (hasGeminiKey) {\n          try {\n            console.log(\"Falling back to Gemini analysis...\");\n            detectionResult = await analyzeImage(req.file.buffer);\n            isRealResult = true;\n            analysisMethod = \"gemini\";\n            console.log(\"Gemini analysis successful\");\n          } catch (geminiError) {\n            console.error(\"Gemini analysis also failed:\", geminiError);\n            // Fallback to mock result\n            detectionResult = getMockDetectionResult();\n            analysisMethod = \"mock\";\n          }\n        } else {\n          // Priority 3: Use mock detection result\n          console.log(\"No AI services available, using mock result\");\n          detectionResult = getMockDetectionResult();\n          analysisMethod = \"mock\";\n        }\n      }\n      \n      // Save detection report to database\n      const report = await storage.createDiseaseReport({\n        userId: req.session.userId,\n        imagePath,\n        cropType,\n        diseaseName: detectionResult.diseaseName,\n        severity: detectionResult.severity,\n        confidence: detectionResult.confidence,\n        symptoms: detectionResult.symptoms,\n        treatment: detectionResult.treatment,\n        isMockResult: analysisMethod === \"mock\",\n      });\n      \n      res.json({\n        success: true,\n        result: {\n          ...detectionResult,\n          analysisMethod,\n          isMockResult: analysisMethod === \"mock\",\n          isPytorchResult: analysisMethod === \"pytorch\",\n          isGeminiResult: analysisMethod === \"gemini\",\n        },\n        reportId: report.id,\n      });\n    } catch (error) {\n      console.error(\"Detection error:\", error);\n      res.status(500).json({ message: \"Disease detection failed\" });\n    }\n  });\n\n  // Weather routes\n  app.get(\"/api/weather/current\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const user = await storage.getUser(req.session.userId);\n      if (!user?.location) {\n        return res.status(400).json({ message: \"User location not set\" });\n      }\n      \n      const weatherData = await getCurrentWeather(user.location);\n      res.json(weatherData);\n    } catch (error) {\n      console.error(\"Weather error:\", error);\n      res.status(500).json({ message: \"Failed to fetch weather data\" });\n    }\n  });\n\n  // Weather route with location parameter (for geolocation coordinates)\n  app.get(\"/api/weather/current/:location\", async (req, res) => {\n    try {\n      const location = decodeURIComponent(req.params.location);\n      \n      if (!location) {\n        return res.status(400).json({ message: \"Location parameter is required\" });\n      }\n      \n      const weatherData = await getCurrentWeather(location);\n      res.json(weatherData);\n    } catch (error) {\n      console.error(\"Weather error:\", error);\n      res.status(500).json({ message: \"Failed to fetch weather data\" });\n    }\n  });\n\n  // Mandi prices routes\n  app.get(\"/api/mandi/prices\", async (req, res) => {\n    try {\n      const market = req.query.market as string;\n      const date = req.query.date as string;\n      \n      const prices = await getMandiPrices(market, date);\n      res.json(prices);\n    } catch (error) {\n      console.error(\"Mandi prices error:\", error);\n      res.status(500).json({ message: \"Failed to fetch mandi prices\" });\n    }\n  });\n\n  // Disease reports routes\n  app.get(\"/api/disease-reports/recent\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const reports = await storage.getRecentDiseaseReports(req.session.userId, 10);\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Recent reports error:\", error);\n      res.status(500).json({ message: \"Failed to fetch reports\" });\n    }\n  });\n\n  app.post(\"/api/disease-reports\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const reportData = {\n        ...req.body,\n        userId: req.session.userId,\n      };\n      \n      const report = await storage.createDiseaseReport(reportData);\n      res.json({ report, message: \"Report saved successfully\" });\n    } catch (error) {\n      console.error(\"Save report error:\", error);\n      res.status(500).json({ message: \"Failed to save report\" });\n    }\n  });\n\n  // Community routes\n  app.get(\"/api/community/posts\", async (req, res) => {\n    try {\n      const posts = await storage.getCommunityPosts();\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Community posts error:\", error);\n      res.status(500).json({ message: \"Failed to fetch community posts\" });\n    }\n  });\n\n  app.post(\"/api/community/posts\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(req.session.userId);\n      const postData = {\n        ...req.body,\n        userId: req.session.userId,\n        authorName: user?.name || \"Anonymous\",\n        authorAvatar: user?.avatar || null,\n      };\n      \n      const post = await storage.createCommunityPost(postData);\n      res.json({ post, message: \"Post created successfully\" });\n    } catch (error) {\n      console.error(\"Create post error:\", error);\n      res.status(500).json({ message: \"Failed to create post\" });\n    }\n  });\n\n  app.post(\"/api/community/posts/:postId/like\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      const { postId } = req.params;\n      await storage.likeCommunityPost(postId, req.session.userId);\n      res.json({ message: \"Post liked successfully\" });\n    } catch (error) {\n      console.error(\"Like post error:\", error);\n      res.status(500).json({ message: \"Failed to like post\" });\n    }\n  });\n\n  app.get(\"/api/community/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getCommunityStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Community stats error:\", error);\n      res.status(500).json({ message: \"Failed to fetch community stats\" });\n    }\n  });\n\n  // Marketplace routes\n  app.get(\"/api/marketplace/items\", async (req, res) => {\n    try {\n      const category = req.query.category as string;\n      const items = await storage.getMarketplaceItems(category);\n      res.json(items);\n    } catch (error) {\n      console.error(\"Marketplace items error:\", error);\n      res.status(500).json({ message: \"Failed to fetch marketplace items\" });\n    }\n  });\n\n  // AI Assistant routes\n  app.post(\"/api/assistant/chat\", validateRequest(chatMessageSchema), async (req, res) => {\n    try {\n      const { message, context } = req.body;\n      \n      // Use Gemini API for enhanced disease context if available\n      let response: string;\n      \n      if (context && context.diseaseName) {\n        // Enhanced disease context using Gemini\n        const { askFarmingQuestion } = await import(\"./services/gemini.js\");\n        const diseaseContext = `Disease Analysis Context:\n- Disease: ${context.diseaseName}\n- Severity: ${context.severity}\n- Symptoms: ${context.symptoms?.join ? context.symptoms.join(\", \") : context.symptoms}`;\n        \n        try {\n          response = await askFarmingQuestion(message, diseaseContext);\n        } catch (error) {\n          console.error(\"Gemini API error, falling back to basic response:\", error);\n          response = generateFarmingResponse(message);\n        }\n      } else {\n        // General farming questions with Gemini\n        try {\n          const { askFarmingQuestion } = await import(\"./services/gemini.js\");\n          response = await askFarmingQuestion(message);\n        } catch (error) {\n          console.error(\"Gemini API error, falling back to basic response:\", error);\n          response = generateFarmingResponse(message);\n        }\n      }\n      \n      res.json({\n        response,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      console.error(\"Assistant chat error:\", error);\n      res.status(500).json({ message: \"Assistant is temporarily unavailable\" });\n    }\n  });\n\n  // Price Alerts routes\n  app.post(\"/api/price-alerts\", validateRequest(createPriceAlertSchema), async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const alertData = {\n        ...req.body,\n        userId: req.session.userId,\n      };\n\n      const alert = await storage.createPriceAlert(alertData);\n      res.json({ alert, message: \"Price alert created successfully\" });\n    } catch (error) {\n      console.error(\"Create price alert error:\", error);\n      res.status(500).json({ message: \"Failed to create price alert\" });\n    }\n  });\n\n  app.get(\"/api/price-alerts\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const alerts = await storage.getUserPriceAlerts(req.session.userId);\n      res.json(alerts);\n    } catch (error) {\n      console.error(\"Get price alerts error:\", error);\n      res.status(500).json({ message: \"Failed to fetch price alerts\" });\n    }\n  });\n\n  app.put(\"/api/price-alerts/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n      const updates = req.body;\n\n      const alert = await storage.updatePriceAlert(id, updates);\n      res.json({ alert, message: \"Price alert updated successfully\" });\n    } catch (error) {\n      console.error(\"Update price alert error:\", error);\n      res.status(500).json({ message: \"Failed to update price alert\" });\n    }\n  });\n\n  app.delete(\"/api/price-alerts/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n      await storage.deletePriceAlert(id);\n      res.json({ message: \"Price alert deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete price alert error:\", error);\n      res.status(500).json({ message: \"Failed to delete price alert\" });\n    }\n  });\n\n  // Produce listings routes\n  app.post(\"/api/produce-listings\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const listing = await storage.createProduceListing({\n        ...req.body,\n        farmerId: req.session.userId,\n      });\n      res.json({ listing, message: \"Produce listing created successfully\" });\n    } catch (error) {\n      console.error(\"Create produce listing error:\", error);\n      res.status(500).json({ message: \"Failed to create produce listing\" });\n    }\n  });\n\n  app.get(\"/api/produce-listings\", async (req, res) => {\n    try {\n      const { status } = req.query;\n      const listings = await storage.getProduceListings(status as string);\n      res.json({ listings });\n    } catch (error) {\n      console.error(\"Get produce listings error:\", error);\n      res.status(500).json({ message: \"Failed to get produce listings\" });\n    }\n  });\n\n  app.get(\"/api/produce-listings/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const listing = await storage.getProduceListingById(id);\n      if (!listing) {\n        return res.status(404).json({ message: \"Produce listing not found\" });\n      }\n      res.json({ listing });\n    } catch (error) {\n      console.error(\"Get produce listing error:\", error);\n      res.status(500).json({ message: \"Failed to get produce listing\" });\n    }\n  });\n\n  // Bidding routes\n  app.post(\"/api/bids\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const bid = await storage.createBid({\n        ...req.body,\n        buyerId: req.session.userId,\n      });\n      res.json({ bid, message: \"Bid created successfully\" });\n    } catch (error) {\n      console.error(\"Create bid error:\", error);\n      res.status(500).json({ message: \"Failed to create bid\" });\n    }\n  });\n\n  app.get(\"/api/bids/listing/:listingId\", async (req, res) => {\n    try {\n      const { listingId } = req.params;\n      const bids = await storage.getBidsForListing(listingId);\n      res.json({ bids });\n    } catch (error) {\n      console.error(\"Get bids error:\", error);\n      res.status(500).json({ message: \"Failed to get bids\" });\n    }\n  });\n\n  app.get(\"/api/bids/user\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const bids = await storage.getUserBids(req.session.userId);\n      res.json({ bids });\n    } catch (error) {\n      console.error(\"Get user bids error:\", error);\n      res.status(500).json({ message: \"Failed to get user bids\" });\n    }\n  });\n\n  app.put(\"/api/bids/:bidId/status\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { bidId } = req.params;\n      const { status } = req.body;\n      const bid = await storage.updateBidStatus(bidId, status);\n      res.json({ bid, message: \"Bid status updated successfully\" });\n    } catch (error) {\n      console.error(\"Update bid status error:\", error);\n      res.status(500).json({ message: \"Failed to update bid status\" });\n    }\n  });\n\n  // Logistics routes\n  app.post(\"/api/logistics-orders\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const order = await storage.createLogisticsOrder({\n        ...req.body,\n        farmerId: req.session.userId,\n      });\n      res.json({ order, message: \"Logistics order created successfully\" });\n    } catch (error) {\n      console.error(\"Create logistics order error:\", error);\n      res.status(500).json({ message: \"Failed to create logistics order\" });\n    }\n  });\n\n  app.get(\"/api/logistics-orders\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const orders = await storage.getLogisticsOrders(req.session.userId);\n      res.json({ orders });\n    } catch (error) {\n      console.error(\"Get logistics orders error:\", error);\n      res.status(500).json({ message: \"Failed to get logistics orders\" });\n    }\n  });\n\n  app.put(\"/api/logistics-orders/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { id } = req.params;\n      const updates = req.body;\n      const order = await storage.updateLogisticsOrder(id, updates);\n      res.json({ order, message: \"Logistics order updated successfully\" });\n    } catch (error) {\n      console.error(\"Update logistics order error:\", error);\n      res.status(500).json({ message: \"Failed to update logistics order\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper function for mock detection result\nfunction getMockDetectionResult() {\n  const mockResults = [\n    {\n      diseaseName: \"Leaf Blight\",\n      severity: \"High\",\n      confidence: 87,\n      symptoms: \"Brown spots with yellow halos on leaves, progressive leaf yellowing and wilting.\",\n      treatment: \"Remove affected leaves immediately. Apply copper-based fungicide spray. Improve field drainage. Monitor surrounding crops.\"\n    },\n    {\n      diseaseName: \"Powdery Mildew\",\n      severity: \"Medium\",\n      confidence: 92,\n      symptoms: \"White powdery coating on leaves and stems, stunted growth.\",\n      treatment: \"Apply sulfur-based fungicide. Improve air circulation. Avoid overhead watering. Remove infected plant parts.\"\n    },\n    {\n      diseaseName: \"Bacterial Wilt\",\n      severity: \"High\",\n      confidence: 78,\n      symptoms: \"Sudden wilting of plants, yellowing of leaves, dark streaks in stem.\",\n      treatment: \"Remove and destroy affected plants. Avoid overwatering. Use disease-free seeds. Crop rotation recommended.\"\n    }\n  ];\n  \n  return mockResults[Math.floor(Math.random() * mockResults.length)];\n}\n\n// Helper function for farming assistant responses\nfunction generateFarmingResponse(message: string): string {\n  const lowerMessage = message.toLowerCase();\n  \n  if (lowerMessage.includes(\"weather\")) {\n    return \"Weather plays a crucial role in farming. During monsoon, ensure proper drainage to prevent waterlogging. In dry seasons, implement efficient irrigation methods like drip irrigation. Always check weather forecasts before applying pesticides or fertilizers.\";\n  }\n  \n  if (lowerMessage.includes(\"fertilizer\") || lowerMessage.includes(\"nutrient\")) {\n    return \"For optimal crop nutrition, use a balanced NPK fertilizer during the growing season. Organic options like compost and vermicompost improve soil health. Soil testing helps determine specific nutrient needs. Apply fertilizers early morning or evening for better absorption.\";\n  }\n  \n  if (lowerMessage.includes(\"pest\") || lowerMessage.includes(\"insect\")) {\n    return \"Integrated Pest Management (IPM) is key for sustainable farming. Use neem-based pesticides, maintain beneficial insects, practice crop rotation, and monitor regularly. Yellow sticky traps help catch flying pests early.\";\n  }\n  \n  if (lowerMessage.includes(\"disease\") || lowerMessage.includes(\"fungus\")) {\n    return \"Early detection is crucial for disease management. Maintain proper plant spacing for air circulation, avoid overhead watering, and use disease-resistant varieties when possible. Copper and sulfur-based fungicides are effective organic options.\";\n  }\n  \n  if (lowerMessage.includes(\"water\") || lowerMessage.includes(\"irrigation\")) {\n    return \"Efficient water management is essential. Use drip irrigation to reduce water waste, mulch around plants to retain moisture, and water early morning or late evening to minimize evaporation. Monitor soil moisture regularly.\";\n  }\n  \n  if (lowerMessage.includes(\"seed\") || lowerMessage.includes(\"planting\")) {\n    return \"Choose certified, disease-resistant seeds suited to your climate. Proper seed treatment with fungicides prevents early diseases. Follow recommended spacing and depth for optimal germination and growth.\";\n  }\n  \n  return \"I'm here to help with all your farming questions! You can ask me about crop care, weather advice, pest control, fertilizers, irrigation, or any other agricultural topics. What specific farming challenge are you facing?\";\n}\n","size_bytes":27921},"server/storage.ts":{"content":"import { randomUUID } from \"crypto\";\nimport { eq, desc, count, and, like, sql, or } from \"drizzle-orm\";\nimport { getDb } from \"./db\";\nimport { \n  users,\n  diseaseReports,\n  communityPosts,\n  marketplaceItems,\n  mandiPrices,\n  priceAlerts,\n  produceListings,\n  bids,\n  logisticsOrders,\n  type User, \n  type InsertUser, \n  type DiseaseReport, \n  type InsertDiseaseReport, \n  type CommunityPost, \n  type MarketplaceItem, \n  type MandiPrice,\n  type PriceAlert,\n  type InsertPriceAlert,\n  type ProduceListing,\n  type InsertProduceListing,\n  type Bid,\n  type InsertBid,\n  type LogisticsOrder,\n  type InsertLogisticsOrder\n} from \"@shared/schema\";\n\n// Enhanced interface with FarmConnect specific methods\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByPhone(phone: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  \n  // Disease report methods\n  createDiseaseReport(report: InsertDiseaseReport): Promise<DiseaseReport>;\n  getRecentDiseaseReports(userId: string, limit: number): Promise<DiseaseReport[]>;\n  getDiseaseReport(id: string): Promise<DiseaseReport | undefined>;\n  \n  // Community methods\n  getCommunityPosts(limit?: number): Promise<CommunityPost[]>;\n  createCommunityPost(post: any): Promise<CommunityPost>;\n  likeCommunityPost(postId: string, userId: string): Promise<void>;\n  getCommunityStats(): Promise<{\n    totalFarmers: string;\n    activePosts: string;\n    helpRate: string;\n  }>;\n  \n  // Marketplace methods\n  getMarketplaceItems(category?: string): Promise<MarketplaceItem[]>;\n  \n  // Mandi prices methods\n  getMandiPrices(market?: string, date?: string): Promise<MandiPrice[]>;\n  saveMandiPrices(prices: MandiPrice[]): Promise<void>;\n  \n  // Price alerts methods\n  createPriceAlert(alert: InsertPriceAlert): Promise<PriceAlert>;\n  getUserPriceAlerts(userId: string): Promise<PriceAlert[]>;\n  updatePriceAlert(id: string, updates: Partial<PriceAlert>): Promise<PriceAlert>;\n  deletePriceAlert(id: string): Promise<void>;\n  getActivePriceAlerts(): Promise<PriceAlert[]>;\n  \n  // Produce listings methods\n  createProduceListing(listing: InsertProduceListing): Promise<ProduceListing>;\n  getProduceListings(status?: string): Promise<ProduceListing[]>;\n  getProduceListingById(id: string): Promise<ProduceListing | undefined>;\n  updateProduceListing(id: string, updates: Partial<ProduceListing>): Promise<ProduceListing>;\n  \n  // Bidding methods\n  createBid(bid: InsertBid): Promise<Bid>;\n  getBidsForListing(listingId: string): Promise<Bid[]>;\n  getUserBids(userId: string): Promise<Bid[]>;\n  updateBidStatus(bidId: string, status: string): Promise<Bid>;\n  \n  // Logistics methods\n  createLogisticsOrder(order: InsertLogisticsOrder): Promise<LogisticsOrder>;\n  getLogisticsOrders(userId: string): Promise<LogisticsOrder[]>;\n  updateLogisticsOrder(id: string, updates: Partial<LogisticsOrder>): Promise<LogisticsOrder>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private diseaseReports: Map<string, DiseaseReport>;\n  private communityPosts: Map<string, CommunityPost>;\n  private marketplaceItems: Map<string, MarketplaceItem>;\n  private mandiPrices: Map<string, MandiPrice>;\n  private priceAlerts: Map<string, PriceAlert>;\n  private produceListings: Map<string, ProduceListing>;\n  private bids: Map<string, Bid>;\n  private logisticsOrders: Map<string, LogisticsOrder>;\n\n  constructor() {\n    this.users = new Map();\n    this.diseaseReports = new Map();\n    this.communityPosts = new Map();\n    this.marketplaceItems = new Map();\n    this.mandiPrices = new Map();\n    this.priceAlerts = new Map();\n    this.produceListings = new Map();\n    this.bids = new Map();\n    this.logisticsOrders = new Map();\n    \n    // Initialize with some sample data\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample community posts\n    const samplePost1: CommunityPost = {\n      id: randomUUID(),\n      userId: \"sample-user-1\",\n      title: \"Rice Disease Help Needed\",\n      content: \"My rice crop is showing yellow spots on leaves. Has anyone faced similar issue? Looking for advice on treatment.\",\n      images: [],\n      likes: 24,\n      comments: 12,\n      tags: [\"rice\", \"disease\", \"help\"],\n      createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n    };\n\n    const samplePost2: CommunityPost = {\n      id: randomUUID(),\n      userId: \"sample-user-2\",\n      title: \"Cotton Harvest Success\",\n      content: \"Great cotton harvest this season! Used organic fertilizers and the yield increased by 30%. Happy to share my experience with fellow farmers.\",\n      images: [],\n      likes: 18,\n      comments: 8,\n      tags: [\"cotton\", \"organic\", \"success\"],\n      createdAt: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 hours ago\n    };\n\n    this.communityPosts.set(samplePost1.id, samplePost1);\n    this.communityPosts.set(samplePost2.id, samplePost2);\n\n    // Sample marketplace items\n    const sampleItem1: MarketplaceItem = {\n      id: randomUUID(),\n      sellerId: \"sample-user-1\",\n      title: \"Premium Rice Seeds\",\n      description: \"High-yield Basmati rice seeds, disease-resistant variety. Perfect for Maharashtra climate.\",\n      category: \"seeds\",\n      price: \"800\",\n      priceUnit: \"per kg\",\n      quantity: \"50\",\n      quantityUnit: \"kg\",\n      images: [],\n      location: \"Sangli, MH\",\n      contactInfo: \"+91-9876543210\",\n      isActive: true,\n      createdAt: new Date(),\n    };\n\n    const sampleItem2: MarketplaceItem = {\n      id: randomUUID(),\n      sellerId: \"sample-user-2\",\n      title: \"Organic Fertilizer\",\n      description: \"100% organic cow dung fertilizer, perfect for all crops. Improves soil health naturally.\",\n      category: \"fertilizers\",\n      price: \"15\",\n      priceUnit: \"per kg\",\n      quantity: \"500\",\n      quantityUnit: \"kg\",\n      images: [],\n      location: \"Kolhapur, MH\",\n      contactInfo: \"+91-9876543211\",\n      isActive: true,\n      createdAt: new Date(),\n    };\n\n    this.marketplaceItems.set(sampleItem1.id, sampleItem1);\n    this.marketplaceItems.set(sampleItem2.id, sampleItem2);\n\n    // Sample mandi prices\n    const samplePrice1: MandiPrice = {\n      id: randomUUID(),\n      market: \"Sangli Market\",\n      state: \"Maharashtra\",\n      commodity: \"Rice\",\n      variety: \"Basmati\",\n      grade: \"Grade A\",\n      minPrice: \"3000\",\n      maxPrice: \"3400\",\n      modalPrice: \"3200\",\n      priceUnit: \"per quintal\",\n      reportDate: new Date(),\n      createdAt: new Date(),\n    };\n\n    const samplePrice2: MandiPrice = {\n      id: randomUUID(),\n      market: \"Sangli Market\",\n      state: \"Maharashtra\",\n      commodity: \"Wheat\",\n      variety: \"Lokvan\",\n      grade: \"Grade A\",\n      minPrice: \"2700\",\n      maxPrice: \"3000\",\n      modalPrice: \"2850\",\n      priceUnit: \"per quintal\",\n      reportDate: new Date(),\n      createdAt: new Date(),\n    };\n\n    this.mandiPrices.set(samplePrice1.id, samplePrice1);\n    this.mandiPrices.set(samplePrice2.id, samplePrice2);\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByPhone(phone: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.phone === phone);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      id,\n      name: null,\n      age: null,\n      location: null,\n      farmSize: null,\n      primaryCrops: null,\n      isOnboarded: false,\n      createdAt: new Date(),\n      ...insertUser,\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const user = this.users.get(id);\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Disease report methods\n  async createDiseaseReport(report: InsertDiseaseReport): Promise<DiseaseReport> {\n    const id = randomUUID();\n    const diseaseReport: DiseaseReport = {\n      id,\n      userId: report.userId,\n      imagePath: report.imagePath,\n      cropType: report.cropType || null,\n      diseaseName: report.diseaseName,\n      severity: report.severity || null,\n      confidence: report.confidence || null,\n      symptoms: report.symptoms || null,\n      treatment: report.treatment || null,\n      isMockResult: report.isMockResult || null,\n      createdAt: new Date(),\n    };\n    this.diseaseReports.set(id, diseaseReport);\n    return diseaseReport;\n  }\n\n  async getRecentDiseaseReports(userId: string, limit: number): Promise<DiseaseReport[]> {\n    const userReports = Array.from(this.diseaseReports.values())\n      .filter(report => report.userId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0))\n      .slice(0, limit);\n    \n    return userReports;\n  }\n\n  async getDiseaseReport(id: string): Promise<DiseaseReport | undefined> {\n    return this.diseaseReports.get(id);\n  }\n\n  // Community methods\n  async getCommunityPosts(limit: number = 20): Promise<CommunityPost[]> {\n    const posts = Array.from(this.communityPosts.values())\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0))\n      .slice(0, limit);\n    \n    // Add real user data for display\n    return posts.map(post => {\n      const user = this.users.get(post.userId);\n      return {\n        ...post,\n        user: {\n          name: user?.name || \"Anonymous Farmer\",\n          location: user?.location || \"Farm Location\",\n        }\n      };\n    }) as any;\n  }\n\n  async createCommunityPost(postData: any): Promise<CommunityPost> {\n    const id = randomUUID();\n    const post: CommunityPost = {\n      id,\n      userId: postData.userId,\n      title: postData.title,\n      content: postData.content,\n      images: postData.images || null,\n      likes: 0,\n      comments: 0,\n      tags: postData.tags || null,\n      createdAt: new Date(),\n    };\n    \n    this.communityPosts.set(id, post);\n    return post;\n  }\n\n  async likeCommunityPost(postId: string, userId: string): Promise<void> {\n    const post = this.communityPosts.get(postId);\n    if (post) {\n      post.likes = (post.likes || 0) + 1;\n    }\n  }\n\n  async getCommunityStats(): Promise<{\n    totalFarmers: string;\n    activePosts: string;\n    helpRate: string;\n  }> {\n    return {\n      totalFarmers: \"2.5K\",\n      activePosts: this.communityPosts.size.toString(),\n      helpRate: \"95%\",\n    };\n  }\n\n  // Marketplace methods\n  async getMarketplaceItems(category?: string): Promise<MarketplaceItem[]> {\n    let items = Array.from(this.marketplaceItems.values())\n      .filter(item => item.isActive)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n    \n    if (category && category !== \"all\") {\n      items = items.filter(item => item.category === category);\n    }\n    \n    return items;\n  }\n\n  // Mandi prices methods\n  async getMandiPrices(market?: string, date?: string): Promise<MandiPrice[]> {\n    let prices = Array.from(this.mandiPrices.values())\n      .sort((a, b) => b.reportDate.getTime() - a.reportDate.getTime());\n    \n    if (market) {\n      prices = prices.filter(price => \n        price.market.toLowerCase().includes(market.toLowerCase())\n      );\n    }\n    \n    if (date) {\n      const filterDate = new Date(date);\n      prices = prices.filter(price => \n        price.reportDate.toDateString() === filterDate.toDateString()\n      );\n    }\n    \n    return prices;\n  }\n\n  async saveMandiPrices(prices: MandiPrice[]): Promise<void> {\n    prices.forEach(price => {\n      this.mandiPrices.set(price.id, price);\n    });\n  }\n\n  // Price alerts methods\n  async createPriceAlert(insertAlert: InsertPriceAlert): Promise<PriceAlert> {\n    const id = randomUUID();\n    const alert: PriceAlert = {\n      id,\n      userId: insertAlert.userId,\n      market: insertAlert.market,\n      commodity: insertAlert.commodity,\n      priceUnit: insertAlert.priceUnit || null,\n      isActive: insertAlert.isActive || null,\n      targetPrice: insertAlert.targetPrice,\n      alertType: insertAlert.alertType,\n      lastTriggered: null,\n      createdAt: new Date(),\n    };\n    this.priceAlerts.set(id, alert);\n    return alert;\n  }\n\n  async getUserPriceAlerts(userId: string): Promise<PriceAlert[]> {\n    return Array.from(this.priceAlerts.values())\n      .filter(alert => alert.userId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async updatePriceAlert(id: string, updates: Partial<PriceAlert>): Promise<PriceAlert> {\n    const alert = this.priceAlerts.get(id);\n    if (!alert) {\n      throw new Error(\"Price alert not found\");\n    }\n    \n    const updatedAlert = { ...alert, ...updates };\n    this.priceAlerts.set(id, updatedAlert);\n    return updatedAlert;\n  }\n\n  async deletePriceAlert(id: string): Promise<void> {\n    this.priceAlerts.delete(id);\n  }\n\n  async getActivePriceAlerts(): Promise<PriceAlert[]> {\n    return Array.from(this.priceAlerts.values())\n      .filter(alert => alert.isActive);\n  }\n\n  // Produce listings methods\n  async createProduceListing(listing: InsertProduceListing): Promise<ProduceListing> {\n    const id = randomUUID();\n    const produceListing: ProduceListing = {\n      id,\n      farmerId: listing.farmerId,\n      cropName: listing.cropName,\n      variety: listing.variety || null,\n      quantity: listing.quantity,\n      quantityUnit: listing.quantityUnit,\n      quality: listing.quality,\n      expectedPrice: listing.expectedPrice,\n      priceUnit: listing.priceUnit || null,\n      harvestDate: listing.harvestDate,\n      location: listing.location,\n      description: listing.description || null,\n      images: listing.images || null,\n      status: listing.status || null,\n      createdAt: new Date(),\n    };\n    this.produceListings.set(id, produceListing);\n    return produceListing;\n  }\n\n  async getProduceListings(status?: string): Promise<ProduceListing[]> {\n    let listings = Array.from(this.produceListings.values());\n    if (status) {\n      listings = listings.filter(listing => listing.status === status);\n    }\n    return listings.sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async getProduceListingById(id: string): Promise<ProduceListing | undefined> {\n    return this.produceListings.get(id);\n  }\n\n  async updateProduceListing(id: string, updates: Partial<ProduceListing>): Promise<ProduceListing> {\n    const listing = this.produceListings.get(id);\n    if (!listing) {\n      throw new Error(\"Produce listing not found\");\n    }\n    const updatedListing = { ...listing, ...updates };\n    this.produceListings.set(id, updatedListing);\n    return updatedListing;\n  }\n\n  // Bidding methods\n  async createBid(bid: InsertBid): Promise<Bid> {\n    const id = randomUUID();\n    const bidData: Bid = {\n      id,\n      listingId: bid.listingId,\n      buyerId: bid.buyerId,\n      buyerType: bid.buyerType,\n      bidAmount: bid.bidAmount,\n      quantity: bid.quantity,\n      notes: bid.notes || null,\n      status: bid.status || null,\n      validUntil: bid.validUntil,\n      createdAt: new Date(),\n    };\n    this.bids.set(id, bidData);\n    return bidData;\n  }\n\n  async getBidsForListing(listingId: string): Promise<Bid[]> {\n    return Array.from(this.bids.values())\n      .filter(bid => bid.listingId === listingId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async getUserBids(userId: string): Promise<Bid[]> {\n    return Array.from(this.bids.values())\n      .filter(bid => bid.buyerId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async updateBidStatus(bidId: string, status: string): Promise<Bid> {\n    const bid = this.bids.get(bidId);\n    if (!bid) {\n      throw new Error(\"Bid not found\");\n    }\n    const updatedBid = { ...bid, status };\n    this.bids.set(bidId, updatedBid);\n    return updatedBid;\n  }\n\n  // Logistics methods\n  async createLogisticsOrder(order: InsertLogisticsOrder): Promise<LogisticsOrder> {\n    const id = randomUUID();\n    const logisticsOrder: LogisticsOrder = {\n      id,\n      listingId: order.listingId,\n      buyerId: order.buyerId,\n      farmerId: order.farmerId,\n      bidId: order.bidId || null,\n      pickupLocation: order.pickupLocation,\n      deliveryLocation: order.deliveryLocation,\n      transportPartner: order.transportPartner,\n      storagePartner: order.storagePartner || null,\n      transportCost: order.transportCost || null,\n      storageCost: order.storageCost || null,\n      totalAmount: order.totalAmount,\n      paymentStatus: order.paymentStatus || null,\n      orderStatus: order.orderStatus || null,\n      scheduledPickup: order.scheduledPickup || null,\n      estimatedDelivery: order.estimatedDelivery || null,\n      actualDelivery: order.actualDelivery || null,\n      createdAt: new Date(),\n    };\n    this.logisticsOrders.set(id, logisticsOrder);\n    return logisticsOrder;\n  }\n\n  async getLogisticsOrders(userId: string): Promise<LogisticsOrder[]> {\n    return Array.from(this.logisticsOrders.values())\n      .filter(order => order.farmerId === userId || order.buyerId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async updateLogisticsOrder(id: string, updates: Partial<LogisticsOrder>): Promise<LogisticsOrder> {\n    const order = this.logisticsOrders.get(id);\n    if (!order) {\n      throw new Error(\"Logistics order not found\");\n    }\n    const updatedOrder = { ...order, ...updates };\n    this.logisticsOrders.set(id, updatedOrder);\n    return updatedOrder;\n  }\n}\n\nclass PostgresStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    try {\n      const db = getDb();\n      const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n      return result[0];\n    } catch (error) {\n      console.error(\"Error getting user:\", error);\n      return undefined;\n    }\n  }\n\n  async getUserByPhone(phone: string): Promise<User | undefined> {\n    try {\n      const db = getDb();\n      const result = await db.select().from(users).where(eq(users.phone, phone)).limit(1);\n      return result[0];\n    } catch (error) {\n      console.error(\"Error getting user by phone:\", error);\n      return undefined;\n    }\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    try {\n      const db = getDb();\n      const result = await db.insert(users).values(insertUser).returning();\n      return result[0];\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      throw error;\n    }\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    try {\n      const db = getDb();\n      const result = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n      if (!result[0]) {\n        throw new Error(\"User not found\");\n      }\n      return result[0];\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      throw error;\n    }\n  }\n\n  // Disease report methods\n  async createDiseaseReport(report: InsertDiseaseReport): Promise<DiseaseReport> {\n    try {\n      const db = getDb();\n      const result = await db.insert(diseaseReports).values(report).returning();\n      return result[0];\n    } catch (error) {\n      console.error(\"Error creating disease report:\", error);\n      throw error;\n    }\n  }\n\n  async getRecentDiseaseReports(userId: string, limit: number): Promise<DiseaseReport[]> {\n    try {\n      const db = getDb();\n      const result = await db\n        .select()\n        .from(diseaseReports)\n        .where(eq(diseaseReports.userId, userId))\n        .orderBy(desc(diseaseReports.createdAt))\n        .limit(limit);\n      return result;\n    } catch (error) {\n      console.error(\"Error getting disease reports:\", error);\n      return [];\n    }\n  }\n\n  async getDiseaseReport(id: string): Promise<DiseaseReport | undefined> {\n    try {\n      const db = getDb();\n      const result = await db.select().from(diseaseReports).where(eq(diseaseReports.id, id)).limit(1);\n      return result[0];\n    } catch (error) {\n      console.error(\"Error getting disease report:\", error);\n      return undefined;\n    }\n  }\n\n  // Community methods\n  async getCommunityPosts(limit: number = 20): Promise<CommunityPost[]> {\n    try {\n      const db = getDb();\n      const result = await db\n        .select({\n          id: communityPosts.id,\n          userId: communityPosts.userId,\n          title: communityPosts.title,\n          content: communityPosts.content,\n          images: communityPosts.images,\n          likes: communityPosts.likes,\n          comments: communityPosts.comments,\n          tags: communityPosts.tags,\n          createdAt: communityPosts.createdAt,\n          user: {\n            name: users.name,\n            location: users.location,\n          }\n        })\n        .from(communityPosts)\n        .leftJoin(users, eq(communityPosts.userId, users.id))\n        .orderBy(desc(communityPosts.createdAt))\n        .limit(limit);\n      return result as any;\n    } catch (error) {\n      console.error(\"Error getting community posts:\", error);\n      return [];\n    }\n  }\n\n  async createCommunityPost(postData: any): Promise<CommunityPost> {\n    try {\n      const db = getDb();\n      const [post] = await db\n        .insert(communityPosts)\n        .values({\n          userId: postData.userId,\n          title: postData.title,\n          content: postData.content,\n          images: postData.images || null,\n          tags: postData.tags || null,\n        })\n        .returning();\n      return post;\n    } catch (error) {\n      console.error(\"Error creating community post:\", error);\n      throw new Error(\"Failed to create post\");\n    }\n  }\n\n  async likeCommunityPost(postId: string, userId: string): Promise<void> {\n    try {\n      const db = getDb();\n      await db\n        .update(communityPosts)\n        .set({ likes: sql`${communityPosts.likes} + 1` })\n        .where(eq(communityPosts.id, postId));\n    } catch (error) {\n      console.error(\"Error liking post:\", error);\n      throw new Error(\"Failed to like post\");\n    }\n  }\n\n  async getCommunityStats(): Promise<{\n    totalFarmers: string;\n    activePosts: string;\n    helpRate: string;\n  }> {\n    try {\n      const db = getDb();\n      const [farmerCount, postCount] = await Promise.all([\n        db.select({ count: count() }).from(users),\n        db.select({ count: count() }).from(communityPosts)\n      ]);\n      \n      return {\n        totalFarmers: farmerCount[0]?.count?.toString() || \"0\",\n        activePosts: postCount[0]?.count?.toString() || \"0\",\n        helpRate: \"95%\",\n      };\n    } catch (error) {\n      console.error(\"Error getting community stats:\", error);\n      return {\n        totalFarmers: \"2.5K\",\n        activePosts: \"450\",\n        helpRate: \"95%\",\n      };\n    }\n  }\n\n  // Marketplace methods\n  async getMarketplaceItems(category?: string): Promise<MarketplaceItem[]> {\n    try {\n      const db = getDb();\n      let query = db.select().from(marketplaceItems).where(eq(marketplaceItems.isActive, true));\n      \n      if (category && category !== \"all\") {\n        query = query.where(and(eq(marketplaceItems.isActive, true), eq(marketplaceItems.category, category)));\n      }\n      \n      const result = await query.orderBy(desc(marketplaceItems.createdAt));\n      return result;\n    } catch (error) {\n      console.error(\"Error getting marketplace items:\", error);\n      return [];\n    }\n  }\n\n  // Mandi prices methods\n  async getMandiPrices(market?: string, date?: string): Promise<MandiPrice[]> {\n    try {\n      const db = getDb();\n      let query = db.select().from(mandiPrices);\n      const conditions = [];\n      \n      if (market) {\n        conditions.push(like(mandiPrices.market, `%${market}%`));\n      }\n      \n      if (date) {\n        const filterDate = new Date(date);\n        conditions.push(eq(mandiPrices.reportDate, filterDate));\n      }\n      \n      if (conditions.length > 0) {\n        query = query.where(and(...conditions));\n      }\n      \n      const result = await query.orderBy(desc(mandiPrices.reportDate));\n      return result;\n    } catch (error) {\n      console.error(\"Error getting mandi prices:\", error);\n      return [];\n    }\n  }\n\n  async saveMandiPrices(prices: MandiPrice[]): Promise<void> {\n    try {\n      const db = getDb();\n      if (prices.length > 0) {\n        await db.insert(mandiPrices).values(prices);\n      }\n    } catch (error) {\n      console.error(\"Error saving mandi prices:\", error);\n    }\n  }\n\n  // Price alerts methods\n  async createPriceAlert(insertAlert: InsertPriceAlert): Promise<PriceAlert> {\n    try {\n      const db = getDb();\n      const result = await db.insert(priceAlerts).values(insertAlert).returning();\n      return result[0];\n    } catch (error) {\n      console.error(\"Error creating price alert:\", error);\n      throw error;\n    }\n  }\n\n  async getUserPriceAlerts(userId: string): Promise<PriceAlert[]> {\n    try {\n      const db = getDb();\n      const result = await db\n        .select()\n        .from(priceAlerts)\n        .where(eq(priceAlerts.userId, userId))\n        .orderBy(desc(priceAlerts.createdAt));\n      return result;\n    } catch (error) {\n      console.error(\"Error getting user price alerts:\", error);\n      return [];\n    }\n  }\n\n  async updatePriceAlert(id: string, updates: Partial<PriceAlert>): Promise<PriceAlert> {\n    try {\n      const db = getDb();\n      const result = await db.update(priceAlerts).set(updates).where(eq(priceAlerts.id, id)).returning();\n      if (!result[0]) {\n        throw new Error(\"Price alert not found\");\n      }\n      return result[0];\n    } catch (error) {\n      console.error(\"Error updating price alert:\", error);\n      throw error;\n    }\n  }\n\n  async deletePriceAlert(id: string): Promise<void> {\n    try {\n      const db = getDb();\n      await db.delete(priceAlerts).where(eq(priceAlerts.id, id));\n    } catch (error) {\n      console.error(\"Error deleting price alert:\", error);\n      throw error;\n    }\n  }\n\n  async getActivePriceAlerts(): Promise<PriceAlert[]> {\n    try {\n      const db = getDb();\n      const result = await db\n        .select()\n        .from(priceAlerts)\n        .where(eq(priceAlerts.isActive, true))\n        .orderBy(desc(priceAlerts.createdAt));\n      return result;\n    } catch (error) {\n      console.error(\"Error getting active price alerts:\", error);\n      return [];\n    }\n  }\n\n  // Produce listings methods\n  async createProduceListing(listing: InsertProduceListing): Promise<ProduceListing> {\n    try {\n      const db = getDb();\n      const result = await db.insert(produceListings).values(listing).returning();\n      return result[0];\n    } catch (error) {\n      console.error(\"Error creating produce listing:\", error);\n      throw error;\n    }\n  }\n\n  async getProduceListings(status?: string): Promise<ProduceListing[]> {\n    try {\n      const db = getDb();\n      let query = db.select().from(produceListings);\n      if (status) {\n        query = query.where(eq(produceListings.status, status));\n      }\n      const result = await query.orderBy(desc(produceListings.createdAt));\n      return result;\n    } catch (error) {\n      console.error(\"Error getting produce listings:\", error);\n      return [];\n    }\n  }\n\n  async getProduceListingById(id: string): Promise<ProduceListing | undefined> {\n    try {\n      const db = getDb();\n      const result = await db.select().from(produceListings).where(eq(produceListings.id, id)).limit(1);\n      return result[0];\n    } catch (error) {\n      console.error(\"Error getting produce listing:\", error);\n      return undefined;\n    }\n  }\n\n  async updateProduceListing(id: string, updates: Partial<ProduceListing>): Promise<ProduceListing> {\n    try {\n      const db = getDb();\n      const result = await db.update(produceListings).set(updates).where(eq(produceListings.id, id)).returning();\n      if (!result[0]) {\n        throw new Error(\"Produce listing not found\");\n      }\n      return result[0];\n    } catch (error) {\n      console.error(\"Error updating produce listing:\", error);\n      throw error;\n    }\n  }\n\n  // Bidding methods\n  async createBid(bid: InsertBid): Promise<Bid> {\n    try {\n      const db = getDb();\n      const result = await db.insert(bids).values(bid).returning();\n      return result[0];\n    } catch (error) {\n      console.error(\"Error creating bid:\", error);\n      throw error;\n    }\n  }\n\n  async getBidsForListing(listingId: string): Promise<Bid[]> {\n    try {\n      const db = getDb();\n      const result = await db\n        .select()\n        .from(bids)\n        .where(eq(bids.listingId, listingId))\n        .orderBy(desc(bids.createdAt));\n      return result;\n    } catch (error) {\n      console.error(\"Error getting bids for listing:\", error);\n      return [];\n    }\n  }\n\n  async getUserBids(userId: string): Promise<Bid[]> {\n    try {\n      const db = getDb();\n      const result = await db\n        .select()\n        .from(bids)\n        .where(eq(bids.buyerId, userId))\n        .orderBy(desc(bids.createdAt));\n      return result;\n    } catch (error) {\n      console.error(\"Error getting user bids:\", error);\n      return [];\n    }\n  }\n\n  async updateBidStatus(bidId: string, status: string): Promise<Bid> {\n    try {\n      const db = getDb();\n      const result = await db.update(bids).set({ status }).where(eq(bids.id, bidId)).returning();\n      if (!result[0]) {\n        throw new Error(\"Bid not found\");\n      }\n      return result[0];\n    } catch (error) {\n      console.error(\"Error updating bid status:\", error);\n      throw error;\n    }\n  }\n\n  // Logistics methods\n  async createLogisticsOrder(order: InsertLogisticsOrder): Promise<LogisticsOrder> {\n    try {\n      const db = getDb();\n      const result = await db.insert(logisticsOrders).values(order).returning();\n      return result[0];\n    } catch (error) {\n      console.error(\"Error creating logistics order:\", error);\n      throw error;\n    }\n  }\n\n  async getLogisticsOrders(userId: string): Promise<LogisticsOrder[]> {\n    try {\n      const db = getDb();\n      const result = await db\n        .select()\n        .from(logisticsOrders)\n        .where(or(eq(logisticsOrders.farmerId, userId), eq(logisticsOrders.buyerId, userId)))\n        .orderBy(desc(logisticsOrders.createdAt));\n      return result;\n    } catch (error) {\n      console.error(\"Error getting logistics orders:\", error);\n      return [];\n    }\n  }\n\n  async updateLogisticsOrder(id: string, updates: Partial<LogisticsOrder>): Promise<LogisticsOrder> {\n    try {\n      const db = getDb();\n      const result = await db.update(logisticsOrders).set(updates).where(eq(logisticsOrders.id, id)).returning();\n      if (!result[0]) {\n        throw new Error(\"Logistics order not found\");\n      }\n      return result[0];\n    } catch (error) {\n      console.error(\"Error updating logistics order:\", error);\n      throw error;\n    }\n  }\n}\n\n// Create a hybrid storage that falls back to in-memory when database fails\nclass HybridStorage implements IStorage {\n  private postgres: PostgresStorage;\n  private memory: MemStorage;\n  private useDatabase: boolean = true;\n\n  constructor() {\n    this.postgres = new PostgresStorage();\n    this.memory = new MemStorage();\n  }\n\n  private async safeDbOperation<T>(operation: () => Promise<T>, fallback: () => Promise<T>): Promise<T> {\n    if (!this.useDatabase) {\n      return fallback();\n    }\n\n    try {\n      return await operation();\n    } catch (error) {\n      console.warn(\"Database operation failed, falling back to in-memory storage:\", error);\n      this.useDatabase = false; // Disable database for this session\n      return fallback();\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.safeDbOperation(\n      () => this.postgres.getUser(id),\n      () => this.memory.getUser(id)\n    );\n  }\n\n  async getUserByPhone(phone: string): Promise<User | undefined> {\n    return this.safeDbOperation(\n      () => this.postgres.getUserByPhone(phone),\n      () => this.memory.getUserByPhone(phone)\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    return this.safeDbOperation(\n      () => this.postgres.createUser(insertUser),\n      () => this.memory.createUser(insertUser)\n    );\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    return this.safeDbOperation(\n      () => this.postgres.updateUser(id, updates),\n      () => this.memory.updateUser(id, updates)\n    );\n  }\n\n  async createDiseaseReport(report: InsertDiseaseReport): Promise<DiseaseReport> {\n    return this.safeDbOperation(\n      () => this.postgres.createDiseaseReport(report),\n      () => this.memory.createDiseaseReport(report)\n    );\n  }\n\n  async getRecentDiseaseReports(userId: string, limit: number): Promise<DiseaseReport[]> {\n    return this.safeDbOperation(\n      () => this.postgres.getRecentDiseaseReports(userId, limit),\n      () => this.memory.getRecentDiseaseReports(userId, limit)\n    );\n  }\n\n  async getDiseaseReport(id: string): Promise<DiseaseReport | undefined> {\n    return this.safeDbOperation(\n      () => this.postgres.getDiseaseReport(id),\n      () => this.memory.getDiseaseReport(id)\n    );\n  }\n\n  async getCommunityPosts(limit: number = 20): Promise<CommunityPost[]> {\n    return this.safeDbOperation(\n      () => this.postgres.getCommunityPosts(limit),\n      () => this.memory.getCommunityPosts(limit)\n    );\n  }\n\n  async createCommunityPost(postData: any): Promise<CommunityPost> {\n    return this.safeDbOperation(\n      () => this.postgres.createCommunityPost(postData),\n      () => this.memory.createCommunityPost(postData)\n    );\n  }\n\n  async likeCommunityPost(postId: string, userId: string): Promise<void> {\n    return this.safeDbOperation(\n      () => this.postgres.likeCommunityPost(postId, userId),\n      () => this.memory.likeCommunityPost(postId, userId)\n    );\n  }\n\n  async getCommunityStats(): Promise<{ totalFarmers: string; activePosts: string; helpRate: string; }> {\n    return this.safeDbOperation(\n      () => this.postgres.getCommunityStats(),\n      () => this.memory.getCommunityStats()\n    );\n  }\n\n  async getMarketplaceItems(category?: string): Promise<MarketplaceItem[]> {\n    return this.safeDbOperation(\n      () => this.postgres.getMarketplaceItems(category),\n      () => this.memory.getMarketplaceItems(category)\n    );\n  }\n\n  async getMandiPrices(market?: string, date?: string): Promise<MandiPrice[]> {\n    return this.safeDbOperation(\n      () => this.postgres.getMandiPrices(market, date),\n      () => this.memory.getMandiPrices(market, date)\n    );\n  }\n\n  async saveMandiPrices(prices: MandiPrice[]): Promise<void> {\n    return this.safeDbOperation(\n      () => this.postgres.saveMandiPrices(prices),\n      () => this.memory.saveMandiPrices(prices)\n    );\n  }\n\n  async createPriceAlert(insertAlert: InsertPriceAlert): Promise<PriceAlert> {\n    return this.safeDbOperation(\n      () => this.postgres.createPriceAlert(insertAlert),\n      () => this.memory.createPriceAlert(insertAlert)\n    );\n  }\n\n  async getUserPriceAlerts(userId: string): Promise<PriceAlert[]> {\n    return this.safeDbOperation(\n      () => this.postgres.getUserPriceAlerts(userId),\n      () => this.memory.getUserPriceAlerts(userId)\n    );\n  }\n\n  async updatePriceAlert(id: string, updates: Partial<PriceAlert>): Promise<PriceAlert> {\n    return this.safeDbOperation(\n      () => this.postgres.updatePriceAlert(id, updates),\n      () => this.memory.updatePriceAlert(id, updates)\n    );\n  }\n\n  async deletePriceAlert(id: string): Promise<void> {\n    return this.safeDbOperation(\n      () => this.postgres.deletePriceAlert(id),\n      () => this.memory.deletePriceAlert(id)\n    );\n  }\n\n  async getActivePriceAlerts(): Promise<PriceAlert[]> {\n    return this.safeDbOperation(\n      () => this.postgres.getActivePriceAlerts(),\n      () => this.memory.getActivePriceAlerts()\n    );\n  }\n\n  // Produce listings methods\n  async createProduceListing(listing: InsertProduceListing): Promise<ProduceListing> {\n    return this.safeDbOperation(\n      () => this.postgres.createProduceListing(listing),\n      () => this.memory.createProduceListing(listing)\n    );\n  }\n\n  async getProduceListings(status?: string): Promise<ProduceListing[]> {\n    return this.safeDbOperation(\n      () => this.postgres.getProduceListings(status),\n      () => this.memory.getProduceListings(status)\n    );\n  }\n\n  async getProduceListingById(id: string): Promise<ProduceListing | undefined> {\n    return this.safeDbOperation(\n      () => this.postgres.getProduceListingById(id),\n      () => this.memory.getProduceListingById(id)\n    );\n  }\n\n  async updateProduceListing(id: string, updates: Partial<ProduceListing>): Promise<ProduceListing> {\n    return this.safeDbOperation(\n      () => this.postgres.updateProduceListing(id, updates),\n      () => this.memory.updateProduceListing(id, updates)\n    );\n  }\n\n  // Bidding methods\n  async createBid(bid: InsertBid): Promise<Bid> {\n    return this.safeDbOperation(\n      () => this.postgres.createBid(bid),\n      () => this.memory.createBid(bid)\n    );\n  }\n\n  async getBidsForListing(listingId: string): Promise<Bid[]> {\n    return this.safeDbOperation(\n      () => this.postgres.getBidsForListing(listingId),\n      () => this.memory.getBidsForListing(listingId)\n    );\n  }\n\n  async getUserBids(userId: string): Promise<Bid[]> {\n    return this.safeDbOperation(\n      () => this.postgres.getUserBids(userId),\n      () => this.memory.getUserBids(userId)\n    );\n  }\n\n  async updateBidStatus(bidId: string, status: string): Promise<Bid> {\n    return this.safeDbOperation(\n      () => this.postgres.updateBidStatus(bidId, status),\n      () => this.memory.updateBidStatus(bidId, status)\n    );\n  }\n\n  // Logistics methods\n  async createLogisticsOrder(order: InsertLogisticsOrder): Promise<LogisticsOrder> {\n    return this.safeDbOperation(\n      () => this.postgres.createLogisticsOrder(order),\n      () => this.memory.createLogisticsOrder(order)\n    );\n  }\n\n  async getLogisticsOrders(userId: string): Promise<LogisticsOrder[]> {\n    return this.safeDbOperation(\n      () => this.postgres.getLogisticsOrders(userId),\n      () => this.memory.getLogisticsOrders(userId)\n    );\n  }\n\n  async updateLogisticsOrder(id: string, updates: Partial<LogisticsOrder>): Promise<LogisticsOrder> {\n    return this.safeDbOperation(\n      () => this.postgres.updateLogisticsOrder(id, updates),\n      () => this.memory.updateLogisticsOrder(id, updates)\n    );\n  }\n}\n\nexport const storage = new HybridStorage();\n","size_bytes":38582},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, decimal, jsonb, boolean, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  phone: varchar(\"phone\", { length: 15 }).notNull().unique(),\n  name: text(\"name\"),\n  age: integer(\"age\"),\n  location: text(\"location\"),\n  farmSize: decimal(\"farm_size\", { precision: 10, scale: 2 }),\n  primaryCrops: jsonb(\"primary_crops\").$type<string[]>(),\n  language: varchar(\"language\", { length: 5 }).default(\"en\"),\n  isOnboarded: boolean(\"is_onboarded\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const diseaseReports = pgTable(\"disease_reports\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id),\n  imagePath: text(\"image_path\").notNull(),\n  cropType: text(\"crop_type\"),\n  diseaseName: text(\"disease_name\").notNull(),\n  severity: text(\"severity\"), // Low, Medium, High\n  confidence: decimal(\"confidence\", { precision: 5, scale: 2 }),\n  symptoms: text(\"symptoms\"),\n  treatment: text(\"treatment\"),\n  isMockResult: boolean(\"is_mock_result\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const mandiPrices = pgTable(\"mandi_prices\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  market: text(\"market\").notNull(),\n  state: text(\"state\").notNull(),\n  commodity: text(\"commodity\").notNull(),\n  variety: text(\"variety\"),\n  grade: text(\"grade\"),\n  minPrice: decimal(\"min_price\", { precision: 10, scale: 2 }),\n  maxPrice: decimal(\"max_price\", { precision: 10, scale: 2 }),\n  modalPrice: decimal(\"modal_price\", { precision: 10, scale: 2 }),\n  priceUnit: text(\"price_unit\").default(\"per quintal\"),\n  reportDate: timestamp(\"report_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const communityPosts = pgTable(\"community_posts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\"),\n  content: text(\"content\").notNull(),\n  images: jsonb(\"images\").$type<string[]>(),\n  likes: integer(\"likes\").default(0),\n  comments: integer(\"comments\").default(0),\n  tags: jsonb(\"tags\").$type<string[]>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const marketplaceItems = pgTable(\"marketplace_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sellerId: uuid(\"seller_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(), // seeds, fertilizers, tools, produce\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  priceUnit: text(\"price_unit\").default(\"per unit\"),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }),\n  quantityUnit: text(\"quantity_unit\"),\n  images: jsonb(\"images\").$type<string[]>(),\n  location: text(\"location\"),\n  contactInfo: text(\"contact_info\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const weatherCache = pgTable(\"weather_cache\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  location: text(\"location\").notNull(),\n  weatherData: jsonb(\"weather_data\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const priceAlerts = pgTable(\"price_alerts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id),\n  commodity: text(\"commodity\").notNull(),\n  market: text(\"market\").notNull(),\n  targetPrice: decimal(\"target_price\", { precision: 10, scale: 2 }).notNull(),\n  priceUnit: text(\"price_unit\").default(\"per quintal\"),\n  alertType: text(\"alert_type\").notNull(), // 'above', 'below'\n  isActive: boolean(\"is_active\").default(true),\n  lastTriggered: timestamp(\"last_triggered\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const produceListings = pgTable(\"produce_listings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  farmerId: uuid(\"farmer_id\").notNull().references(() => users.id),\n  cropName: text(\"crop_name\").notNull(),\n  variety: text(\"variety\"),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  quantityUnit: text(\"quantity_unit\").notNull().default(\"quintal\"),\n  quality: text(\"quality\").notNull(), // A, B, C grade\n  expectedPrice: decimal(\"expected_price\", { precision: 10, scale: 2 }).notNull(),\n  priceUnit: text(\"price_unit\").default(\"per quintal\"),\n  harvestDate: timestamp(\"harvest_date\").notNull(),\n  location: text(\"location\").notNull(),\n  description: text(\"description\"),\n  images: jsonb(\"images\").$type<string[]>(),\n  status: text(\"status\").default(\"active\"), // active, sold, expired\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const bids = pgTable(\"bids\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  listingId: uuid(\"listing_id\").notNull().references(() => produceListings.id),\n  buyerId: uuid(\"buyer_id\").notNull().references(() => users.id),\n  buyerType: text(\"buyer_type\").notNull(), // buyer, warehouse, transporter\n  bidAmount: decimal(\"bid_amount\", { precision: 10, scale: 2 }).notNull(),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  notes: text(\"notes\"),\n  status: text(\"status\").default(\"pending\"), // pending, accepted, rejected, expired\n  validUntil: timestamp(\"valid_until\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const logisticsOrders = pgTable(\"logistics_orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  listingId: uuid(\"listing_id\").notNull().references(() => produceListings.id),\n  buyerId: uuid(\"buyer_id\").notNull().references(() => users.id),\n  farmerId: uuid(\"farmer_id\").notNull().references(() => users.id),\n  bidId: uuid(\"bid_id\").references(() => bids.id),\n  pickupLocation: text(\"pickup_location\").notNull(),\n  deliveryLocation: text(\"delivery_location\").notNull(),\n  transportPartner: text(\"transport_partner\").notNull(),\n  storagePartner: text(\"storage_partner\"),\n  transportCost: decimal(\"transport_cost\", { precision: 10, scale: 2 }),\n  storageCost: decimal(\"storage_cost\", { precision: 10, scale: 2 }),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentStatus: text(\"payment_status\").default(\"pending\"), // pending, paid, failed\n  orderStatus: text(\"order_status\").default(\"created\"), // created, pickup_scheduled, in_transit, delivered, completed\n  scheduledPickup: timestamp(\"scheduled_pickup\"),\n  estimatedDelivery: timestamp(\"estimated_delivery\"),\n  actualDelivery: timestamp(\"actual_delivery\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDiseaseReportSchema = createInsertSchema(diseaseReports).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMandiPriceSchema = createInsertSchema(mandiPrices).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCommunityPostSchema = createInsertSchema(communityPosts).omit({\n  id: true,\n  createdAt: true,\n  likes: true,\n  comments: true,\n});\n\nexport const insertMarketplaceItemSchema = createInsertSchema(marketplaceItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPriceAlertSchema = createInsertSchema(priceAlerts).omit({\n  id: true,\n  createdAt: true,\n  lastTriggered: true,\n});\n\nexport const insertProduceListingSchema = createInsertSchema(produceListings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBidSchema = createInsertSchema(bids).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLogisticsOrderSchema = createInsertSchema(logisticsOrders).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type DiseaseReport = typeof diseaseReports.$inferSelect;\nexport type InsertDiseaseReport = z.infer<typeof insertDiseaseReportSchema>;\nexport type MandiPrice = typeof mandiPrices.$inferSelect;\nexport type InsertMandiPrice = z.infer<typeof insertMandiPriceSchema>;\nexport type CommunityPost = typeof communityPosts.$inferSelect;\nexport type InsertCommunityPost = z.infer<typeof insertCommunityPostSchema>;\nexport type MarketplaceItem = typeof marketplaceItems.$inferSelect;\nexport type InsertMarketplaceItem = z.infer<typeof insertMarketplaceItemSchema>;\nexport type PriceAlert = typeof priceAlerts.$inferSelect;\nexport type InsertPriceAlert = z.infer<typeof insertPriceAlertSchema>;\nexport type WeatherCache = typeof weatherCache.$inferSelect;\nexport type ProduceListing = typeof produceListings.$inferSelect;\nexport type InsertProduceListing = z.infer<typeof insertProduceListingSchema>;\nexport type Bid = typeof bids.$inferSelect;\nexport type InsertBid = z.infer<typeof insertBidSchema>;\nexport type LogisticsOrder = typeof logisticsOrders.$inferSelect;\nexport type InsertLogisticsOrder = z.infer<typeof insertLogisticsOrderSchema>;\n\n// Solar Income Calculator Schema\nexport const solarCalculatorSchema = z.object({\n  fieldSize: z.string()\n    .min(1, \"Field size is required\")\n    .refine((val) => !isNaN(Number(val)) && Number(val) > 0, \"Field size must be a positive number\"),\n  fieldSizeUnit: z.enum([\"acre\", \"hectare\"]).default(\"acre\"),\n  currentCropIncome: z.string()\n    .min(1, \"Current crop income is required\")\n    .refine((val) => !isNaN(Number(val)) && Number(val) > 0, \"Current crop income must be a positive number\"),\n  solarPanelCapacity: z.string()\n    .min(1, \"Solar panel capacity is required\")\n    .refine((val) => !isNaN(Number(val)) && Number(val) > 0, \"Solar panel capacity must be a positive number\"),\n  sunlightHours: z.string()\n    .min(1, \"Sunlight hours is required\")\n    .refine((val) => !isNaN(Number(val)) && Number(val) > 0 && Number(val) <= 24, \"Sunlight hours must be between 0 and 24\"),\n  electricityRate: z.string()\n    .min(1, \"Electricity rate is required\")\n    .refine((val) => !isNaN(Number(val)) && Number(val) > 0, \"Electricity rate must be a positive number\"),\n  installationCost: z.string()\n    .optional()\n    .refine((val) => !val || (!isNaN(Number(val)) && Number(val) >= 0), \"Installation cost must be a positive number or zero\"),\n  governmentSubsidy: z.string()\n    .optional()\n    .refine((val) => !val || (!isNaN(Number(val)) && Number(val) >= 0), \"Government subsidy must be a positive number or zero\"),\n  maintenanceCost: z.string()\n    .optional()\n    .refine((val) => !val || (!isNaN(Number(val)) && Number(val) >= 0), \"Maintenance cost must be a positive number or zero\")\n});\n\nexport type SolarCalculatorForm = z.infer<typeof solarCalculatorSchema>;\n","size_bytes":10998},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useEffect } from \"react\";\nimport i18n from \"@/lib/i18n\";\nimport { queryClient } from \"@/lib/queryClient\";\n\n// Pages\nimport Landing from \"@/pages/landing\";\nimport Auth from \"@/pages/auth\";\nimport Onboarding from \"@/pages/onboarding\";\nimport Dashboard from \"@/pages/dashboard\";\nimport CropDetect from \"@/pages/crop-detect\";\nimport MandiPrices from \"@/pages/mandi-prices\";\nimport Weather from \"@/pages/weather\";\nimport Community from \"@/pages/community\";\nimport Marketplace from \"@/pages/marketplace\";\nimport FarmerMarketplace from \"@/pages/farmer-marketplace\";\nimport HelpAssistant from \"@/pages/help-assistant\";\nimport Profile from \"@/pages/profile\";\nimport GovernmentSchemes from \"@/pages/government-schemes\";\nimport AIAssistant from \"@/pages/ai-assistant\";\nimport SolarIncomePlanner from \"@/pages/solar-income-planner\";\nimport NotFound from \"@/pages/not-found\";\n\n// Components\nimport BottomNavigation from \"@/components/bottom-navigation\";\n\nfunction PageWrapper({ children }: { children: React.ReactNode }) {\n  const [location] = useLocation();\n  \n  return (\n    <AnimatePresence mode=\"wait\">\n      <motion.div\n        key={location}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: -20 }}\n        transition={{ duration: 0.3 }}\n        className=\"min-h-screen\"\n      >\n        {children}\n      </motion.div>\n    </AnimatePresence>\n  );\n}\n\nfunction Router() {\n  const { isAuthenticated, user } = useAuth();\n  const [location] = useLocation();\n\n  // Update i18n language when user language changes\n  useEffect(() => {\n    if (user?.language) {\n      i18n.changeLanguage(user.language);\n    }\n  }, [user?.language]);\n\n  const showBottomNav = isAuthenticated && ![\"/\", \"/auth\", \"/onboarding\"].includes(location);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Switch>\n        <Route path=\"/\">\n          <PageWrapper>\n            <Landing />\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/auth\">\n          <PageWrapper>\n            <Auth />\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/onboarding\">\n          <PageWrapper>\n            {isAuthenticated ? <Onboarding /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/dashboard\">\n          <PageWrapper>\n            {isAuthenticated ? <Dashboard /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/crop-detect\">\n          <PageWrapper>\n            {isAuthenticated ? <CropDetect /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/mandi-prices\">\n          <PageWrapper>\n            {isAuthenticated ? <MandiPrices /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/weather\">\n          <PageWrapper>\n            {isAuthenticated ? <Weather /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/community\">\n          <PageWrapper>\n            {isAuthenticated ? <Community /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/marketplace\">\n          <PageWrapper>\n            {isAuthenticated ? <Marketplace /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/farmer-marketplace\">\n          <PageWrapper>\n            {isAuthenticated ? <FarmerMarketplace /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/help-assistant\">\n          <PageWrapper>\n            {isAuthenticated ? <HelpAssistant /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/profile\">\n          <PageWrapper>\n            {isAuthenticated ? <Profile /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/government-schemes\">\n          <PageWrapper>\n            {isAuthenticated ? <GovernmentSchemes /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/ai-assistant\">\n          <PageWrapper>\n            {isAuthenticated ? <AIAssistant /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        <Route path=\"/solar-income\">\n          <PageWrapper>\n            {isAuthenticated ? <SolarIncomePlanner /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        {/* Legacy redirect for old solar income planner URL */}\n        <Route path=\"/solar-income-planner\">\n          <PageWrapper>\n            {isAuthenticated ? <SolarIncomePlanner /> : <Auth />}\n          </PageWrapper>\n        </Route>\n        \n        <Route>\n          <PageWrapper>\n            <NotFound />\n          </PageWrapper>\n        </Route>\n      </Switch>\n      \n      {showBottomNav && <BottomNavigation />}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5338},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;500;600;700;800&family=Roboto:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Fresh, clean farmer-friendly theme */\n  --background: hsl(95, 20%, 97%);\n  --foreground: hsl(95, 25%, 15%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(95, 25%, 15%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(95, 25%, 15%);\n  --primary: hsl(95, 60%, 45%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(95, 15%, 92%);\n  --secondary-foreground: hsl(95, 25%, 25%);\n  --muted: hsl(95, 10%, 95%);\n  --muted-foreground: hsl(95, 8%, 45%);\n  --accent: hsl(35, 85%, 55%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 75%, 55%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(95, 15%, 88%);\n  --input: hsl(95, 10%, 95%);\n  --ring: hsl(95, 60%, 45%);\n  --success: hsl(120, 60%, 50%);\n  --warning: hsl(35, 85%, 55%);\n  --info: hsl(210, 80%, 60%);\n  --font-sans: 'Nunito', 'Roboto', system-ui, sans-serif;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(95, 10%, 8%);\n  --foreground: hsl(95, 5%, 95%);\n  --card: hsl(95, 8%, 12%);\n  --card-foreground: hsl(95, 5%, 95%);\n  --popover: hsl(95, 8%, 12%);\n  --popover-foreground: hsl(95, 5%, 95%);\n  --primary: hsl(95, 65%, 55%);\n  --primary-foreground: hsl(95, 10%, 8%);\n  --secondary: hsl(95, 8%, 18%);\n  --secondary-foreground: hsl(95, 5%, 75%);\n  --muted: hsl(95, 8%, 15%);\n  --muted-foreground: hsl(95, 5%, 55%);\n  --accent: hsl(35, 80%, 60%);\n  --accent-foreground: hsl(95, 10%, 8%);\n  --destructive: hsl(0, 70%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(95, 8%, 22%);\n  --input: hsl(95, 8%, 15%);\n  --ring: hsl(95, 65%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  /* Clean farmer-friendly card styles */\n  .farm-card {\n    @apply bg-card border border-border rounded-lg shadow-sm transition-all duration-200 ease-in-out;\n  }\n\n  .farm-card:hover {\n    @apply shadow-md border-primary -translate-y-0.5;\n  }\n\n  /* Simple button variants */\n  .btn-farm-primary {\n    @apply bg-primary text-primary-foreground px-4 py-2 rounded-lg font-medium transition-colors;\n  }\n\n  .btn-farm-primary:hover {\n    @apply bg-primary opacity-90;\n  }\n\n  .btn-farm-secondary {\n    @apply bg-secondary text-secondary-foreground px-4 py-2 rounded-lg font-medium transition-colors;\n  }\n\n  .btn-farm-secondary:hover {\n    @apply bg-secondary opacity-80;\n  }\n\n  /* Clean input styles */\n  .input-farm {\n    @apply bg-input border border-border rounded-lg px-3 py-2 text-foreground placeholder:text-muted-foreground focus:ring-2 focus:ring-primary focus:border-primary transition-all;\n  }\n\n  /* Section headers */\n  .section-header {\n    @apply text-xl font-semibold text-foreground mb-4 flex items-center gap-2;\n  }\n\n  /* Status badges */\n  .status-success {\n    @apply bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium;\n  }\n\n  .status-warning {\n    @apply bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs font-medium;\n  }\n\n  .status-info {\n    @apply bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium;\n  }\n}\n\n@layer utilities {\n  @keyframes glowRotate {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n  }\n\n  @keyframes float {\n    0%, 100% { \n      transform: translateY(0px) rotate(0deg); \n      opacity: 0.6;\n    }\n    50% { \n      transform: translateY(-20px) rotate(180deg); \n      opacity: 1;\n    }\n  }\n\n  @keyframes pulse {\n    0%, 100% { \n      opacity: 0.4;\n      transform: scale(1);\n    }\n    50% { \n      opacity: 1;\n      transform: scale(1.1);\n    }\n  }\n\n  @keyframes slideUpFade {\n    from {\n      opacity: 0;\n      transform: translateY(40px) scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0) scale(1);\n    }\n  }\n\n  @keyframes scaleIn {\n    from {\n      opacity: 0;\n      transform: scale(0.8) rotate(-10deg);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1) rotate(0deg);\n    }\n  }\n\n  @keyframes morphing {\n    0%, 100% {\n      border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;\n      transform: rotate(0deg);\n    }\n    50% {\n      border-radius: 70% 30% 30% 70% / 70% 70% 30% 30%;\n      transform: rotate(180deg);\n    }\n  }\n\n  @keyframes bounce {\n    0%, 100% {\n      transform: translateY(-25%);\n      animation-timing-function: cubic-bezier(0.8, 0, 1, 1);\n    }\n    50% {\n      transform: translateY(0);\n      animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n    }\n  }\n\n  @keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n  }\n\n  @keyframes twinkle {\n    0%, 100% { opacity: 0.3; }\n    50% { opacity: 1; }\n  }\n\n  .animate-float {\n    animation: float 4s ease-in-out infinite;\n  }\n\n  .animate-pulse-slow {\n    animation: pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  .animate-slide-up {\n    animation: slideUpFade 0.8s ease-out forwards;\n  }\n\n  .animate-scale-in {\n    animation: scaleIn 0.6s ease-out forwards;\n  }\n\n  .animate-morphing {\n    animation: morphing 8s ease-in-out infinite;\n  }\n\n  .animate-twinkle {\n    animation: twinkle 2s ease-in-out infinite;\n  }\n\n  /* Premium hover effects */\n  .hover-glow {\n    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .hover-glow:hover {\n    transform: translateY(-6px) scale(1.03);\n    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.8), 0 0 40px rgba(34, 197, 94, 0.4);\n    filter: brightness(1.1);\n  }\n\n  .hover-magnetic {\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .hover-magnetic:hover {\n    transform: perspective(1000px) rotateX(5deg) rotateY(5deg) scale3d(1.05, 1.05, 1.05);\n  }\n\n  .hover-shine {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .hover-shine::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);\n    transition: left 0.6s;\n  }\n\n  .hover-shine:hover::before {\n    left: 100%;\n  }\n\n  /* Gradient text utilities */\n  .gradient-text-primary {\n    background: linear-gradient(135deg, hsl(142, 90%, 55%) 0%, hsl(47, 96%, 65%) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    animation: glowRotate 3s linear infinite;\n    background-size: 200% 200%;\n  }\n\n  .gradient-text-accent {\n    background: linear-gradient(135deg, hsl(47, 96%, 65%) 0%, hsl(210, 98%, 60%) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  /* Glass morphism enhanced */\n  .glass-dark {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n  }\n\n  .text-shadow-glow {\n    text-shadow: 0 0 20px rgba(34, 197, 94, 0.6), 0 0 40px rgba(34, 197, 94, 0.4), 0 0 60px rgba(34, 197, 94, 0.2);\n  }\n}\n","size_bytes":7160},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/fileUpload.ts":{"content":"import * as fs from \"fs\";\nimport * as path from \"path\";\nimport { randomUUID } from \"crypto\";\n\n// Simple local file storage for images\nconst UPLOAD_DIR = \"uploads/disease-images\";\n\n// Ensure upload directory exists\nif (!fs.existsSync(UPLOAD_DIR)) {\n  fs.mkdirSync(UPLOAD_DIR, { recursive: true });\n}\n\nexport async function saveImageLocally(file: Express.Multer.File, userId: string): Promise<string> {\n  try {\n    // Create unique filename\n    const fileExt = file.originalname.split('.').pop() || 'jpg';\n    const fileName = `${userId}_${Date.now()}.${fileExt}`;\n    const filePath = path.join(UPLOAD_DIR, fileName);\n    \n    // Save file to local storage\n    fs.writeFileSync(filePath, file.buffer);\n    \n    // Return relative path for storage\n    return `disease-images/${fileName}`;\n  } catch (error) {\n    console.error(\"File upload error:\", error);\n    throw error;\n  }\n}\n\nexport function getImageUrl(imagePath: string): string {\n  // For local development, serve images from uploads directory\n  return `/uploads/${imagePath}`;\n}","size_bytes":1035},"server/services/gemini.ts":{"content":"import * as fs from \"fs\";\nimport { GoogleGenAI } from \"@google/genai\";\n\n// This API key is from Gemini Developer API Key, not vertex AI API Key\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport interface CropDiseaseAnalysis {\n  diseaseName: string;\n  severity: \"Low\" | \"Medium\" | \"High\";\n  confidence: number;\n  symptoms: string;\n  treatment: string;\n}\n\nexport async function analyzeImage(imageBuffer: Buffer): Promise<CropDiseaseAnalysis> {\n  if (!process.env.GEMINI_API_KEY) {\n    throw new Error(\"Gemini API key not configured\");\n  }\n\n  try {\n    const systemPrompt = `You are an expert agricultural pathologist specializing in crop disease identification. \n    Analyze the provided crop image and provide a detailed diagnosis.\n    \n    Respond with JSON in this exact format:\n    {\n      \"diseaseName\": \"Name of the disease or 'Healthy' if no disease detected\",\n      \"severity\": \"Low\" | \"Medium\" | \"High\",\n      \"confidence\": number between 1-100,\n      \"symptoms\": \"Detailed description of visible symptoms\",\n      \"treatment\": \"Recommended treatment and prevention measures\"\n    }`;\n\n    const imageBase64 = imageBuffer.toString(\"base64\");\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            diseaseName: { type: \"string\" },\n            severity: { type: \"string\", enum: [\"Low\", \"Medium\", \"High\"] },\n            confidence: { type: \"number\" },\n            symptoms: { type: \"string\" },\n            treatment: { type: \"string\" },\n          },\n          required: [\"diseaseName\", \"severity\", \"confidence\", \"symptoms\", \"treatment\"],\n        },\n      },\n      contents: [\n        {\n          inlineData: {\n            data: imageBase64,\n            mimeType: \"image/jpeg\",\n          },\n        },\n        \"Analyze this crop image for diseases, pests, or health issues. Provide detailed symptoms and treatment recommendations.\",\n      ],\n    });\n\n    const rawJson = response.text;\n    console.log(`Gemini Raw Response: ${rawJson}`);\n\n    if (rawJson) {\n      const analysis: CropDiseaseAnalysis = JSON.parse(rawJson);\n      \n      // Validate the response\n      if (!analysis.diseaseName || !analysis.severity || !analysis.confidence) {\n        throw new Error(\"Incomplete analysis from Gemini\");\n      }\n      \n      return analysis;\n    } else {\n      throw new Error(\"Empty response from Gemini model\");\n    }\n  } catch (error) {\n    console.error(\"Gemini analysis error:\", error);\n    throw new Error(`Failed to analyze image: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\n\n// Helper function to analyze general farming questions\nexport async function askFarmingQuestion(question: string, context?: string): Promise<string> {\n  if (!process.env.GEMINI_API_KEY) {\n    throw new Error(\"Gemini API key not configured\");\n  }\n\n  try {\n    const systemPrompt = `You are an expert agricultural advisor with deep knowledge of farming practices, \n    crop management, pest control, weather patterns, and sustainable agriculture. Provide helpful, \n    practical advice tailored to small and medium-scale farmers. Focus on actionable solutions.`;\n\n    const contextualQuestion = context \n      ? `${context}\\n\\nQuestion: ${question}`\n      : question;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: systemPrompt,\n      },\n      contents: contextualQuestion,\n    });\n\n    return response.text || \"I'm sorry, I couldn't provide an answer at this time. Please try rephrasing your question.\";\n  } catch (error) {\n    console.error(\"Gemini farming question error:\", error);\n    throw new Error(\"Failed to get farming advice\");\n  }\n}\n","size_bytes":3892},"server/services/mandi.ts":{"content":"import { randomUUID } from \"crypto\";\nimport type { MandiPrice, InsertMandiPrice } from \"@shared/schema\";\nimport { storage } from \"../storage\";\n\ninterface MandiAPIResponse {\n  records: Array<{\n    market: string;\n    state: string;\n    commodity: string;\n    variety: string;\n    grade: string;\n    min_price: string;\n    max_price: string;\n    modal_price: string;\n    price_date: string;\n  }>;\n}\n\nexport async function getMandiPrices(market?: string, date?: string): Promise<MandiPrice[]> {\n  const govApiKey = process.env.GOV_MANDI_API_KEY;\n  \n  if (!govApiKey) {\n    console.log(\"Government Mandi API key not configured, using mock data\");\n    return generateMockMandiPrices(market);\n  }\n\n  try {\n    // Try to fetch from actual government API\n    const apiUrl = buildMandiApiUrl(market, date, govApiKey);\n    console.log(\"Fetching from Government Mandi API:\", apiUrl);\n\n    const response = await fetch(apiUrl, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'FarmConnect/1.0'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Government API error: ${response.status} ${response.statusText}`);\n    }\n\n    const data: MandiAPIResponse = await response.json();\n    \n    if (!data.records || data.records.length === 0) {\n      console.log(\"No records from Government API, using mock data\");\n      return generateMockMandiPrices(market);\n    }\n\n    // Convert API data to our format\n    const mandiPrices: MandiPrice[] = data.records.map(record => ({\n      id: randomUUID(),\n      market: record.market,\n      state: record.state,\n      commodity: record.commodity,\n      variety: record.variety || null,\n      grade: record.grade,\n      minPrice: record.min_price || null,\n      maxPrice: record.max_price || null,\n      modalPrice: record.modal_price || null,\n      priceUnit: \"per quintal\",\n      reportDate: new Date(record.price_date),\n      createdAt: new Date(),\n    }));\n\n    // Cache the results\n    try {\n      await storage.saveMandiPrices(mandiPrices);\n    } catch (storageError) {\n      console.error(\"Failed to cache mandi prices:\", storageError);\n      // Continue without caching if database is not available\n    }\n\n    return mandiPrices;\n  } catch (error) {\n    console.error(\"Government Mandi API error:\", error);\n    // Fallback to mock data\n    return generateMockMandiPrices(market);\n  }\n}\n\nfunction buildMandiApiUrl(market?: string, date?: string, apiKey?: string): string {\n  // Using the current daily price API from data.gov.in as specified by the user\n  const baseUrl = \"https://api.data.gov.in/resource/current-daily-price-various-commodities-various-markets-mandi\";\n  const params = new URLSearchParams({\n    'api-key': apiKey || '',\n    'format': 'json',\n    'limit': '100',\n  });\n\n  if (market) {\n    params.append('filters[market]', market);\n  }\n\n  if (date) {\n    params.append('filters[price_date]', date);\n  }\n\n  return `${baseUrl}?${params.toString()}`;\n}\n\nasync function getCachedMandiPrices(market?: string, date?: string): Promise<MandiPrice[]> {\n  // Get cached prices from storage\n  const cachedPrices = await storage.getMandiPrices(market, date);\n  \n  if (cachedPrices.length === 0) {\n    // If no cached data, generate some mock data for demo\n    return generateMockMandiPrices(market);\n  }\n  \n  return cachedPrices;\n}\n\nfunction generateMockMandiPrices(market?: string): MandiPrice[] {\n  const selectedMarket = market || \"Delhi Market\";\n  \n  // Enhanced realistic mock data based on actual Indian mandi prices as of 2025\n  const mockCommodities = [\n    {\n      commodity: \"Rice\",\n      variety: \"Basmati\",\n      grade: \"Grade A\",\n      minPrice: \"4200\",\n      maxPrice: \"4800\",\n      modalPrice: \"4500\",\n    },\n    {\n      commodity: \"Wheat\",\n      variety: \"Sharbati\",\n      grade: \"Grade A\",\n      minPrice: \"2800\",\n      maxPrice: \"3200\",\n      modalPrice: \"3000\",\n    },\n    {\n      commodity: \"Onion\",\n      variety: \"Bangalore Rose\",\n      grade: \"Grade A\",\n      minPrice: \"2500\",\n      maxPrice: \"3000\",\n      modalPrice: \"2750\",\n    },\n    {\n      commodity: \"Potato\",\n      variety: \"Jyoti\",\n      grade: \"Grade A\",\n      minPrice: \"1800\",\n      maxPrice: \"2200\",\n      modalPrice: \"2000\",\n    },\n    {\n      commodity: \"Tomato\",\n      variety: \"Local\",\n      grade: \"Grade A\",\n      minPrice: \"3500\",\n      maxPrice: \"4200\",\n      modalPrice: \"3850\",\n    },\n    {\n      commodity: \"Cotton\",\n      variety: \"Medium Staple\",\n      grade: \"FAQ\",\n      minPrice: \"6200\",\n      maxPrice: \"6600\",\n      modalPrice: \"6400\",\n    },\n    {\n      commodity: \"Sugarcane\",\n      variety: null,\n      grade: \"Common\",\n      minPrice: \"280\",\n      maxPrice: \"320\",\n      modalPrice: \"300\",\n    },\n    {\n      commodity: \"Turmeric\",\n      variety: \"Finger\",\n      grade: \"Grade A\",\n      minPrice: \"7500\",\n      maxPrice: \"8500\",\n      modalPrice: \"8000\",\n    },\n  ];\n\n  return mockCommodities.map(item => ({\n    id: randomUUID(),\n    market: selectedMarket,\n    state: \"Maharashtra\",\n    commodity: item.commodity,\n    variety: item.variety,\n    grade: item.grade,\n    minPrice: item.minPrice,\n    maxPrice: item.maxPrice,\n    modalPrice: item.modalPrice,\n    priceUnit: \"per quintal\",\n    reportDate: new Date(),\n    createdAt: new Date(),\n  }));\n}\n\n// Price analysis and trends\nexport function analyzePriceTrends(prices: MandiPrice[]): {\n  averagePrice: number;\n  priceChange: number;\n  trend: \"up\" | \"down\" | \"stable\";\n  recommendation: string;\n} {\n  if (prices.length === 0) {\n    return {\n      averagePrice: 0,\n      priceChange: 0,\n      trend: \"stable\",\n      recommendation: \"No price data available\",\n    };\n  }\n\n  // Sort by date to get trend\n  const sortedPrices = prices.sort((a, b) => \n    new Date(a.reportDate).getTime() - new Date(b.reportDate).getTime()\n  );\n\n  const latestPrice = parseFloat(sortedPrices[sortedPrices.length - 1].modalPrice || \"0\");\n  const previousPrice = sortedPrices.length > 1 \n    ? parseFloat(sortedPrices[sortedPrices.length - 2].modalPrice || \"0\")\n    : latestPrice;\n\n  const priceChange = ((latestPrice - previousPrice) / previousPrice) * 100;\n  const averagePrice = prices.reduce((sum, price) => \n    sum + parseFloat(price.modalPrice || \"0\"), 0\n  ) / prices.length;\n\n  let trend: \"up\" | \"down\" | \"stable\" = \"stable\";\n  if (priceChange > 2) trend = \"up\";\n  else if (priceChange < -2) trend = \"down\";\n\n  const recommendation = getMarketRecommendation(trend, priceChange);\n\n  return {\n    averagePrice: Math.round(averagePrice),\n    priceChange: Math.round(priceChange * 100) / 100,\n    trend,\n    recommendation,\n  };\n}\n\nfunction getMarketRecommendation(trend: \"up\" | \"down\" | \"stable\", changePercent: number): string {\n  switch (trend) {\n    case \"up\":\n      return `Prices increased by ${changePercent.toFixed(1)}%. Good time to sell if you have stock.`;\n    case \"down\":\n      return `Prices decreased by ${Math.abs(changePercent).toFixed(1)}%. Consider holding stock if possible.`;\n    default:\n      return \"Prices are stable. Normal trading conditions.\";\n  }\n}\n\n// Price alerts\nexport function checkPriceAlerts(currentPrice: number, targetPrice: number, alertType: \"above\" | \"below\"): {\n  triggered: boolean;\n  message: string;\n} {\n  const triggered = alertType === \"above\" \n    ? currentPrice >= targetPrice\n    : currentPrice <= targetPrice;\n\n  const message = triggered\n    ? `Price alert! Current price ‚Çπ${currentPrice} is ${alertType} your target of ‚Çπ${targetPrice}`\n    : `Price is ‚Çπ${currentPrice}, target is ‚Çπ${targetPrice} (${alertType})`;\n\n  return { triggered, message };\n}\n","size_bytes":7528},"server/services/supabase.ts":{"content":"import { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = process.env.SUPABASE_URL || \"\";\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY || \"\";\n\n// Initialize Supabase client with service role key for server-side operations\nexport const supabase = createClient(supabaseUrl, supabaseServiceKey, {\n  auth: {\n    autoRefreshToken: false,\n    persistSession: false,\n  },\n});\n\n// Storage bucket for disease detection images\nconst DISEASE_IMAGES_BUCKET = \"disease-images\";\n\nexport async function uploadToSupabase(file: Express.Multer.File, userId: string): Promise<string> {\n  if (!supabaseUrl || !supabaseServiceKey) {\n    throw new Error(\"Supabase credentials not configured\");\n  }\n\n  try {\n    // Create unique filename\n    const fileExt = file.originalname.split('.').pop() || 'jpg';\n    const fileName = `${userId}/${Date.now()}.${fileExt}`;\n\n    // Upload file to Supabase Storage\n    const { data, error } = await supabase.storage\n      .from(DISEASE_IMAGES_BUCKET)\n      .upload(fileName, file.buffer, {\n        contentType: file.mimetype,\n        cacheControl: '3600',\n        upsert: false,\n      });\n\n    if (error) {\n      console.error(\"Supabase upload error:\", error);\n      throw new Error(`Failed to upload image: ${error.message}`);\n    }\n\n    return data.path;\n  } catch (error) {\n    console.error(\"Upload to Supabase failed:\", error);\n    throw error;\n  }\n}\n\nexport async function getImageUrl(path: string): Promise<string | null> {\n  if (!supabaseUrl || !supabaseServiceKey) {\n    console.warn(\"Supabase credentials not configured\");\n    return null;\n  }\n\n  try {\n    const { data } = supabase.storage\n      .from(DISEASE_IMAGES_BUCKET)\n      .getPublicUrl(path);\n\n    return data.publicUrl;\n  } catch (error) {\n    console.error(\"Error getting image URL:\", error);\n    return null;\n  }\n}\n\nexport async function deleteImage(path: string): Promise<boolean> {\n  if (!supabaseUrl || !supabaseServiceKey) {\n    console.warn(\"Supabase credentials not configured\");\n    return false;\n  }\n\n  try {\n    const { error } = await supabase.storage\n      .from(DISEASE_IMAGES_BUCKET)\n      .remove([path]);\n\n    if (error) {\n      console.error(\"Error deleting image:\", error);\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    console.error(\"Error deleting image:\", error);\n    return false;\n  }\n}\n\n// Initialize storage bucket if it doesn't exist\nexport async function initializeStorageBucket(): Promise<void> {\n  if (!supabaseUrl || !supabaseServiceKey) {\n    console.warn(\"Supabase credentials not configured - skipping bucket initialization\");\n    return;\n  }\n\n  try {\n    // Check if bucket exists\n    const { data: buckets, error: listError } = await supabase.storage.listBuckets();\n\n    if (listError) {\n      console.error(\"Error listing buckets:\", listError);\n      return;\n    }\n\n    const bucketExists = buckets?.some(bucket => bucket.name === DISEASE_IMAGES_BUCKET);\n\n    if (!bucketExists) {\n      // Create bucket\n      const { error: createError } = await supabase.storage.createBucket(DISEASE_IMAGES_BUCKET, {\n        public: true,\n        allowedMimeTypes: ['image/jpeg', 'image/png', 'image/webp'],\n        fileSizeLimit: 10485760, // 10MB\n      });\n\n      if (createError) {\n        console.error(\"Error creating bucket:\", createError);\n      } else {\n        console.log(`Created storage bucket: ${DISEASE_IMAGES_BUCKET}`);\n      }\n    }\n  } catch (error) {\n    console.error(\"Error initializing storage bucket:\", error);\n  }\n}\n\n// Database connection test\nexport async function testSupabaseConnection(): Promise<boolean> {\n  if (!supabaseUrl || !supabaseServiceKey) {\n    console.warn(\"Supabase credentials not configured\");\n    return false;\n  }\n\n  try {\n    // Test connection by listing tables\n    const { data, error } = await supabase\n      .from('users')\n      .select('count(*)')\n      .limit(1);\n\n    if (error) {\n      console.error(\"Supabase connection test failed:\", error);\n      return false;\n    }\n\n    console.log(\"Supabase connection successful\");\n    return true;\n  } catch (error) {\n    console.error(\"Supabase connection test failed:\", error);\n    return false;\n  }\n}\n","size_bytes":4159},"server/services/weather.ts":{"content":"import type { WeatherCache } from \"@shared/schema\";\nimport { storage } from \"../storage\";\n\ninterface WeatherResponse {\n  location: string;\n  temperature: number;\n  condition: string;\n  humidity: number;\n  windSpeed: number;\n  description: string;\n  icon: string;\n}\n\ninterface OpenWeatherAPIData {\n  name: string;\n  main: {\n    temp: number;\n    humidity: number;\n    feels_like: number;\n  };\n  weather: Array<{\n    main: string;\n    description: string;\n    icon: string;\n  }>;\n  wind: {\n    speed: number;\n  };\n  sys: {\n    country: string;\n  };\n}\n\nexport async function getCurrentWeather(location: string): Promise<WeatherResponse> {\n  const apiKey = process.env.OPENWEATHER_API_KEY;\n  \n  if (!apiKey) {\n    console.log(\"OpenWeather API key not configured, using mock data\");\n    return getMockWeatherData(location);\n  }\n\n  try {\n    // Check cache first\n    const cached = await getCachedWeather(location);\n    if (cached && !isExpired(cached)) {\n      return cached.weatherData as WeatherResponse;\n    }\n\n    // Fetch from OpenWeather API\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(location)}&appid=${apiKey}&units=metric`\n    );\n\n    if (!response.ok) {\n      throw new Error(`OpenWeather API error: ${response.status}`);\n    }\n\n    const data: OpenWeatherAPIData = await response.json();\n    \n    const weatherResponse: WeatherResponse = {\n      location: `${data.name}, ${data.sys.country}`,\n      temperature: Math.round(data.main.temp),\n      condition: data.weather[0].main,\n      humidity: data.main.humidity,\n      windSpeed: Math.round(data.wind.speed * 3.6), // Convert m/s to km/h\n      description: getFarmingAdvice(data.weather[0].main, data.main.temp, data.main.humidity),\n      icon: data.weather[0].icon,\n    };\n\n    // Cache the result\n    await cacheWeatherData(location, weatherResponse);\n\n    return weatherResponse;\n  } catch (error) {\n    console.error(\"OpenWeather API error:\", error);\n    // Fallback to mock data on API failure\n    return getMockWeatherData(location);\n  }\n}\n\nfunction getMockWeatherData(location: string): WeatherResponse {\n  // Generate realistic mock data based on location and current time\n  const temperature = 25 + Math.floor(Math.random() * 10); // 25-35¬∞C\n  const conditions = [\"Sunny\", \"Partly Cloudy\", \"Cloudy\", \"Light Rain\"];\n  const condition = conditions[Math.floor(Math.random() * conditions.length)];\n  \n  return {\n    location: location || \"Your Location\",\n    temperature,\n    condition,\n    humidity: 60 + Math.floor(Math.random() * 20), // 60-80%\n    windSpeed: 8 + Math.floor(Math.random() * 8), // 8-16 km/h\n    description: getFarmingAdvice(condition, temperature, 65),\n    icon: getWeatherIcon(condition),\n  };\n}\n\nfunction getFarmingAdvice(condition: string, temperature: number, humidity: number): string {\n  const lowerCondition = condition.toLowerCase();\n  \n  if (lowerCondition.includes(\"rain\")) {\n    return \"Good weather for transplanting. Ensure proper drainage to prevent waterlogging.\";\n  }\n  \n  if (lowerCondition.includes(\"sunny\") && temperature > 30) {\n    return \"Hot weather - increase irrigation frequency and provide shade for sensitive crops.\";\n  }\n  \n  if (lowerCondition.includes(\"cloudy\") && humidity > 80) {\n    return \"High humidity may promote fungal diseases. Ensure good air circulation and avoid overhead watering.\";\n  }\n  \n  if (temperature < 15) {\n    return \"Cool weather - protect sensitive crops from cold and reduce watering frequency.\";\n  }\n  \n  return \"Good weather for most farming activities. Monitor soil moisture and adjust irrigation as needed.\";\n}\n\nfunction getWeatherIcon(condition: string): string {\n  const lowerCondition = condition.toLowerCase();\n  \n  if (lowerCondition.includes(\"sunny\") || lowerCondition.includes(\"clear\")) return \"01d\";\n  if (lowerCondition.includes(\"partly cloudy\")) return \"02d\";\n  if (lowerCondition.includes(\"cloudy\")) return \"03d\";\n  if (lowerCondition.includes(\"rain\")) return \"10d\";\n  if (lowerCondition.includes(\"storm\")) return \"11d\";\n  if (lowerCondition.includes(\"snow\")) return \"13d\";\n  if (lowerCondition.includes(\"mist\") || lowerCondition.includes(\"fog\")) return \"50d\";\n  \n  return \"01d\"; // Default to sunny\n}\n\nfunction getWeatherIconFromCondition(condition: string): string {\n  const lowerCondition = condition.toLowerCase();\n  \n  if (lowerCondition.includes(\"sunny\") || lowerCondition.includes(\"clear\")) return \"01d\";\n  if (lowerCondition.includes(\"partly cloudy\") || lowerCondition.includes(\"partly sunny\")) return \"02d\";\n  if (lowerCondition.includes(\"cloudy\") || lowerCondition.includes(\"overcast\")) return \"03d\";\n  if (lowerCondition.includes(\"rain\") || lowerCondition.includes(\"drizzle\") || lowerCondition.includes(\"shower\")) return \"10d\";\n  if (lowerCondition.includes(\"thunder\") || lowerCondition.includes(\"storm\")) return \"11d\";\n  if (lowerCondition.includes(\"snow\") || lowerCondition.includes(\"blizzard\")) return \"13d\";\n  if (lowerCondition.includes(\"mist\") || lowerCondition.includes(\"fog\") || lowerCondition.includes(\"haze\")) return \"50d\";\n  \n  return \"01d\"; // Default to sunny\n}\n\n// Cache management functions\nasync function getCachedWeather(location: string): Promise<WeatherCache | null> {\n  // TODO: Implement with actual database\n  // For now, return null to always fetch fresh data\n  return null;\n}\n\nasync function cacheWeatherData(location: string, data: WeatherResponse): Promise<void> {\n  // TODO: Implement with actual database\n  const cacheEntry = {\n    location,\n    weatherData: data,\n    expiresAt: new Date(Date.now() + 30 * 60 * 1000), // 30 minutes\n    createdAt: new Date(),\n  };\n  \n  console.log(\"Weather data cached for:\", location);\n}\n\nfunction isExpired(cached: WeatherCache): boolean {\n  return new Date() > new Date(cached.expiresAt);\n}\n\n// Weather alerts and recommendations\nexport function getWeatherAlerts(weather: WeatherResponse): Array<{\n  type: \"info\" | \"warning\" | \"danger\";\n  message: string;\n}> {\n  const alerts = [];\n  \n  if (weather.temperature > 35) {\n    alerts.push({\n      type: \"warning\" as const,\n      message: \"High temperature alert! Ensure adequate irrigation and provide shade for crops.\",\n    });\n  }\n  \n  if (weather.humidity > 85) {\n    alerts.push({\n      type: \"warning\" as const,\n      message: \"High humidity may increase disease risk. Monitor crops for fungal infections.\",\n    });\n  }\n  \n  if (weather.windSpeed > 25) {\n    alerts.push({\n      type: \"warning\" as const,\n      message: \"Strong winds detected. Secure loose structures and protect tall crops.\",\n    });\n  }\n  \n  if (weather.condition.toLowerCase().includes(\"rain\")) {\n    alerts.push({\n      type: \"info\" as const,\n      message: \"Rain expected. Good for water-stressed crops but ensure proper drainage.\",\n    });\n  }\n  \n  return alerts;\n}\n","size_bytes":6792},"client/src/components/bottom-navigation.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Link, useLocation } from \"wouter\";\nimport { Home, Camera, BarChart3, Gavel, User, MessageCircle, Sun } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigationItems = [\n  {\n    icon: Home,\n    href: \"/dashboard\",\n    labelKey: \"nav.home\",\n    testId: \"nav-home\",\n  },\n  {\n    icon: Camera,\n    href: \"/crop-detect\",\n    labelKey: \"nav.detect\",\n    testId: \"nav-detect\",\n  },\n  {\n    icon: BarChart3,\n    href: \"/mandi-prices\",\n    labelKey: \"nav.mandi\",\n    testId: \"nav-mandi\",\n  },\n  {\n    icon: Gavel,\n    href: \"/farmer-marketplace\",\n    labelKey: \"nav.marketplace\",\n    testId: \"nav-marketplace\",\n  },\n  {\n    icon: Sun,\n    href: \"/solar-income\",\n    labelKey: \"nav.solar\",\n    testId: \"nav-solar\",\n  },\n  {\n    icon: User,\n    href: \"/profile\",\n    labelKey: \"nav.profile\",\n    testId: \"nav-profile\",\n  },\n];\n\nconst aiAssistantItem = {\n  icon: MessageCircle,\n  href: \"/ai-assistant\",\n  labelKey: \"nav.ai\",\n  testId: \"nav-ai\",\n};\n\nexport default function BottomNavigation() {\n  const { t } = useTranslation();\n  const [location] = useLocation();\n\n  return (\n    <nav \n      className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-border z-50 shadow-lg\" \n      data-testid=\"bottom-navigation\"\n    >\n      <div className=\"relative\">\n        {/* Main Navigation */}\n        <div className=\"flex items-center justify-around py-2 px-2 max-w-md mx-auto\">\n          {navigationItems.map((item) => {\n            const isActive = location === item.href;\n            \n            return (\n              <Link key={item.href} href={item.href}>\n                <button\n                  className={cn(\n                    \"flex flex-col items-center p-2 rounded-lg transition-all duration-200 min-w-[60px]\",\n                    isActive \n                      ? \"text-primary bg-primary/10\" \n                      : \"text-muted-foreground hover:text-primary hover:bg-primary/5\"\n                  )}\n                  data-testid={item.testId}\n                >\n                  {/* Active indicator */}\n                  {isActive && (\n                    <div className=\"absolute -top-1 left-1/2 transform -translate-x-1/2 w-6 h-1 bg-primary rounded-full\" />\n                  )}\n                  \n                  {/* Icon */}\n                  <item.icon className=\"h-5 w-5 mb-1\" />\n                  \n                  {/* Label */}\n                  <span \n                    className={cn(\n                      \"text-xs font-medium\",\n                      isActive ? \"font-semibold\" : \"\"\n                    )}\n                    data-testid={`${item.testId}-label`}\n                  >\n                    {t(item.labelKey)}\n                  </span>\n                </button>\n              </Link>\n            );\n          })}\n        </div>\n\n        {/* AI Assistant Floating Button */}\n        <div className=\"absolute -top-6 right-4\">\n          <Link href={aiAssistantItem.href}>\n            <button\n              className={cn(\n                \"relative p-3 rounded-full shadow-lg transition-all duration-200\",\n                location === aiAssistantItem.href\n                  ? \"bg-primary text-white\"\n                  : \"bg-green-500 text-white hover:bg-green-600\"\n              )}\n              data-testid={aiAssistantItem.testId}\n            >\n              <aiAssistantItem.icon className=\"h-5 w-5\" />\n              \n              {/* Pulse effect for non-active state */}\n              {location !== aiAssistantItem.href && (\n                <div className=\"absolute inset-0 rounded-full bg-white/20 animate-pulse\" />\n              )}\n            </button>\n          </Link>\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":3725},"client/src/components/camera-capture.tsx":{"content":"import { useRef, useState, useCallback } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { Camera, Zap, RotateCcw, Upload, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CameraCaptureProps {\n  onCapture: (file: File, imageUrl: string) => void;\n}\n\nexport default function CameraCapture({ onCapture }: CameraCaptureProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const [isStreamActive, setIsStreamActive] = useState(false);\n  const [isFlashOn, setIsFlashOn] = useState(false);\n  const [facingMode, setFacingMode] = useState<'user' | 'environment'>('environment');\n  const [recentCaptures, setRecentCaptures] = useState<string[]>([]);\n\n  const startCamera = useCallback(async () => {\n    try {\n      // Check if browser supports getUserMedia\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        throw new Error(\"Camera not supported in this browser\");\n      }\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: facingMode,\n          width: { ideal: 1280 },\n          height: { ideal: 720 }\n        }\n      });\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        \n        // Wait for video to be ready\n        videoRef.current.onloadedmetadata = () => {\n          videoRef.current?.play().then(() => {\n            setIsStreamActive(true);\n          }).catch((playError) => {\n            console.error('Error playing video:', playError);\n            toast({\n              title: \"Camera Error\",\n              description: \"Unable to start video playback.\",\n              variant: \"destructive\",\n            });\n          });\n        };\n      }\n    } catch (error) {\n      console.error('Error starting camera:', error);\n      let errorMessage = \"Unable to access camera. Please check permissions and try again.\";\n      \n      if (error instanceof Error) {\n        if (error.name === 'NotAllowedError') {\n          errorMessage = \"Camera access denied. Please allow camera permissions and try again.\";\n        } else if (error.name === 'NotFoundError') {\n          errorMessage = \"No camera found. Please ensure your device has a camera.\";\n        } else if (error.name === 'NotSupportedError') {\n          errorMessage = \"Camera not supported in this browser.\";\n        }\n      }\n      \n      toast({\n        title: \"Camera Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    }\n  }, [facingMode, toast]);\n\n  const stopCamera = useCallback(() => {\n    if (videoRef.current?.srcObject) {\n      const stream = videoRef.current.srcObject as MediaStream;\n      stream.getTracks().forEach(track => track.stop());\n      videoRef.current.srcObject = null;\n      setIsStreamActive(false);\n    }\n  }, []);\n\n  const captureImage = useCallback(async () => {\n    if (!videoRef.current || !canvasRef.current) return;\n\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    if (!context) return;\n\n    // Set canvas dimensions to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    // Capture frame\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Convert to blob\n    canvas.toBlob((blob) => {\n      if (blob) {\n        const file = new File([blob], `crop-${Date.now()}.jpg`, { type: 'image/jpeg' });\n        const imageUrl = URL.createObjectURL(blob);\n        \n        // Add to recent captures\n        setRecentCaptures(prev => [imageUrl, ...prev.slice(0, 5)]);\n        \n        // Camera shutter animation\n        const flashElement = document.createElement('div');\n        flashElement.style.cssText = `\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100vw;\n          height: 100vh;\n          background: white;\n          z-index: 9999;\n          pointer-events: none;\n          opacity: 0.8;\n          animation: cameraFlash 0.3s ease-out;\n        `;\n        \n        const style = document.createElement('style');\n        style.textContent = `\n          @keyframes cameraFlash {\n            0% { opacity: 0.8; }\n            50% { opacity: 1; }\n            100% { opacity: 0; }\n          }\n        `;\n        document.head.appendChild(style);\n        document.body.appendChild(flashElement);\n        \n        setTimeout(() => {\n          document.body.removeChild(flashElement);\n          document.head.removeChild(style);\n        }, 300);\n\n        onCapture(file, imageUrl);\n        stopCamera();\n      }\n    }, 'image/jpeg', 0.9);\n  }, [onCapture, stopCamera]);\n\n  const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type.startsWith('image/')) {\n        const imageUrl = URL.createObjectURL(file);\n        setRecentCaptures(prev => [imageUrl, ...prev.slice(0, 5)]);\n        onCapture(file, imageUrl);\n      } else {\n        toast({\n          title: \"Invalid File\",\n          description: \"Please select an image file.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  }, [onCapture, toast]);\n\n  const switchCamera = useCallback(() => {\n    const newFacingMode = facingMode === 'user' ? 'environment' : 'user';\n    setFacingMode(newFacingMode);\n    if (isStreamActive) {\n      stopCamera();\n      setTimeout(() => startCamera(), 100);\n    }\n  }, [facingMode, isStreamActive, stopCamera, startCamera]);\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"overflow-hidden\" data-testid=\"camera-capture\">\n        <CardContent className=\"p-0\">\n          <div className=\"relative aspect-square bg-muted\">\n            {isStreamActive ? (\n              <>\n                <video\n                  ref={videoRef}\n                  autoPlay\n                  playsInline\n                  muted\n                  className=\"w-full h-full object-cover\"\n                  data-testid=\"camera-video\"\n                />\n                \n                {/* Camera overlay guide */}\n                <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n                  <div className=\"w-64 h-64 border-4 border-white/50 rounded-2xl relative\">\n                    <div className=\"absolute top-0 left-0 w-8 h-8 border-t-4 border-l-4 border-primary rounded-tl-2xl\"></div>\n                    <div className=\"absolute top-0 right-0 w-8 h-8 border-t-4 border-r-4 border-primary rounded-tr-2xl\"></div>\n                    <div className=\"absolute bottom-0 left-0 w-8 h-8 border-b-4 border-l-4 border-primary rounded-bl-2xl\"></div>\n                    <div className=\"absolute bottom-0 right-0 w-8 h-8 border-b-4 border-r-4 border-primary rounded-br-2xl\"></div>\n                  </div>\n                </div>\n\n                {/* Instructions overlay */}\n                <div className=\"absolute top-4 left-4 right-4 bg-black/50 text-white p-3 rounded-lg backdrop-blur-sm\">\n                  <p className=\"text-sm text-center\" data-testid=\"camera-instructions\">\n                    {t(\"cropDetect.instructions\")}\n                  </p>\n                </div>\n              </>\n            ) : (\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <Camera className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground mb-4\" data-testid=\"camera-placeholder\">\n                    {t(\"cropDetect.cameraPlaceholder\")}\n                  </p>\n                  <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                    <Button onClick={startCamera} data-testid=\"button-start-camera\">\n                      <Camera className=\"mr-2 h-4 w-4\" />\n                      Start Camera\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => fileInputRef.current?.click()}\n                      data-testid=\"button-upload-image\"\n                    >\n                      <Upload className=\"mr-2 h-4 w-4\" />\n                      Upload Image\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Camera controls */}\n          {isStreamActive && (\n            <div className=\"p-6 flex items-center justify-center space-x-6\">\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => setIsFlashOn(!isFlashOn)}\n                className={isFlashOn ? \"bg-accent text-accent-foreground\" : \"\"}\n                data-testid=\"button-toggle-flash\"\n              >\n                <Zap className=\"h-5 w-5\" />\n              </Button>\n              \n              {/* Capture button with animation */}\n              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                <Button\n                  size=\"icon\"\n                  className=\"w-20 h-20 rounded-full bg-primary text-primary-foreground hover:bg-primary/90 shadow-lg\"\n                  onClick={captureImage}\n                  data-testid=\"button-capture\"\n                >\n                  <Camera className=\"h-8 w-8\" />\n                </Button>\n              </motion.div>\n              \n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={switchCamera}\n                data-testid=\"button-switch-camera\"\n              >\n                <RotateCcw className=\"h-5 w-5\" />\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={stopCamera}\n                data-testid=\"button-stop-camera\"\n              >\n                <X className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Recent captures */}\n      {recentCaptures.length > 0 && (\n        <div>\n          <h3 className=\"text-lg font-semibold mb-4\" data-testid=\"recent-captures-title\">\n            {t(\"cropDetect.recentCaptures\")}\n          </h3>\n          <div className=\"grid grid-cols-3 gap-3\">\n            {recentCaptures.map((imageUrl, index) => (\n              <motion.div\n                key={imageUrl}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.3, delay: index * 0.1 }}\n                className=\"aspect-square bg-muted rounded-lg overflow-hidden cursor-pointer hover:opacity-80 transition-opacity\"\n                data-testid={`recent-capture-${index}`}\n              >\n                <img\n                  src={imageUrl}\n                  alt={`Capture ${index + 1}`}\n                  className=\"w-full h-full object-cover\"\n                />\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Hidden file input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileUpload}\n        className=\"hidden\"\n        data-testid=\"file-input\"\n      />\n\n      {/* Hidden canvas for capturing */}\n      <canvas ref={canvasRef} className=\"hidden\" />\n    </div>\n  );\n}\n","size_bytes":11717},"client/src/components/language-toggle.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { Globe } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst languages = [\n  { code: \"en\", name: \"English\", flag: \"üá∫üá∏\" },\n  { code: \"hi\", name: \"‡§π‡§ø‡§Ç‡§¶‡•Ä\", flag: \"üáÆüá≥\" },\n];\n\nexport default function LanguageToggle() {\n  const { i18n } = useTranslation();\n  const { user, updateUser } = useAuth();\n\n  const updateLanguageMutation = useMutation({\n    mutationFn: async (language: string) => {\n      if (user) {\n        const response = await apiRequest(\"PUT\", \"/api/user/profile\", { language });\n        return response.json();\n      }\n      return { user: { language } };\n    },\n    onSuccess: (data) => {\n      if (user) {\n        updateUser({ language: data.user.language });\n      }\n    },\n  });\n\n  const handleLanguageChange = (languageCode: string) => {\n    i18n.changeLanguage(languageCode);\n    updateLanguageMutation.mutate(languageCode);\n  };\n\n  const currentLanguage = languages.find(lang => lang.code === i18n.language) || languages[0];\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild data-testid=\"language-toggle\">\n        <Button size=\"lg\" className=\"font-bold text-lg py-4 px-6 bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 text-white shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300\">\n          <motion.div\n            className=\"flex items-center space-x-2\"\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <Globe className=\"h-4 w-4\" />\n            <span className=\"hidden sm:inline\" data-testid=\"current-language\">\n              {currentLanguage.code.toUpperCase()}\n            </span>\n            <span className=\"text-lg\" data-testid=\"current-flag\">\n              {currentLanguage.flag}\n            </span>\n          </motion.div>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-48\" data-testid=\"language-menu\">\n        {languages.map((language) => (\n          <DropdownMenuItem\n            key={language.code}\n            onClick={() => handleLanguageChange(language.code)}\n            className={`flex items-center space-x-3 cursor-pointer ${\n              language.code === i18n.language ? \"bg-accent\" : \"\"\n            }`}\n            data-testid={`language-option-${language.code}`}\n          >\n            <span className=\"text-lg\">{language.flag}</span>\n            <span className=\"font-medium\">{language.name}</span>\n            {language.code === i18n.language && (\n              <motion.div\n                className=\"ml-auto w-2 h-2 bg-primary rounded-full\"\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ duration: 0.2 }}\n              />\n            )}\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":3252},"client/src/components/weather-widget.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { CloudSun, Eye, Wind, Droplets, Thermometer, MapPin, Loader2 } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface WeatherData {\n  location: string;\n  temperature: number;\n  condition: string;\n  humidity: number;\n  windSpeed: number;\n  description: string;\n  icon: string;\n}\n\nexport default function WeatherWidget() {\n  const { t } = useTranslation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n  const [currentLocation, setCurrentLocation] = useState<string>(\n    user?.location || \"Mumbai, Maharashtra\" // Default location for weather\n  );\n\n  const { data: weather, isLoading, error } = useQuery<WeatherData>({\n    queryKey: [\"/api/weather/current\", currentLocation],\n    enabled: !!currentLocation,\n    refetchInterval: 5 * 60 * 1000, // Refetch every 5 minutes\n  });\n\n  const getCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      toast({\n        title: \"Location Error\",\n        description: \"Geolocation is not supported by this browser.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsGettingLocation(true);\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        try {\n          const { latitude, longitude } = position.coords;\n          // Use reverse geocoding to get location name\n          const locationName = `${latitude},${longitude}`;\n          setCurrentLocation(locationName);\n          setIsGettingLocation(false);\n          toast({\n            title: \"Location Updated\",\n            description: \"Weather data updated for your current location.\",\n          });\n        } catch (error) {\n          setIsGettingLocation(false);\n          toast({\n            title: \"Location Error\",\n            description: \"Failed to get your location. Please try again.\",\n            variant: \"destructive\",\n          });\n        }\n      },\n      (error) => {\n        setIsGettingLocation(false);\n        let errorMessage = \"Failed to get your location.\";\n        \n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = \"Location access denied. Please allow location access and try again.\";\n            break;\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = \"Location information is unavailable.\";\n            break;\n          case error.TIMEOUT:\n            errorMessage = \"Location request timed out.\";\n            break;\n        }\n        \n        toast({\n          title: \"Location Error\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 300000, // Cache for 5 minutes\n      }\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600\" data-testid=\"weather-loading\">\n        <CardContent className=\"p-6 text-white\">\n          <div className=\"animate-pulse\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"h-4 bg-blue-400 rounded w-32 mb-2\"></div>\n                <div className=\"h-3 bg-blue-400 rounded w-24\"></div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"h-8 bg-blue-400 rounded w-16 mb-1\"></div>\n                <div className=\"h-3 bg-blue-400 rounded w-12\"></div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error || !weather) {\n    return (\n      <Card className=\"bg-gradient-to-r from-gray-500 to-gray-600\" data-testid=\"weather-error\">\n        <CardContent className=\"p-6 text-white\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-1\" data-testid=\"weather-error-title\">\n                Weather Unavailable\n              </h3>\n              <p className=\"text-gray-200 text-sm\">\n                {currentLocation || \"Location not set\"}\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <CloudSun className=\"h-8 w-8 text-gray-300\" />\n            </div>\n          </div>\n          <Button \n            variant=\"secondary\" \n            size=\"sm\"\n            onClick={getCurrentLocation}\n            disabled={isGettingLocation}\n            className=\"w-full\"\n            data-testid=\"button-get-location\"\n          >\n            {isGettingLocation ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Getting Location...\n              </>\n            ) : (\n              <>\n                <MapPin className=\"mr-2 h-4 w-4\" />\n                Use Current Location\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getWeatherIcon = (condition: string) => {\n    switch (condition.toLowerCase()) {\n      case \"sunny\":\n      case \"clear\":\n        return \"‚òÄÔ∏è\";\n      case \"partly cloudy\":\n        return \"‚õÖ\";\n      case \"cloudy\":\n      case \"overcast\":\n        return \"‚òÅÔ∏è\";\n      case \"rainy\":\n      case \"rain\":\n        return \"üåßÔ∏è\";\n      case \"stormy\":\n      case \"thunderstorm\":\n        return \"‚õàÔ∏è\";\n      case \"snowy\":\n      case \"snow\":\n        return \"‚ùÑÔ∏è\";\n      case \"foggy\":\n      case \"mist\":\n        return \"üå´Ô∏è\";\n      default:\n        return \"üå§Ô∏è\";\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6 }}\n    >\n      <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\" data-testid=\"weather-widget\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-1\" data-testid=\"weather-title\">\n                {t(\"weather.current\")}\n              </h3>\n              <p className=\"text-blue-100 text-sm\" data-testid=\"weather-location\">\n                {weather.location}\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-3xl font-bold mb-1\" data-testid=\"weather-temperature\">\n                {weather.temperature}¬∞C\n              </div>\n              <div className=\"flex items-center text-blue-100\" data-testid=\"weather-condition\">\n                <span className=\"text-lg mr-2\">{getWeatherIcon(weather.condition)}</span>\n                <span className=\"text-sm\">{weather.condition}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Weather details */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"flex items-center text-blue-100\" data-testid=\"weather-humidity\">\n              <Droplets className=\"h-4 w-4 mr-2\" />\n              <span className=\"text-sm\">{weather.humidity}% Humidity</span>\n            </div>\n            <div className=\"flex items-center text-blue-100\" data-testid=\"weather-wind\">\n              <Wind className=\"h-4 w-4 mr-2\" />\n              <span className=\"text-sm\">{weather.windSpeed} km/h</span>\n            </div>\n          </div>\n\n          {/* Weather advice */}\n          {weather.description && (\n            <div className=\"mt-4 p-3 bg-white/10 rounded-lg backdrop-blur-sm\" data-testid=\"weather-advice\">\n              <p className=\"text-sm text-blue-50\">\n                <span className=\"font-medium\">Farming Tip:</span> {weather.description}\n              </p>\n            </div>\n          )}\n\n          {/* Location and update controls */}\n          <div className=\"mt-4 flex items-center justify-between\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={getCurrentLocation}\n              disabled={isGettingLocation}\n              className=\"text-blue-100 hover:text-white hover:bg-white/10\"\n              data-testid=\"button-update-location\"\n            >\n              {isGettingLocation ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <MapPin className=\"h-4 w-4\" />\n              )}\n            </Button>\n            <div className=\"text-xs text-blue-200\" data-testid=\"weather-updated\">\n              Updated {new Date().toLocaleTimeString()}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":8821},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  phone: string;\n  login: (user: User) => void;\n  logout: () => void;\n  setPhone: (phone: string) => void;\n  updateUser: (updates: Partial<User>) => void;\n}\n\nexport const useAuth = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      isAuthenticated: false,\n      phone: \"\",\n      login: (user) => set({ user, isAuthenticated: true }),\n      logout: () => set({ user: null, isAuthenticated: false, phone: \"\" }),\n      setPhone: (phone) => set({ phone }),\n      updateUser: (updates) => {\n        const currentUser = get().user;\n        if (currentUser) {\n          set({ user: { ...currentUser, ...updates } });\n        }\n      },\n    }),\n    {\n      name: \"farm-connect-auth\",\n    }\n  )\n);\n","size_bytes":911},"client/src/lib/i18n.ts":{"content":"import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nconst resources = {\n  en: {\n    translation: {\n      // Navigation\n      login: \"Login\",\n      // Hero Section\n      hero: {\n        title: \"Smart Farming\",\n        subtitle: \"Detect crop diseases, check weather, get market prices, and connect with fellow farmers - all in one place.\",\n        getStarted: \"Get Started\",\n        watchDemo: \"Watch Demo\",\n      },\n      // Features\n      features: {\n        cropDetection: \"Crop Detection\",\n        cropDetectionDesc: \"AI-powered disease identification\",\n        weather: \"Weather\",\n        weatherDesc: \"Real-time weather updates\",\n        mandiPrices: \"Mandi Prices\",\n        mandiPricesDesc: \"Live market rates\",\n        community: \"Community\",\n        communityDesc: \"Connect with farmers\",\n      },\n      // Authentication\n      auth: {\n        title: \"Welcome to FarmConnect\",\n        subtitle: \"Enter your phone number to get started\",\n        phoneLabel: \"Phone Number\",\n        sendOTP: \"Send OTP\",\n        otpSent: \"We've sent an OTP to\",\n        otpLabel: \"Enter OTP\",\n        verify: \"Verify & Continue\",\n        resendOTP: \"Resend OTP\",\n      },\n      // Onboarding\n      onboarding: {\n        title: \"Complete Your Profile\",\n        subtitle: \"Help us personalize your farming experience\",\n        name: \"Full Name\",\n        age: \"Age\",\n        location: \"Farm Location\",\n        farmSize: \"Farm Size (acres)\",\n        crops: \"Primary Crops\",\n        language: \"Preferred Language\",\n        complete: \"Complete Setup\",\n      },\n      // Dashboard\n      dashboard: {\n        welcome: \"Welcome\",\n        quickActions: \"Quick Actions\",\n        detectDisease: \"Detect Disease\",\n        weather: \"Weather\",\n        mandiPrices: \"Mandi Prices\",\n        community: \"Community\",\n        recentReports: \"Recent Disease Reports\",\n      },\n      // Weather\n      weather: {\n        current: \"Current Weather\",\n      },\n      // Navigation\n      nav: {\n        home: \"Home\",\n        detect: \"Detect\",\n        mandi: \"Mandi\",\n        marketplace: \"Marketplace\",\n        solar: \"Solar Income\",\n        profile: \"Profile\",\n        ai: \"AI Assistant\",\n      },\n      // Crop Detection\n      cropDetect: {\n        title: \"Crop Disease Detection\",\n        cameraPlaceholder: \"Camera feed will appear here\",\n        instructions: \"Position the diseased leaf within the frame and capture\",\n        recentCaptures: \"Recent Captures\",\n      },\n      // Detection Results\n      detection: {\n        analyzing: \"Analyzing Image...\",\n        symptoms: \"Symptoms\",\n        treatment: \"Recommended Treatment\",\n        confidence: \"Confidence\",\n        saveReport: \"Save Report\",\n        share: \"Share\",\n      },\n      // Mandi Prices\n      mandi: {\n        title: \"Mandi Prices\",\n        selectLocation: \"Select Market\",\n        selectDate: \"Date\",\n        priceAlerts: \"Price Alerts\",\n        alertDescription: \"Set price alerts for your crops and get notified when prices reach your target.\",\n        setupAlerts: \"Setup Alerts\",\n      },\n      // Community\n      community: {\n        title: \"Community\",\n        totalFarmers: \"Farmers\",\n        activePosts: \"Posts Today\",\n        helpRate: \"Help Rate\",\n        share: \"Share\",\n      },\n      // Marketplace\n      marketplace: {\n        title: \"Marketplace\",\n        all: \"All\",\n        seeds: \"Seeds\",\n        fertilizers: \"Fertilizers\",\n        tools: \"Tools\",\n        produce: \"Produce\",\n        contact: \"Contact\",\n      },\n      // Assistant\n      assistant: {\n        title: \"AI Farm Assistant\",\n        name: \"FarmBot Assistant\",\n        status: \"Online - Ready to help\",\n        quickHelp: \"Quick Help\",\n        weatherAdvice: \"Weather Advice\",\n        cropCare: \"Crop Care\",\n        fertilizer: \"Fertilizer Tips\",\n        pestControl: \"Pest Control\",\n      },\n    },\n  },\n  hi: {\n    translation: {\n      // Navigation\n      login: \"‡§≤‡•â‡§ó‡§ø‡§®\",\n      // Hero Section\n      hero: {\n        title: \"‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§´‡§æ‡§∞‡•ç‡§Æ‡§ø‡§Ç‡§ó\",\n        subtitle: \"‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§§‡§æ ‡§≤‡§ó‡§æ‡§è‡§Ç, ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡•á‡§Ç, ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç ‡§™‡§æ‡§è‡§Ç, ‡§î‡§∞ ‡§∏‡§æ‡§•‡•Ä ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç - ‡§∏‡§¨ ‡§è‡§ï ‡§ú‡§ó‡§π‡•§\",\n        getStarted: \"‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç\",\n        watchDemo: \"‡§°‡•á‡§Æ‡•ã ‡§¶‡•á‡§ñ‡•á‡§Ç\",\n      },\n      // Features\n      features: {\n        cropDetection: \"‡§´‡§∏‡§≤ ‡§∞‡•ã‡§ó ‡§™‡§π‡§ö‡§æ‡§®\",\n        cropDetectionDesc: \"AI ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§®\",\n        weather: \"‡§Æ‡•å‡§∏‡§Æ\",\n        weatherDesc: \"‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§™‡§°‡•á‡§ü\",\n        mandiPrices: \"‡§Æ‡§Ç‡§°‡•Ä ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç\",\n        mandiPricesDesc: \"‡§≤‡§æ‡§á‡§µ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§¶‡§∞‡•á‡§Ç\",\n        community: \"‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø\",\n        communityDesc: \"‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç\",\n      },\n      // Authentication\n      auth: {\n        title: \"FarmConnect ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à\",\n        subtitle: \"‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡§æ ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç\",\n        phoneLabel: \"‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞\",\n        sendOTP: \"OTP ‡§≠‡•á‡§ú‡•á‡§Ç\",\n        otpSent: \"‡§π‡§Æ‡§®‡•á OTP ‡§≠‡•á‡§ú‡§æ ‡§π‡•à\",\n        otpLabel: \"OTP ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç\",\n        verify: \"‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç\",\n        resendOTP: \"OTP ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§≠‡•á‡§ú‡•á‡§Ç\",\n      },\n      // Onboarding\n      onboarding: {\n        title: \"‡§Ö‡§™‡§®‡•Ä ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§™‡•Ç‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç\",\n        subtitle: \"‡§Ö‡§™‡§®‡•á ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡•ã ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•á‡§Ç\",\n        name: \"‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ\",\n        age: \"‡§â‡§Æ‡•ç‡§∞\",\n        location: \"‡§ñ‡•á‡§§ ‡§ï‡§æ ‡§∏‡•ç‡§•‡§æ‡§®\",\n        farmSize: \"‡§ñ‡•á‡§§ ‡§ï‡§æ ‡§Ü‡§ï‡§æ‡§∞ (‡§è‡§ï‡§°‡§º)\",\n        crops: \"‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§´‡§∏‡§≤‡•á‡§Ç\",\n        language: \"‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡§æ‡§∑‡§æ\",\n        complete: \"‡§∏‡•á‡§ü‡§Ö‡§™ ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡•á‡§Ç\",\n      },\n      // Dashboard\n      dashboard: {\n        welcome: \"‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à\",\n        quickActions: \"‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø\",\n        detectDisease: \"‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§®\",\n        weather: \"‡§Æ‡•å‡§∏‡§Æ\",\n        mandiPrices: \"‡§Æ‡§Ç‡§°‡•Ä ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç\",\n        community: \"‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø\",\n        recentReports: \"‡§π‡§æ‡§≤ ‡§ï‡•Ä ‡§∞‡•ã‡§ó ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü\",\n      },\n      // Weather\n      weather: {\n        current: \"‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•å‡§∏‡§Æ\",\n      },\n      // Navigation\n      nav: {\n        home: \"‡§π‡•ã‡§Æ\",\n        detect: \"‡§™‡§π‡§ö‡§æ‡§®\",\n        mandi: \"‡§Æ‡§Ç‡§°‡•Ä\",\n        marketplace: \"‡§¨‡§æ‡§ú‡§æ‡§∞\",\n        solar: \"‡§∏‡•ã‡§≤‡§∞ ‡§Ü‡§Ø\",\n        profile: \"‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤\",\n        ai: \"AI ‡§∏‡§π‡§æ‡§Ø‡§ï\",\n      },\n      // Crop Detection\n      cropDetect: {\n        title: \"‡§´‡§∏‡§≤ ‡§∞‡•ã‡§ó ‡§™‡§π‡§ö‡§æ‡§®\",\n        cameraPlaceholder: \"‡§ï‡•à‡§Æ‡§∞‡§æ ‡§´‡•Ä‡§° ‡§Ø‡§π‡§æ‡§Å ‡§¶‡§ø‡§ñ‡§æ‡§à ‡§¶‡•á‡§ó‡§æ\",\n        instructions: \"‡§∞‡•ã‡§ó‡§ó‡•ç‡§∞‡§∏‡•ç‡§§ ‡§™‡§§‡•ç‡§§‡•Ä ‡§ï‡•ã ‡§´‡•ç‡§∞‡•á‡§Æ ‡§ï‡•á ‡§≠‡•Ä‡§§‡§∞ ‡§∞‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§ï‡•à‡§™‡•ç‡§ö‡§∞ ‡§ï‡§∞‡•á‡§Ç\",\n        recentCaptures: \"‡§π‡§æ‡§≤ ‡§ï‡•Ä ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞‡•á‡§Ç\",\n      },\n      // Detection Results\n      detection: {\n        analyzing: \"‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...\",\n        symptoms: \"‡§≤‡§ï‡•ç‡§∑‡§£\",\n        treatment: \"‡§∏‡•Å‡§ù‡§æ‡§µ‡§ø‡§§ ‡§â‡§™‡§ö‡§æ‡§∞\",\n        confidence: \"‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏\",\n        saveReport: \"‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç\",\n        share: \"‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç\",\n      },\n      // Mandi Prices\n      mandi: {\n        title: \"‡§Æ‡§Ç‡§°‡•Ä ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç\",\n        selectLocation: \"‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç\",\n        selectDate: \"‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï\",\n        priceAlerts: \"‡§ï‡•Ä‡§Æ‡§§ ‡§Ö‡§≤‡§∞‡•ç‡§ü\",\n        alertDescription: \"‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•Ä‡§Æ‡§§ ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ú‡§¨ ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§§‡§ï ‡§™‡§π‡•Å‡§Ç‡§ö‡•á‡§Ç ‡§§‡•ã ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§™‡§æ‡§è‡§Ç‡•§\",\n        setupAlerts: \"‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç\",\n      },\n      // Community\n      community: {\n        title: \"‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø\",\n        totalFarmers: \"‡§ï‡§ø‡§∏‡§æ‡§®\",\n        activePosts: \"‡§Ü‡§ú ‡§ï‡•á ‡§™‡•ã‡§∏‡•ç‡§ü\",\n        helpRate: \"‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§¶‡§∞\",\n        share: \"‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç\",\n      },\n      // Marketplace\n      marketplace: {\n        title: \"‡§¨‡§æ‡§ú‡§æ‡§∞\",\n        all: \"‡§∏‡§≠‡•Ä\",\n        seeds: \"‡§¨‡•Ä‡§ú\",\n        fertilizers: \"‡§â‡§∞‡•ç‡§µ‡§∞‡§ï\",\n        tools: \"‡§â‡§™‡§ï‡§∞‡§£\",\n        produce: \"‡§â‡§§‡•ç‡§™‡§æ‡§¶\",\n        contact: \"‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç\",\n      },\n      // Assistant\n      assistant: {\n        title: \"AI ‡§ï‡•É‡§∑‡§ø ‡§∏‡§π‡§æ‡§Ø‡§ï\",\n        name: \"FarmBot ‡§∏‡§π‡§æ‡§Ø‡§ï\",\n        status: \"‡§ë‡§®‡§≤‡§æ‡§á‡§® - ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞\",\n        quickHelp: \"‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ\",\n        weatherAdvice: \"‡§Æ‡•å‡§∏‡§Æ ‡§∏‡§≤‡§æ‡§π\",\n        cropCare: \"‡§´‡§∏‡§≤ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤\",\n        fertilizer: \"‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§∏‡•Å‡§ù‡§æ‡§µ\",\n        pestControl: \"‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£\",\n      },\n    },\n  },\n};\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: \"en\",\n  fallbackLng: \"en\",\n  interpolation: {\n    escapeValue: false,\n  },\n});\n\nexport default i18n;\n","size_bytes":9754},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/supabase.ts":{"content":"import { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || \"\";\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || \"\";\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.warn(\"Supabase credentials missing. Some features may not work properly.\");\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Storage bucket for disease detection images\nexport const DISEASE_IMAGES_BUCKET = \"disease-images\";\n\nexport async function uploadDiseaseImage(file: File, userId: string): Promise<string | null> {\n  try {\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${userId}/${Date.now()}.${fileExt}`;\n    \n    const { error } = await supabase.storage\n      .from(DISEASE_IMAGES_BUCKET)\n      .upload(fileName, file);\n\n    if (error) {\n      console.error(\"Error uploading image:\", error);\n      return null;\n    }\n\n    return fileName;\n  } catch (error) {\n    console.error(\"Error uploading image:\", error);\n    return null;\n  }\n}\n\nexport async function getImageUrl(path: string): Promise<string | null> {\n  try {\n    const { data } = supabase.storage\n      .from(DISEASE_IMAGES_BUCKET)\n      .getPublicUrl(path);\n\n    return data.publicUrl;\n  } catch (error) {\n    console.error(\"Error getting image URL:\", error);\n    return null;\n  }\n}\n","size_bytes":1336},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { Smartphone, Loader2, User, CheckCircle, Leaf, Sparkles, Zap, Star, ArrowRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from \"@/components/ui/input-otp\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/lib/auth\";\n\ntype AuthStep = \"combined\";\n\nconst crops = [\n  { id: \"rice\", name: \"Rice\" },\n  { id: \"wheat\", name: \"Wheat\" },\n  { id: \"cotton\", name: \"Cotton\" },\n  { id: \"sugarcane\", name: \"Sugarcane\" },\n  { id: \"maize\", name: \"Maize\" },\n  { id: \"others\", name: \"Others\" },\n];\n\nexport default function Auth() {\n  const { t, i18n } = useTranslation();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { login, setPhone, updateUser } = useAuth();\n  \n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [otp, setOtp] = useState(\"\");\n  const [otpSent, setOtpSent] = useState(false);\n  const [otpVerified, setOtpVerified] = useState(false);\n  \n  // Profile form data\n  const [formData, setFormData] = useState({\n    name: \"\",\n    age: \"\",\n    location: \"\",\n    farmSize: \"\",\n    primaryCrops: [] as string[],\n    language: \"en\",\n  });\n\n  const sendOTPMutation = useMutation({\n    mutationFn: async (phone: string) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/send-otp\", { phone });\n      return response.json();\n    },\n    onSuccess: () => {\n      setPhone(phoneNumber);\n      setOtpSent(true);\n      toast({\n        title: \"OTP Sent\",\n        description: t(\"auth.otpSent\") + \" \" + phoneNumber,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyOTPMutation = useMutation({\n    mutationFn: async ({ phone, otp }: { phone: string; otp: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/verify-otp\", { phone, otp });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      login(data.user);\n      setOtpVerified(true);\n      if (data.user.isOnboarded) {\n        updateUser(data.user);\n        i18n.changeLanguage(data.user.language);\n        setLocation(\"/dashboard\");\n      } else {\n        toast({\n          title: \"Phone Verified!\",\n          description: \"Please complete your profile to continue.\",\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Invalid OTP\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async (userData: typeof formData) => {\n      const response = await apiRequest(\"PUT\", \"/api/user/profile\", userData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      updateUser(data.user);\n      i18n.changeLanguage(data.user.language);\n      setLocation(\"/dashboard\");\n      toast({\n        title: \"Welcome to FarmConnect!\",\n        description: \"Your profile has been successfully completed!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendOTP = () => {\n    if (!phoneNumber.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid phone number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    sendOTPMutation.mutate(phoneNumber);\n  };\n\n  const handleVerifyOTP = () => {\n    if (otp.length !== 4) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter the 4-digit OTP\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    verifyOTPMutation.mutate({ phone: phoneNumber, otp });\n  };\n\n  const handleCropToggle = (cropId: string) => {\n    setFormData(prev => ({\n      ...prev,\n      primaryCrops: prev.primaryCrops.includes(cropId)\n        ? prev.primaryCrops.filter(id => id !== cropId)\n        : [...prev.primaryCrops, cropId]\n    }));\n  };\n\n  const handleCompleteOnboarding = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!otpVerified) {\n      toast({\n        title: \"Error\",\n        description: \"Please verify your phone number first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!formData.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter your name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateUserMutation.mutate(formData);\n  };\n\n  // Create floating particles\n  const particles = Array.from({ length: 8 }, (_, i) => ({\n    id: i,\n    x: Math.random() * 100,\n    y: Math.random() * 100,\n    delay: Math.random() * 3,\n    duration: 4 + Math.random() * 3,\n  }));\n\n  return (\n    <section className=\"min-h-screen bg-background flex items-center justify-center p-6 relative overflow-hidden\">\n      {/* Floating Particles Background */}\n      <div className=\"floating-particles\">\n        {particles.map((particle) => (\n          <motion.div\n            key={particle.id}\n            className=\"particle\"\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n            }}\n            animate={{\n              y: [0, -20, 0],\n              x: [0, 10, -10, 0],\n              opacity: [0.2, 0.8, 0.2],\n            }}\n            transition={{\n              duration: particle.duration,\n              delay: particle.delay,\n              repeat: Infinity,\n              ease: \"easeInOut\",\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Background Effects */}\n      <motion.div\n        className=\"absolute top-20 left-20 w-96 h-96 bg-primary/10 rounded-full blur-3xl animate-morphing\"\n        initial={{ scale: 0, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        transition={{ duration: 2, delay: 0.5 }}\n      />\n      <motion.div\n        className=\"absolute bottom-20 right-20 w-64 h-64 bg-accent/10 rounded-full blur-3xl animate-morphing\"\n        initial={{ scale: 0, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        transition={{ duration: 2, delay: 1 }}\n      />\n\n      <motion.div\n        className=\"w-full max-w-3xl relative z-10\"\n        initial={{ opacity: 0, y: 50, scale: 0.9 }}\n        animate={{ opacity: 1, y: 0, scale: 1 }}\n        transition={{ duration: 0.8, type: \"spring\", stiffness: 100 }}\n      >\n        <div className=\"premium-card rounded-3xl p-8 hover-glow relative overflow-hidden\" data-testid=\"auth-card\">\n          {/* Card Background Gradient */}\n          <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-accent/5\" />\n          \n          <div className=\"relative z-10\">\n            <div className=\"text-center mb-10\">\n              <motion.div \n                className=\"w-32 h-32 bg-gradient-to-br from-primary to-accent rounded-3xl flex items-center justify-center mx-auto mb-8 premium-glow shadow-2xl\"\n                initial={{ scale: 0, rotate: -180 }}\n                animate={{ \n                  scale: 1,\n                  rotate: 0,\n                }}\n                transition={{ \n                  duration: 1,\n                  type: \"spring\",\n                  stiffness: 100\n                }}\n                whileHover={{ scale: 1.1, rotate: 5 }}\n              >\n                <Leaf className=\"text-black text-5xl\" />\n              </motion.div>\n              \n              <motion.h2 \n                className=\"text-5xl lg:text-6xl font-bold gradient-text-primary mb-4 text-shadow-glow\" \n                data-testid=\"auth-title\"\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: 0.3 }}\n              >\n                Join FarmConnect\n              </motion.h2>\n              \n              <motion.p \n                className=\"text-xl text-muted-foreground mb-2\" \n                data-testid=\"auth-subtitle\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: 0.5 }}\n              >\n                Complete your farming journey in one seamless form\n              </motion.p>\n              \n              <motion.div\n                className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground/70\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ delay: 0.7 }}\n              >\n                <Star className=\"w-4 h-4 text-primary animate-twinkle\" />\n                <span>AI-Powered Smart Farming Revolution</span>\n                <Star className=\"w-4 h-4 text-accent animate-twinkle\" />\n              </motion.div>\n            </div>\n\n            <motion.form \n              onSubmit={handleCompleteOnboarding} \n              className=\"space-y-8\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.6 }}\n            >\n              {/* Phone Number Section */}\n              <motion.div \n                className=\"premium-card rounded-2xl p-6 space-y-6 hover-glow group relative overflow-hidden\"\n                whileHover={{ scale: 1.02, y: -4 }}\n                transition={{ type: \"spring\", stiffness: 200 }}\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-br from-emerald-500/10 to-teal-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                \n                <div className=\"relative z-10\">\n                  <motion.div \n                    className=\"flex items-center gap-3 mb-6\"\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.1 }}\n                  >\n                    <motion.div\n                      className=\"w-12 h-12 bg-primary/20 rounded-xl flex items-center justify-center\"\n                      whileHover={{ scale: 1.1, rotate: 10 }}\n                    >\n                      <Smartphone className=\"h-6 w-6 text-primary\" />\n                    </motion.div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-xl font-bold text-foreground\">Phone Verification</h3>\n                      <p className=\"text-sm text-muted-foreground\">Secure your farming account</p>\n                    </div>\n                    {otpVerified && (\n                      <motion.div\n                        initial={{ scale: 0, rotate: -180 }}\n                        animate={{ scale: 1, rotate: 0 }}\n                        transition={{ type: \"spring\", stiffness: 200 }}\n                      >\n                        <CheckCircle className=\"h-8 w-8 text-emerald-400\" />\n                      </motion.div>\n                    )}\n                  </motion.div>\n                \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <Label htmlFor=\"phone\" className=\"block text-sm font-medium text-foreground mb-3\">\n                        {t(\"auth.phoneLabel\")}\n                      </Label>\n                      <motion.div \n                        className=\"relative\"\n                        whileHover={{ scale: 1.02 }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        <select className=\"absolute left-3 top-3 bg-transparent border-none text-muted-foreground text-sm\">\n                          <option>+91</option>\n                        </select>\n                        <Input\n                          id=\"phone\"\n                          type=\"tel\"\n                          placeholder=\"9876543210\"\n                          className=\"pl-16 h-12 border-border/50 focus:border-primary/50 transition-all duration-300\"\n                          value={phoneNumber}\n                          onChange={(e) => setPhoneNumber(e.target.value)}\n                          disabled={otpVerified}\n                          data-testid=\"input-phone\"\n                        />\n                      </motion.div>\n                      {!otpSent && (\n                        <motion.div\n                          whileHover={{ scale: 1.02 }}\n                          whileTap={{ scale: 0.98 }}\n                        >\n                          <Button \n                            type=\"button\"\n                            className=\"w-full mt-3 h-12 bg-gradient-to-r from-primary to-emerald-600 hover:from-primary/90 hover:to-emerald-600/90 shadow-lg hover:shadow-xl premium-glow\" \n                            onClick={handleSendOTP}\n                            disabled={sendOTPMutation.isPending || otpVerified}\n                            data-testid=\"button-send-otp\"\n                          >\n                            {sendOTPMutation.isPending ? (\n                              <>\n                                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                Sending Magic Code...\n                              </>\n                            ) : (\n                              <>\n                                <Zap className=\"mr-2 h-4 w-4\" />\n                                Send Verification Code\n                              </>\n                            )}\n                          </Button>\n                        </motion.div>\n                      )}\n                    </div>\n\n                    {otpSent && !otpVerified && (\n                      <motion.div\n                        initial={{ opacity: 0, x: 20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ duration: 0.5 }}\n                      >\n                        <Label className=\"block text-sm font-medium text-foreground mb-3\">\n                          Enter Verification Code\n                        </Label>\n                        <motion.div \n                          className=\"bg-gradient-to-r from-emerald-500 to-teal-600 text-black p-4 rounded-xl mb-4 text-center premium-glow\"\n                          initial={{ scale: 0.9 }}\n                          animate={{ scale: 1 }}\n                          transition={{ type: \"spring\", stiffness: 200 }}\n                        >\n                          <div className=\"font-bold text-lg mb-1 flex items-center justify-center gap-2\">\n                            <Sparkles className=\"w-5 h-5\" />\n                            Demo Mode\n                            <Sparkles className=\"w-5 h-5\" />\n                          </div>\n                          <div className=\"text-sm opacity-90\">Enter Code: <span className=\"font-bold text-lg\">0000</span></div>\n                        </motion.div>\n                        <div className=\"flex justify-center mb-4\">\n                          <motion.div\n                            whileHover={{ scale: 1.05 }}\n                            transition={{ duration: 0.2 }}\n                          >\n                            <InputOTP \n                              maxLength={4} \n                              value={otp} \n                              onChange={setOtp}\n                              data-testid=\"input-otp\"\n                            >\n                              <InputOTPGroup>\n                                <InputOTPSlot index={0} />\n                                <InputOTPSlot index={1} />\n                                <InputOTPSlot index={2} />\n                                <InputOTPSlot index={3} />\n                              </InputOTPGroup>\n                            </InputOTP>\n                          </motion.div>\n                        </div>\n                        <motion.div\n                          whileHover={{ scale: 1.02 }}\n                          whileTap={{ scale: 0.98 }}\n                        >\n                          <Button \n                            type=\"button\"\n                            className=\"w-full h-12 bg-gradient-to-r from-primary to-emerald-600 hover:from-primary/90 hover:to-emerald-600/90 shadow-lg hover:shadow-xl premium-glow\" \n                            onClick={handleVerifyOTP}\n                            disabled={verifyOTPMutation.isPending}\n                            data-testid=\"button-verify-otp\"\n                          >\n                            {verifyOTPMutation.isPending ? (\n                              <>\n                                <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                                Verifying Code...\n                              </>\n                            ) : (\n                              <>\n                                <CheckCircle className=\"mr-2 h-5 w-5\" />\n                                Verify & Continue\n                              </>\n                            )}\n                          </Button>\n                        </motion.div>\n                      </motion.div>\n                    )}\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Profile Information Section */}\n              <motion.div \n                className=\"premium-card rounded-2xl p-6 space-y-6 hover-glow group relative overflow-hidden\"\n                whileHover={{ scale: 1.02, y: -4 }}\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.3, type: \"spring\", stiffness: 200 }}\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 to-pink-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                \n                <div className=\"relative z-10\">\n                  <motion.div \n                    className=\"flex items-center gap-3 mb-6\"\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.2 }}\n                  >\n                    <motion.div\n                      className=\"w-12 h-12 bg-purple-500/20 rounded-xl flex items-center justify-center\"\n                      whileHover={{ scale: 1.1, rotate: 10 }}\n                    >\n                      <User className=\"h-6 w-6 text-purple-400\" />\n                    </motion.div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"text-xl font-bold text-foreground\">Profile Information</h3>\n                      <p className=\"text-sm text-muted-foreground\">Tell us about your farm</p>\n                    </div>\n                    <motion.div\n                      animate={{ rotate: [0, 360] }}\n                      transition={{ duration: 8, repeat: Infinity, ease: \"linear\" }}\n                    >\n                      <Sparkles className=\"w-6 h-6 text-accent/50\" />\n                    </motion.div>\n                  </motion.div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <motion.div\n                      whileHover={{ scale: 1.02 }}\n                      transition={{ duration: 0.2 }}\n                    >\n                      <Label htmlFor=\"name\" className=\"block text-sm font-medium text-foreground mb-2\">Full Name *</Label>\n                      <Input\n                        id=\"name\"\n                        value={formData.name}\n                        onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                        placeholder=\"Enter your name\"\n                        className=\"h-12 border-border/50 focus:border-primary/50 transition-all duration-300\"\n                        data-testid=\"input-name\"\n                      />\n                    </motion.div>\n                    <motion.div\n                      whileHover={{ scale: 1.02 }}\n                      transition={{ duration: 0.2 }}\n                    >\n                      <Label htmlFor=\"age\" className=\"block text-sm font-medium text-foreground mb-2\">Age</Label>\n                      <Input\n                        id=\"age\"\n                        type=\"number\"\n                        value={formData.age}\n                        onChange={(e) => setFormData(prev => ({ ...prev, age: e.target.value }))}\n                        placeholder=\"25\"\n                        className=\"h-12 border-border/50 focus:border-primary/50 transition-all duration-300\"\n                        data-testid=\"input-age\"\n                      />\n                    </motion.div>\n                  </div>\n\n                  <motion.div\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <Label htmlFor=\"location\" className=\"block text-sm font-medium text-foreground mb-2\">Location</Label>\n                    <Input\n                      id=\"location\"\n                      value={formData.location}\n                      onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}\n                      placeholder=\"Village, District, State\"\n                      className=\"h-12 border-border/50 focus:border-primary/50 transition-all duration-300\"\n                      data-testid=\"input-location\"\n                    />\n                  </motion.div>\n\n                  <motion.div\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <Label htmlFor=\"farmSize\" className=\"block text-sm font-medium text-foreground mb-2\">Farm Size (acres)</Label>\n                    <Input\n                      id=\"farmSize\"\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={formData.farmSize}\n                      onChange={(e) => setFormData(prev => ({ ...prev, farmSize: e.target.value }))}\n                      placeholder=\"5.0\"\n                      className=\"h-12 border-border/50 focus:border-primary/50 transition-all duration-300\"\n                      data-testid=\"input-farm-size\"\n                    />\n                  </motion.div>\n\n                  <div>\n                    <Label className=\"block text-sm font-medium text-foreground mb-4\">Primary Crops</Label>\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {crops.map((crop, index) => (\n                        <motion.div \n                          key={crop.id} \n                          className=\"flex items-center space-x-3 p-3 rounded-xl bg-card/50 border border-border/30 hover:border-primary/30 transition-all duration-300\"\n                          whileHover={{ scale: 1.05, y: -2 }}\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ delay: index * 0.1, duration: 0.2 }}\n                        >\n                          <Checkbox\n                            id={crop.id}\n                            checked={formData.primaryCrops.includes(crop.id)}\n                            onCheckedChange={() => handleCropToggle(crop.id)}\n                            data-testid={`checkbox-crop-${crop.id}`}\n                          />\n                          <Label htmlFor={crop.id} className=\"text-sm font-medium cursor-pointer\">{crop.name}</Label>\n                        </motion.div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <motion.div\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <Label htmlFor=\"language\" className=\"block text-sm font-medium text-foreground mb-2\">Preferred Language</Label>\n                    <Select \n                      value={formData.language} \n                      onValueChange={(value) => setFormData(prev => ({ ...prev, language: value }))}\n                    >\n                      <SelectTrigger className=\"h-12 border-border/50 focus:border-primary/50 transition-all duration-300\" data-testid=\"select-language\">\n                        <SelectValue placeholder=\"Select Language\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"en\">English</SelectItem>\n                        <SelectItem value=\"hi\">‡§π‡§ø‡§®‡•ç‡§¶‡•Ä</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </motion.div>\n                </div>\n              </motion.div>\n\n              <motion.div\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.5 }}\n              >\n                <Button \n                  type=\"submit\"\n                  className=\"w-full font-bold text-xl py-8 bg-gradient-to-r from-primary via-accent to-primary hover:from-primary/90 hover:via-accent/90 hover:to-primary/90 shadow-2xl hover:shadow-primary/25 premium-glow group relative overflow-hidden\" \n                  disabled={updateUserMutation.isPending || !otpVerified}\n                  data-testid=\"button-complete-onboarding\"\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                  <div className=\"relative z-10 flex items-center justify-center\">\n                    {updateUserMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-3 h-6 w-6 animate-spin\" />\n                        <span className=\"mr-2\">Creating Your Smart Farm...</span>\n                        <Sparkles className=\"h-5 w-5 animate-pulse\" />\n                      </>\n                    ) : (\n                      <>\n                        <Zap className=\"mr-3 h-6 w-6 group-hover:animate-pulse\" />\n                        <span className=\"mr-2\">Start Your Smart Farming Journey</span>\n                        <ArrowRight className=\"h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n                      </>\n                    )}\n                  </div>\n                </Button>\n              </motion.div>\n            </motion.form>\n          </div>\n        </div>\n      </motion.div>\n    </section>\n  );\n}","size_bytes":27004},"client/src/pages/community.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Plus, Heart, MessageCircle, Share, MapPin, Send } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useState } from \"react\";\n\nexport default function Community() {\n  const { t } = useTranslation();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isCreatePostOpen, setIsCreatePostOpen] = useState(false);\n  const [newPost, setNewPost] = useState({\n    title: \"\",\n    content: \"\",\n    location: \"\",\n  });\n\n  const { data: communityPosts, isLoading } = useQuery({\n    queryKey: [\"/api/community/posts\"],\n  });\n\n  const { data: communityStats } = useQuery({\n    queryKey: [\"/api/community/stats\"],\n  });\n\n  const createPostMutation = useMutation({\n    mutationFn: async (postData: typeof newPost) => {\n      const response = await apiRequest(\"POST\", \"/api/community/posts\", postData);\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsCreatePostOpen(false);\n      setNewPost({ title: \"\", content: \"\", location: \"\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/community/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Your post has been created successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const likePostMutation = useMutation({\n    mutationFn: async (postId: string) => {\n      const response = await apiRequest(\"POST\", `/api/community/posts/${postId}/like`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\"] });\n      toast({\n        title: \"Liked!\",\n        description: \"You liked this post\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLike = (postId: string) => {\n    likePostMutation.mutate(postId);\n  };\n\n  const handleComment = (postId: string) => {\n    // TODO: Implement comment functionality\n    console.log(\"Comment on post:\", postId);\n  };\n\n  const handleShare = (postId: string) => {\n    if (navigator.share) {\n      navigator.share({\n        title: \"FarmConnect Community Post\",\n        text: \"Check out this post from the farming community!\",\n        url: window.location.href,\n      });\n    } else {\n      navigator.clipboard.writeText(window.location.href);\n      toast({\n        title: \"Link copied!\",\n        description: \"Post link copied to clipboard\",\n      });\n    }\n  };\n\n  const handleCreatePost = () => {\n    if (!newPost.title.trim() || !newPost.content.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in title and content\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createPostMutation.mutate(newPost);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted/30 pb-20 relative overflow-hidden\">\n      {/* Animated Background Elements */}\n      <motion.div \n        className=\"absolute inset-0 pointer-events-none\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 2 }}\n      >\n        <motion.div className=\"absolute top-20 left-10 w-64 h-64 bg-gradient-to-br from-purple-500/10 to-pink-500/10 rounded-full blur-3xl\" animate={{ scale: [1, 1.1, 1], opacity: [0.5, 0.8, 0.5] }} transition={{ duration: 3, repeat: Infinity }} />\n        <motion.div className=\"absolute bottom-40 right-10 w-48 h-48 bg-gradient-to-br from-emerald-500/10 to-teal-500/10 rounded-full blur-3xl\" animate={{ scale: [1, 1.2, 1], opacity: [0.4, 0.7, 0.4] }} transition={{ duration: 4, repeat: Infinity, delay: 1 }} />\n        <motion.div className=\"absolute top-1/2 left-1/3 w-32 h-32 bg-gradient-to-br from-blue-500/10 to-cyan-500/10 rounded-full blur-2xl\" animate={{ scale: [1, 1.15, 1], opacity: [0.3, 0.6, 0.3] }} transition={{ duration: 5, repeat: Infinity, delay: 2 }} />\n      </motion.div>\n\n      {/* Header */}\n      <motion.header \n        className=\"bg-gradient-to-r from-primary/5 via-primary/10 to-accent/5 border-b border-border/50 backdrop-blur-sm p-6 flex items-center relative z-10\" \n        data-testid=\"community-header\"\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setLocation(\"/dashboard\")}\n          className=\"mr-4\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-xl font-semibold flex-1\" data-testid=\"page-title\">\n          {t(\"community.title\")}\n        </h1>\n        <Dialog open={isCreatePostOpen} onOpenChange={setIsCreatePostOpen}>\n          <DialogTrigger asChild>\n            <Button size=\"icon\" data-testid=\"button-create-post\">\n              <Plus className=\"h-5 w-5\" />\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New Post</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Title</Label>\n                <Input\n                  id=\"title\"\n                  value={newPost.title}\n                  onChange={(e) => setNewPost(prev => ({ ...prev, title: e.target.value }))}\n                  placeholder=\"What would you like to share?\"\n                  data-testid=\"input-post-title\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"content\">Content</Label>\n                <Textarea\n                  id=\"content\"\n                  value={newPost.content}\n                  onChange={(e) => setNewPost(prev => ({ ...prev, content: e.target.value }))}\n                  placeholder=\"Share your farming experience, question, or advice...\"\n                  rows={4}\n                  data-testid=\"textarea-post-content\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"location\">Location (Optional)</Label>\n                <Input\n                  id=\"location\"\n                  value={newPost.location}\n                  onChange={(e) => setNewPost(prev => ({ ...prev, location: e.target.value }))}\n                  placeholder=\"Your village, district\"\n                  data-testid=\"input-post-location\"\n                />\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setIsCreatePostOpen(false)}\n                  data-testid=\"button-cancel-post\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleCreatePost}\n                  disabled={createPostMutation.isPending}\n                  data-testid=\"button-submit-post\"\n                  className=\"flex-1\"\n                >\n                  {createPostMutation.isPending ? (\n                    <>\n                      <Send className=\"mr-2 h-4 w-4 animate-pulse\" />\n                      Posting...\n                    </>\n                  ) : (\n                    <>\n                      <Send className=\"mr-2 h-4 w-4\" />\n                      Share Post\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </motion.header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Community stats */}\n        <div className=\"grid grid-cols-3 gap-4\">\n          <Card data-testid=\"stat-farmers\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-primary\">\n                {communityStats?.totalFarmers || \"2.5K\"}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {t(\"community.totalFarmers\")}\n              </div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"stat-posts\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-accent\">\n                {communityStats?.activePosts || \"450\"}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {t(\"community.activePosts\")}\n              </div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"stat-help-rate\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-blue-500\">\n                {communityStats?.helpRate || \"95%\"}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {t(\"community.helpRate\")}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Community posts */}\n        <div className=\"space-y-4\">\n          {isLoading ? (\n            // Loading skeleton\n            Array.from({ length: 3 }).map((_, index) => (\n              <Card key={index} data-testid={`post-skeleton-${index}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"animate-pulse\">\n                    <div className=\"flex items-start space-x-4\">\n                      <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                      <div className=\"flex-1\">\n                        <div className=\"h-4 bg-muted rounded w-32 mb-2\"></div>\n                        <div className=\"h-3 bg-muted rounded w-24 mb-4\"></div>\n                        <div className=\"h-4 bg-muted rounded w-full mb-2\"></div>\n                        <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : communityPosts && communityPosts.length > 0 ? (\n            communityPosts.map((post: any, index: number) => (\n              <motion.div\n                key={post.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card data-testid={`post-${post.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start space-x-4\">\n                      <Avatar data-testid={`avatar-${post.id}`}>\n                        <AvatarFallback>\n                          {post.user?.name?.substring(0, 2)?.toUpperCase() || \"U\"}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <h4 className=\"font-semibold text-foreground\" data-testid={`author-${post.id}`}>\n                            {post.user?.name || \"Anonymous Farmer\"}\n                          </h4>\n                          <div className=\"flex items-center text-muted-foreground text-sm\">\n                            <MapPin className=\"h-3 w-3 mr-1\" />\n                            <span data-testid={`location-${post.id}`}>\n                              {post.user?.location || \"Farm Location\"}\n                            </span>\n                          </div>\n                          <span className=\"text-muted-foreground text-sm\" data-testid={`time-${post.id}`}>\n                            ‚Ä¢ {new Date(post.createdAt).toLocaleDateString()}\n                          </span>\n                        </div>\n                        <p className=\"text-foreground mb-4\" data-testid={`content-${post.id}`}>\n                          {post.content}\n                        </p>\n                        \n                        {/* Post images */}\n                        {post.images && post.images.length > 0 && (\n                          <div className=\"grid grid-cols-2 gap-2 mb-4\" data-testid={`images-${post.id}`}>\n                            {post.images.map((image: string, imgIndex: number) => (\n                              <img\n                                key={imgIndex}\n                                src={image}\n                                alt={`Post image ${imgIndex + 1}`}\n                                className=\"rounded-lg object-cover h-32 w-full\"\n                                data-testid={`image-${post.id}-${imgIndex}`}\n                              />\n                            ))}\n                          </div>\n                        )}\n\n                        <div className=\"flex items-center space-x-6 text-muted-foreground\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleLike(post.id)}\n                            className=\"p-0 h-auto\"\n                            data-testid={`button-like-${post.id}`}\n                          >\n                            <Heart className=\"h-4 w-4 mr-2\" />\n                            <span>{post.likes || 0}</span>\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleComment(post.id)}\n                            className=\"p-0 h-auto\"\n                            data-testid={`button-comment-${post.id}`}\n                          >\n                            <MessageCircle className=\"h-4 w-4 mr-2\" />\n                            <span>{post.comments || 0}</span>\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleShare(post.id)}\n                            className=\"p-0 h-auto\"\n                            data-testid={`button-share-${post.id}`}\n                          >\n                            <Share className=\"h-4 w-4 mr-2\" />\n                            <span>{t(\"community.share\")}</span>\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))\n          ) : (\n            // Empty state\n            <Card data-testid=\"empty-state\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-6xl mb-4\">üë•</div>\n                <h3 className=\"text-lg font-semibold mb-2\">No Posts Yet</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Be the first to share your farming experience with the community!\n                </p>\n                <Button data-testid=\"button-create-first-post\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Create First Post\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15969},"client/src/pages/crop-detect.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { \n  ArrowLeft, \n  Camera, \n  RotateCcw, \n  Save, \n  Share, \n  Eye,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Leaf\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport CameraCapture from \"@/components/camera-capture\";\n\ninterface DetectionResult {\n  diseaseName: string;\n  severity: string;\n  confidence: number;\n  symptoms: string;\n  treatment: string;\n  isMockResult: boolean;\n}\n\nexport default function CropDetect() {\n  const { t } = useTranslation();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const [showModal, setShowModal] = useState(false);\n  const [analysisProgress, setAnalysisProgress] = useState(0);\n  const [detectionResult, setDetectionResult] = useState<DetectionResult | null>(null);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n\n  const { data: recentReports = [] } = useQuery({\n    queryKey: [\"/api/disease-reports/recent\"],\n  });\n\n  const analyzeImageMutation = useMutation({\n    mutationFn: async (imageFile: File) => {\n      const formData = new FormData();\n      formData.append('image', imageFile);\n      formData.append('cropType', 'Unknown');\n      \n      const response = await fetch(\"/api/detect\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to analyze image\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setDetectionResult(data.result);\n      setAnalysisProgress(100);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setShowModal(false);\n      setAnalysisProgress(0);\n    },\n  });\n\n  const saveReportMutation = useMutation({\n    mutationFn: async (reportData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/disease-reports\", reportData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Report Saved\",\n        description: \"Disease report has been saved successfully!\",\n      });\n      setShowModal(false);\n      setDetectionResult(null);\n      setAnalysisProgress(0);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageCapture = (imageFile: File, imageUrl: string) => {\n    setCapturedImage(imageUrl);\n    setShowModal(true);\n    setAnalysisProgress(0);\n    setDetectionResult(null);\n    \n    // Simulate progress\n    const progressInterval = setInterval(() => {\n      setAnalysisProgress(prev => {\n        if (prev >= 75) {\n          clearInterval(progressInterval);\n          return 75;\n        }\n        return prev + 25;\n      });\n    }, 500);\n    \n    // Start analysis\n    analyzeImageMutation.mutate(imageFile);\n  };\n\n  const handleSaveReport = () => {\n    if (!detectionResult || !capturedImage) return;\n    \n    saveReportMutation.mutate({\n      diseaseName: detectionResult.diseaseName,\n      severity: detectionResult.severity,\n      confidence: detectionResult.confidence,\n      symptoms: detectionResult.symptoms,\n      treatment: detectionResult.treatment,\n      cropType: \"Unknown\",\n      imagePath: capturedImage,\n    });\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity.toLowerCase()) {\n      case \"high\": return \"bg-red-100 text-red-800\";\n      case \"medium\": return \"bg-yellow-100 text-yellow-800\";\n      case \"low\": return \"bg-green-100 text-green-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Clean Header */}\n      <header className=\"bg-white border-b border-border px-6 py-4\" data-testid=\"crop-detect-header\">\n        <div className=\"flex items-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/dashboard\")}\n            className=\"mr-4\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-xl font-semibold text-foreground\" data-testid=\"page-title\">\n            Crop Disease Detection\n          </h1>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Instructions Card */}\n        <Card className=\"farm-card\" data-testid=\"instructions-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <Camera className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-foreground mb-1\">How to Use</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Position the diseased leaf clearly in your camera frame and capture the image. \n                  Our AI will analyze it for diseases and provide treatment recommendations.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Camera Section */}\n        <Card className=\"farm-card\" data-testid=\"camera-section\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Camera className=\"h-5 w-5\" />\n              Capture Crop Image\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <CameraCapture onCapture={handleImageCapture} />\n          </CardContent>\n        </Card>\n\n        {/* Recent Reports */}\n        <div>\n          <h3 className=\"section-header\" data-testid=\"recent-reports-title\">\n            <Eye className=\"h-5 w-5\" />\n            Recent Analysis\n          </h3>\n          \n          {Array.isArray(recentReports) && recentReports.length > 0 ? (\n            <div className=\"space-y-3\">\n              {recentReports.slice(0, 5).map((report: any) => (\n                <Card key={report.id} className=\"farm-card\" data-testid={`report-${report.id}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                          <Leaf className=\"h-5 w-5 text-green-600\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-foreground text-sm\" data-testid={`report-disease-${report.id}`}>\n                            {report.diseaseName}\n                          </h4>\n                          <p className=\"text-xs text-muted-foreground\" data-testid={`report-details-${report.id}`}>\n                            {report.cropType} ‚Ä¢ {new Date(report.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge \n                          className={getSeverityColor(report.severity)}\n                          data-testid={`report-severity-${report.id}`}\n                        >\n                          {report.severity}\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {Math.round(report.confidence)}%\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card className=\"farm-card border-dashed\" data-testid=\"no-reports\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Leaf className=\"h-8 w-8 text-green-600\" />\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">No Analysis Yet</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Capture your first crop image to get AI-powered disease analysis.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Analysis Modal */}\n      <Dialog open={showModal} onOpenChange={setShowModal}>\n        <DialogContent className=\"w-11/12 max-w-md mx-auto\" data-testid=\"analysis-modal\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Camera className=\"h-5 w-5\" />\n              {analysisProgress < 100 ? \"Analyzing Image...\" : \"Analysis Complete\"}\n            </DialogTitle>\n            <DialogDescription>\n              {analysisProgress < 100 \n                ? \"Our AI is examining your crop image for diseases...\"\n                : \"Review the results and save the report if needed.\"\n              }\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            {/* Captured Image */}\n            {capturedImage && (\n              <div className=\"rounded-lg overflow-hidden\">\n                <img \n                  src={capturedImage} \n                  alt=\"Captured crop\" \n                  className=\"w-full h-48 object-cover\"\n                  data-testid=\"captured-image\"\n                />\n              </div>\n            )}\n\n            {/* Progress */}\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-foreground\">Analysis Progress</span>\n                <span className=\"text-sm text-muted-foreground\">{analysisProgress}%</span>\n              </div>\n              <Progress value={analysisProgress} className=\"h-2\" data-testid=\"analysis-progress\" />\n            </div>\n\n            {/* Results */}\n            {detectionResult && analysisProgress === 100 && (\n              <div className=\"space-y-4\">\n                <Card className=\"farm-card\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <h4 className=\"font-semibold text-foreground\" data-testid=\"result-disease-name\">\n                          {detectionResult.diseaseName}\n                        </h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Confidence: {Math.round(detectionResult.confidence)}%\n                        </p>\n                      </div>\n                      <Badge \n                        className={getSeverityColor(detectionResult.severity)}\n                        data-testid=\"result-severity\"\n                      >\n                        {detectionResult.severity}\n                      </Badge>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div>\n                        <h5 className=\"font-medium text-foreground mb-1 flex items-center gap-1\">\n                          <AlertTriangle className=\"h-4 w-4\" />\n                          Symptoms\n                        </h5>\n                        <p className=\"text-sm text-muted-foreground\" data-testid=\"result-symptoms\">\n                          {detectionResult.symptoms}\n                        </p>\n                      </div>\n\n                      <div>\n                        <h5 className=\"font-medium text-foreground mb-1 flex items-center gap-1\">\n                          <CheckCircle className=\"h-4 w-4\" />\n                          Treatment\n                        </h5>\n                        <p className=\"text-sm text-muted-foreground\" data-testid=\"result-treatment\">\n                          {detectionResult.treatment}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Action Buttons */}\n                <div className=\"flex gap-2\">\n                  <Button \n                    onClick={handleSaveReport}\n                    disabled={saveReportMutation.isPending}\n                    className=\"btn-farm-primary flex-1\"\n                    data-testid=\"button-save-report\"\n                  >\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    {saveReportMutation.isPending ? \"Saving...\" : \"Save Report\"}\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setShowModal(false)}\n                    className=\"flex-1\"\n                    data-testid=\"button-close-modal\"\n                  >\n                    Close\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":13602},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"wouter\";\nimport { \n  Camera, \n  CloudSun, \n  BarChart3, \n  Users, \n  Bell,\n  Leaf, \n  TrendingUp, \n  Calendar,\n  MapPin,\n  Plus,\n  Eye,\n  ArrowRight\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Dashboard() {\n  const { t } = useTranslation();\n  const { user } = useAuth();\n\n  const { data: recentReports = [] } = useQuery({\n    queryKey: [\"/api/disease-reports/recent\"],\n    enabled: !!user,\n  });\n\n  const { data: communityStats } = useQuery({\n    queryKey: [\"/api/community/stats\"],\n    enabled: !!user,\n  });\n\n  const { data: weatherData } = useQuery({\n    queryKey: [\"/api/weather/current\", user?.location || \"alwar\"],\n    enabled: !!user,\n  });\n\n  const quickActions = [\n    {\n      icon: Camera,\n      title: \"Crop Detection\",\n      description: \"Scan your crops for diseases\",\n      href: \"/crop-detect\",\n      bgColor: \"bg-green-50\",\n      iconColor: \"text-green-600\",\n      testId: \"action-detect-disease\",\n    },\n    {\n      icon: BarChart3,\n      title: \"Market Prices\",\n      description: \"Check live commodity prices\",\n      href: \"/mandi-prices\",\n      bgColor: \"bg-orange-50\",\n      iconColor: \"text-orange-600\",\n      testId: \"action-mandi-prices\",\n    },\n    {\n      icon: CloudSun,\n      title: \"Weather\",\n      description: \"Get weather forecasts\",\n      href: \"/weather\",\n      bgColor: \"bg-blue-50\",\n      iconColor: \"text-blue-600\",\n      testId: \"action-weather\",\n    },\n    {\n      icon: Users,\n      title: \"Community\",\n      description: \"Connect with other farmers\",\n      href: \"/community\",\n      bgColor: \"bg-purple-50\",\n      iconColor: \"text-purple-600\",\n      testId: \"action-community\",\n    },\n  ];\n\n  const currentHour = new Date().getHours();\n  const getGreeting = () => {\n    if (currentHour < 12) return \"Good Morning\";\n    if (currentHour < 17) return \"Good Afternoon\";\n    return \"Good Evening\";\n  };\n\n  const getWeatherIcon = (temp: number) => {\n    if (temp > 30) return \"‚òÄÔ∏è\";\n    if (temp > 20) return \"‚õÖ\";\n    return \"üå§Ô∏è\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Clean Header */}\n      <header className=\"bg-white border-b border-border px-6 py-4\" data-testid=\"dashboard-header\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-foreground\" data-testid=\"welcome-message\">\n              {getGreeting()}, {user?.name || \"Farmer\"}!\n            </h1>\n            <div className=\"flex items-center text-muted-foreground text-sm mt-1\" data-testid=\"user-location\">\n              <MapPin className=\"w-4 h-4 mr-1\" />\n              {user?.location || \"Farm Location\"} ‚Ä¢ {new Date().toLocaleDateString()}\n            </div>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-notifications\">\n            <Bell className=\"h-5 w-5\" />\n            <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full\"></div>\n          </Button>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Weather Card */}\n        {weatherData && (\n          <Card className=\"farm-card\" data-testid=\"weather-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-1\">Today's Weather</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {weatherData.location}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-3xl mb-1\">\n                    {getWeatherIcon(weatherData.temperature)}\n                  </div>\n                  <div className=\"text-2xl font-semibold text-foreground\">\n                    {weatherData.temperature}¬∞C\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {weatherData.condition}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-3 gap-4\">\n          <Card className=\"farm-card text-center\" data-testid=\"stats-reports\">\n            <CardContent className=\"p-4\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                <Leaf className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div className=\"text-xl font-semibold text-foreground\">\n                {Array.isArray(recentReports) ? recentReports.length : 0}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Reports</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"farm-card text-center\" data-testid=\"stats-community\">\n            <CardContent className=\"p-4\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                <Users className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div className=\"text-xl font-semibold text-foreground\">\n                {(communityStats as any)?.totalFarmers || \"2.5K\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Farmers</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"farm-card text-center\" data-testid=\"stats-posts\">\n            <CardContent className=\"p-4\">\n              <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                <TrendingUp className=\"h-5 w-5 text-purple-600\" />\n              </div>\n              <div className=\"text-xl font-semibold text-foreground\">\n                {(communityStats as any)?.activePosts || \"157\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Posts</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div>\n          <h2 className=\"section-header\" data-testid=\"quick-actions-title\">\n            <Plus className=\"h-5 w-5\" />\n            Quick Actions\n          </h2>\n          <div className=\"grid grid-cols-2 gap-4\">\n            {quickActions.map((action) => (\n              <Link key={action.title} href={action.href}>\n                <Card \n                  className=\"farm-card cursor-pointer h-full\" \n                  data-testid={action.testId}\n                >\n                  <CardContent className=\"p-4 flex flex-col items-center text-center\">\n                    <div className={`w-12 h-12 ${action.bgColor} rounded-lg flex items-center justify-center mb-3`}>\n                      <action.icon className={`h-6 w-6 ${action.iconColor}`} />\n                    </div>\n                    <h3 className=\"font-semibold text-foreground mb-1 text-sm\">\n                      {action.title}\n                    </h3>\n                    <p className=\"text-xs text-muted-foreground leading-relaxed\">\n                      {action.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        </div>\n\n        {/* Recent Disease Reports */}\n        <div>\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"section-header\" data-testid=\"recent-reports-title\">\n              <Eye className=\"h-5 w-5\" />\n              Recent Reports\n            </h2>\n            {Array.isArray(recentReports) && recentReports.length > 0 && (\n              <Link href=\"/crop-detect\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-xs\">\n                  View All <ArrowRight className=\"h-3 w-3 ml-1\" />\n                </Button>\n              </Link>\n            )}\n          </div>\n\n          {Array.isArray(recentReports) && recentReports.length > 0 ? (\n            <div className=\"space-y-3\">\n              {recentReports.slice(0, 3).map((report: any) => (\n                <Card key={report.id} className=\"farm-card\" data-testid={`report-${report.id}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                          <Leaf className=\"h-5 w-5 text-green-600\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-foreground text-sm\" data-testid={`report-disease-${report.id}`}>\n                            {report.diseaseName}\n                          </h4>\n                          <p className=\"text-xs text-muted-foreground\" data-testid={`report-details-${report.id}`}>\n                            {report.cropType} ‚Ä¢ {new Date(report.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                      <Badge \n                        variant={report.severity === \"High\" ? \"destructive\" : \n                                report.severity === \"Medium\" ? \"default\" : \"secondary\"}\n                        className=\"text-xs\"\n                        data-testid={`report-severity-${report.id}`}\n                      >\n                        {report.severity}\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card className=\"farm-card border-dashed\" data-testid=\"no-reports\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Camera className=\"h-8 w-8 text-green-600\" />\n                </div>\n                <h3 className=\"font-semibold text-foreground mb-2\">Start Crop Detection</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  No disease reports yet. Scan your crops to get started!\n                </p>\n                <Link href=\"/crop-detect\">\n                  <Button className=\"btn-farm-primary\" data-testid=\"button-start-detecting\">\n                    <Camera className=\"mr-2 h-4 w-4\" />\n                    Scan Crops\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Farmer Marketplace Quick Access */}\n        <Card className=\"farm-card bg-gradient-to-r from-green-50 to-emerald-50 border-green-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"font-semibold text-foreground mb-1\">Farmer Marketplace</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  List your produce, get bids, and arrange logistics\n                </p>\n              </div>\n              <Link href=\"/farmer-marketplace\">\n                <Button className=\"btn-farm-primary\">\n                  Visit <ArrowRight className=\"ml-1 h-4 w-4\" />\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11751},"client/src/pages/help-assistant.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Bot, Send, CloudSun, Leaf, Zap, Bug } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ChatMessage {\n  id: string;\n  type: \"user\" | \"assistant\";\n  content: string;\n  timestamp: Date;\n}\n\nexport default function HelpAssistant() {\n  const { t } = useTranslation();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      id: \"1\",\n      type: \"assistant\",\n      content: \"Hello! I'm your AI farming assistant. I can help you with crop diseases, weather forecasts, best practices, and answer any farming questions you have. How can I assist you today?\",\n      timestamp: new Date(),\n    },\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/assistant/chat\", { \n        message,\n        context: \"farming\"\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const assistantMessage: ChatMessage = {\n        id: Date.now().toString(),\n        type: \"assistant\",\n        content: data.response,\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get response from assistant. Please try again.\",\n        variant: \"destructive\",\n      });\n      \n      // Add fallback response\n      const fallbackMessage: ChatMessage = {\n        id: Date.now().toString(),\n        type: \"assistant\",\n        content: \"I apologize, but I'm having trouble connecting to my knowledge base right now. Please try asking your question again, or contact a local agricultural expert for immediate assistance.\",\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, fallbackMessage]);\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      type: \"user\",\n      content: inputMessage,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    sendMessageMutation.mutate(inputMessage);\n    setInputMessage(\"\");\n  };\n\n  const quickActions = [\n    {\n      icon: CloudSun,\n      title: t(\"assistant.weatherAdvice\"),\n      message: \"Can you give me weather advice for my crops this week?\",\n      testId: \"quick-weather-advice\",\n    },\n    {\n      icon: Leaf,\n      title: t(\"assistant.cropCare\"),\n      message: \"What are the best practices for crop care during this season?\",\n      testId: \"quick-crop-care\",\n    },\n    {\n      icon: Zap,\n      title: t(\"assistant.fertilizer\"),\n      message: \"What fertilizer should I use for better crop yield?\",\n      testId: \"quick-fertilizer\",\n    },\n    {\n      icon: Bug,\n      title: t(\"assistant.pestControl\"),\n      message: \"How can I protect my crops from pests naturally?\",\n      testId: \"quick-pest-control\",\n    },\n  ];\n\n  const handleQuickAction = (message: string) => {\n    setInputMessage(message);\n    handleSendMessage();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col pb-20\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-6 flex items-center\" data-testid=\"help-assistant-header\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setLocation(\"/dashboard\")}\n          className=\"mr-4\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n          {t(\"assistant.title\")}\n        </h1>\n      </header>\n\n      <div className=\"flex-1 p-6 flex flex-col\">\n        {/* Chat interface */}\n        <Card className=\"flex-1 flex flex-col\" data-testid=\"chat-card\">\n          <div className=\"p-4 border-b border-border\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar>\n                <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                  <Bot className=\"h-5 w-5\" />\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <h3 className=\"font-semibold text-foreground\" data-testid=\"assistant-name\">\n                  {t(\"assistant.name\")}\n                </h3>\n                <p className=\"text-muted-foreground text-sm\" data-testid=\"assistant-status\">\n                  {t(\"assistant.status\")}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Chat messages */}\n          <ScrollArea className=\"flex-1 p-4\" data-testid=\"chat-messages\">\n            <div className=\"space-y-4\">\n              {messages.map((message) => (\n                <motion.div\n                  key={message.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  className={`flex items-start space-x-3 ${message.type === 'user' ? 'justify-end' : ''}`}\n                  data-testid={`message-${message.id}`}\n                >\n                  {message.type === 'assistant' && (\n                    <Avatar className=\"w-8 h-8\">\n                      <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n                        <Bot className=\"h-4 w-4\" />\n                      </AvatarFallback>\n                    </Avatar>\n                  )}\n                  \n                  <div className={`max-w-xs lg:max-w-md px-4 py-3 rounded-lg ${\n                    message.type === 'user' \n                      ? 'bg-primary text-primary-foreground' \n                      : 'bg-muted'\n                  }`}>\n                    <p className=\"text-sm\" data-testid={`message-content-${message.id}`}>\n                      {message.content}\n                    </p>\n                    <p className={`text-xs mt-1 ${\n                      message.type === 'user' \n                        ? 'text-primary-foreground/70' \n                        : 'text-muted-foreground'\n                    }`}>\n                      {message.timestamp.toLocaleTimeString()}\n                    </p>\n                  </div>\n\n                  {message.type === 'user' && (\n                    <Avatar className=\"w-8 h-8\">\n                      <AvatarFallback className=\"bg-muted text-muted-foreground text-sm\">\n                        U\n                      </AvatarFallback>\n                    </Avatar>\n                  )}\n                </motion.div>\n              ))}\n            </div>\n          </ScrollArea>\n\n          {/* Message input */}\n          <div className=\"p-4 border-t border-border\">\n            <div className=\"flex space-x-3\">\n              <Input\n                placeholder=\"Type your farming question...\"\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                className=\"flex-1\"\n                data-testid=\"input-message\"\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={!inputMessage.trim() || sendMessageMutation.isPending}\n                data-testid=\"button-send\"\n              >\n                <Send className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </Card>\n\n        {/* Quick suggestions */}\n        <div className=\"mt-6\">\n          <h3 className=\"font-semibold text-foreground mb-4\" data-testid=\"quick-help-title\">\n            {t(\"assistant.quickHelp\")}\n          </h3>\n          <div className=\"grid grid-cols-2 gap-3\">\n            {quickActions.map((action) => (\n              <Button\n                key={action.title}\n                variant=\"outline\"\n                className=\"h-auto p-4 text-left justify-start hover:shadow-md transition-shadow\"\n                onClick={() => handleQuickAction(action.message)}\n                data-testid={action.testId}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <action.icon className=\"h-5 w-5\" />\n                  <span className=\"font-medium\">{action.title}</span>\n                </div>\n              </Button>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8959},"client/src/pages/landing.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"wouter\";\nimport { Leaf, Camera, CloudSun, BarChart3, Users, ArrowRight, Sparkles, Zap, Star } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport LanguageToggle from \"@/components/language-toggle\";\n\nexport default function Landing() {\n  const { t } = useTranslation();\n\n  const features = [\n    {\n      icon: Camera,\n      title: t(\"features.cropDetection\"),\n      description: t(\"features.cropDetectionDesc\"),\n      gradient: \"from-emerald-500/20 to-teal-500/20\",\n      iconColor: \"text-emerald-400\",\n    },\n    {\n      icon: CloudSun,\n      title: t(\"features.weather\"),\n      description: t(\"features.weatherDesc\"),\n      gradient: \"from-blue-500/20 to-cyan-500/20\",\n      iconColor: \"text-blue-400\",\n    },\n    {\n      icon: BarChart3,\n      title: t(\"features.mandiPrices\"),\n      description: t(\"features.mandiPricesDesc\"),\n      gradient: \"from-amber-500/20 to-orange-500/20\",\n      iconColor: \"text-amber-400\",\n    },\n    {\n      icon: Users,\n      title: t(\"features.community\"),\n      description: t(\"features.communityDesc\"),\n      gradient: \"from-purple-500/20 to-pink-500/20\",\n      iconColor: \"text-purple-400\",\n    },\n  ];\n\n  // Create floating particles\n  const particles = Array.from({ length: 15 }, (_, i) => ({\n    id: i,\n    x: Math.random() * 100,\n    y: Math.random() * 100,\n    delay: Math.random() * 5,\n    duration: 3 + Math.random() * 4,\n  }));\n\n  return (\n    <div className=\"min-h-screen bg-background relative overflow-hidden\">\n      {/* Floating Particles Background */}\n      <div className=\"floating-particles\">\n        {particles.map((particle) => (\n          <motion.div\n            key={particle.id}\n            className=\"particle\"\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n            }}\n            animate={{\n              y: [0, -30, 0],\n              x: [0, 15, -15, 0],\n              opacity: [0.3, 1, 0.3],\n            }}\n            transition={{\n              duration: particle.duration,\n              delay: particle.delay,\n              repeat: Infinity,\n              ease: \"easeInOut\",\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Minimal Navigation */}\n      <nav className=\"absolute top-6 right-6 z-50\">\n        <motion.div\n          className=\"glass-dark rounded-2xl p-2\"\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n        >\n          <LanguageToggle />\n        </motion.div>\n      </nav>\n\n      {/* Centered Hero Section */}\n      <section className=\"min-h-screen flex items-center justify-center relative\">\n        {/* Background Glow */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 via-transparent to-accent/10\"></div>\n        <motion.div\n          className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-primary/20 rounded-full blur-3xl animate-morphing\"\n          initial={{ scale: 0, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          transition={{ duration: 2, delay: 0.5 }}\n        />\n        <motion.div\n          className=\"absolute bottom-1/4 right-1/4 w-64 h-64 bg-accent/20 rounded-full blur-3xl animate-morphing\"\n          initial={{ scale: 0, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          transition={{ duration: 2, delay: 1 }}\n        />\n\n        <div className=\"text-center z-10 max-w-4xl mx-auto px-6\">\n          {/* Company Logo & Name */}\n          <motion.div\n            className=\"mb-12\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.8, delay: 0.3 }}\n          >\n            <motion.div\n              className=\"w-24 h-24 bg-gradient-to-br from-primary to-accent rounded-3xl flex items-center justify-center mx-auto mb-6 premium-glow\"\n              whileHover={{ scale: 1.1, rotate: 5 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              <Leaf className=\"text-black text-4xl\" />\n            </motion.div>\n            \n            <motion.h1 \n              className=\"text-7xl lg:text-8xl font-bold text-glow gradient-text-primary mb-4\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.5 }}\n            >\n              FarmConnect\n            </motion.h1>\n            \n            <motion.p\n              className=\"text-xl text-muted-foreground mb-12\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.7 }}\n            >\n              AI-Powered Smart Farming Revolution\n            </motion.p>\n          </motion.div>\n\n          {/* Auth Buttons */}\n          <motion.div\n            className=\"flex flex-col sm:flex-row gap-6 justify-center mb-16\"\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.9 }}\n          >\n            <Link href=\"/auth\">\n              <motion.div\n                className=\"premium-card rounded-2xl p-8 hover-glow magnetic-hover group cursor-pointer\"\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.98 }}\n                data-testid=\"button-signup\"\n              >\n                <Sparkles className=\"w-8 h-8 text-primary mb-4 mx-auto group-hover:animate-spin\" />\n                <h3 className=\"text-2xl font-bold text-foreground mb-2\">Sign Up</h3>\n                <p className=\"text-muted-foreground\">Start your farming journey</p>\n              </motion.div>\n            </Link>\n\n            <Link href=\"/auth\">\n              <motion.div\n                className=\"premium-card rounded-2xl p-8 hover-glow magnetic-hover group cursor-pointer\"\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.98 }}\n                data-testid=\"button-login\"\n              >\n                <Zap className=\"w-8 h-8 text-accent mb-4 mx-auto group-hover:animate-pulse\" />\n                <h3 className=\"text-2xl font-bold text-foreground mb-2\">Log In</h3>\n                <p className=\"text-muted-foreground\">Continue your progress</p>\n              </motion.div>\n            </Link>\n          </motion.div>\n\n          {/* Quick Stats */}\n          <motion.div\n            className=\"grid grid-cols-3 gap-8 mb-16\"\n            initial={{ opacity: 0, y: 40 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 1.1 }}\n          >\n            {[\n              { value: \"50K+\", label: \"Active Farmers\" },\n              { value: \"98%\", label: \"AI Accuracy\" },\n              { value: \"24/7\", label: \"Support\" },\n            ].map((stat, index) => (\n              <motion.div\n                key={stat.label}\n                className=\"text-center\"\n                whileHover={{ scale: 1.1, y: -5 }}\n                transition={{ duration: 0.2 }}\n              >\n                <div className=\"text-3xl lg:text-4xl font-bold gradient-text-primary mb-2\">\n                  {stat.value}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n              </motion.div>\n            ))}\n          </motion.div>\n        </div>\n\n        {/* Floating Elements */}\n        <motion.div\n          className=\"absolute top-20 left-20 w-20 h-20 bg-primary/30 rounded-full flex items-center justify-center\"\n          animate={{ \n            y: [0, -20, 0],\n            rotate: [0, 180, 360]\n          }}\n          transition={{ duration: 8, repeat: Infinity, ease: \"easeInOut\" }}\n        >\n          <Camera className=\"text-primary text-2xl\" />\n        </motion.div>\n\n        <motion.div\n          className=\"absolute top-32 right-20 w-16 h-16 bg-accent/30 rounded-full flex items-center justify-center\"\n          animate={{ \n            y: [0, -15, 0],\n            x: [0, 10, 0],\n            rotate: [0, -180, -360]\n          }}\n          transition={{ duration: 6, repeat: Infinity, delay: 2, ease: \"easeInOut\" }}\n        >\n          <CloudSun className=\"text-accent text-xl\" />\n        </motion.div>\n\n        <motion.div\n          className=\"absolute bottom-32 left-32 w-18 h-18 bg-blue-500/30 rounded-full flex items-center justify-center\"\n          animate={{ \n            scale: [1, 1.2, 1],\n            rotate: [0, 360],\n            opacity: [0.7, 1, 0.7]\n          }}\n          transition={{ duration: 4, repeat: Infinity, delay: 1, ease: \"easeInOut\" }}\n        >\n          <BarChart3 className=\"text-blue-400 text-lg\" />\n        </motion.div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 relative\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8\">\n          <motion.div\n            className=\"text-center mb-20\"\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.8 }}\n          >\n            <h2 className=\"text-5xl lg:text-6xl font-bold gradient-text-primary mb-6\">\n              Premium Features\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Experience the future of farming with our AI-powered tools designed for modern farmers\n            </p>\n          </motion.div>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {features.map((feature, index) => (\n              <motion.div\n                key={feature.title}\n                className=\"premium-card rounded-3xl p-8 hover-glow group relative overflow-hidden\"\n                initial={{ opacity: 0, y: 50 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ duration: 0.8, delay: index * 0.2 }}\n                data-testid={`feature-card-${index}`}\n              >\n                {/* Background Gradient */}\n                <div className={`absolute inset-0 bg-gradient-to-br ${feature.gradient} opacity-50`} />\n                \n                <div className=\"relative z-10\">\n                  <motion.div\n                    className=\"w-16 h-16 bg-black/20 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300\"\n                    whileHover={{ rotate: 15 }}\n                  >\n                    <feature.icon className={`${feature.iconColor} text-2xl`} />\n                  </motion.div>\n                  \n                  <h3 className=\"text-2xl font-bold text-foreground mb-4\" data-testid={`feature-title-${index}`}>\n                    {feature.title}\n                  </h3>\n                  \n                  <p className=\"text-muted-foreground text-lg leading-relaxed\" data-testid={`feature-description-${index}`}>\n                    {feature.description}\n                  </p>\n\n                  <motion.div\n                    className=\"absolute top-4 right-4\"\n                    animate={{ rotate: [0, 360] }}\n                    transition={{ duration: 4, repeat: Infinity, ease: \"linear\" }}\n                  >\n                    <Star className=\"w-6 h-6 text-primary/30\" />\n                  </motion.div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":11475},"client/src/pages/mandi-prices.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, TrendingUp, TrendingDown, Minus, Bell, Search, MapPin, Loader2, RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport PriceAlertsDialog from \"@/components/price-alerts-dialog\";\n\ninterface MandiPrice {\n  id: string;\n  market: string;\n  state: string;\n  commodity: string;\n  variety?: string | null;\n  grade: string;\n  minPrice?: string | null;\n  maxPrice?: string | null;\n  modalPrice?: string | null;\n  priceUnit: string;\n  reportDate: Date;\n  createdAt: Date;\n}\n\nexport default function MandiPrices() {\n  const { t } = useTranslation();\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const [selectedMarket, setSelectedMarket] = useState<string>(\"mumbai\");\n  const [selectedDate, setSelectedDate] = useState<string>(new Date().toISOString().split('T')[0]);\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n\n  const { data: mandiPrices, isLoading, refetch } = useQuery<MandiPrice[]>({\n    queryKey: [\"/api/mandi/prices\", selectedMarket, selectedDate],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedMarket) params.append('market', selectedMarket);\n      if (selectedDate) params.append('date', selectedDate);\n      \n      const response = await fetch(`/api/mandi/prices?${params.toString()}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch mandi prices');\n      }\n      return response.json();\n    },\n  });\n\n  const formatPrice = (price: string | number | null | undefined) => {\n    if (!price) return 'N/A';\n    const numPrice = typeof price === 'string' ? parseFloat(price) : price;\n    if (isNaN(numPrice)) return 'N/A';\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(numPrice);\n  };\n\n  const popularCrops = [\n    \"Rice\", \"Wheat\", \"Sugarcane\", \"Cotton\", \"Jowar\", \"Bajra\", \n    \"Maize\", \"Tur\", \"Gram\", \"Masoor\", \"Moong\", \"Urad\",\n    \"Groundnut\", \"Sunflower\", \"Soybean\", \"Rapeseed\", \"Sesame\",\n    \"Onion\", \"Potato\", \"Tomato\", \"Chilli\", \"Turmeric\", \"Coriander\"\n  ];\n\n  const indianMarkets = [\n    { value: \"mumbai\", label: \"Mumbai APMC\", state: \"Maharashtra\" },\n    { value: \"delhi\", label: \"Delhi Market\", state: \"Delhi\" },\n    { value: \"pune\", label: \"Pune Market\", state: \"Maharashtra\" },\n    { value: \"nashik\", label: \"Nashik Market\", state: \"Maharashtra\" },\n    { value: \"sangli\", label: \"Sangli Market\", state: \"Maharashtra\" },\n    { value: \"kolkata\", label: \"Kolkata Market\", state: \"West Bengal\" },\n    { value: \"chennai\", label: \"Chennai Market\", state: \"Tamil Nadu\" },\n    { value: \"bangalore\", label: \"Bangalore Market\", state: \"Karnataka\" },\n    { value: \"hyderabad\", label: \"Hyderabad Market\", state: \"Telangana\" },\n    { value: \"ahmedabad\", label: \"Ahmedabad Market\", state: \"Gujarat\" },\n  ];\n\n  const getLocationBasedMarkets = () => {\n    const userLocation = user?.location?.toLowerCase() || \"\";\n    const nearbyMarkets = indianMarkets.filter(market => \n      userLocation.includes(market.state.toLowerCase()) ||\n      userLocation.includes(market.label.toLowerCase().split(' ')[0])\n    );\n    return nearbyMarkets.length > 0 ? nearbyMarkets : indianMarkets;\n  };\n\n  const filteredPrices = mandiPrices?.filter(price => \n    searchQuery === \"\" || \n    price.commodity.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (price.variety && price.variety.toLowerCase().includes(searchQuery.toLowerCase()))\n  ) || [];\n\n  const getCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      toast({\n        title: \"Location Error\",\n        description: \"Geolocation is not supported by this browser.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsGettingLocation(true);\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        try {\n          const { latitude, longitude } = position.coords;\n          // Find nearest market based on coordinates (simplified logic)\n          const nearestMarket = findNearestMarket(latitude, longitude);\n          setSelectedMarket(nearestMarket);\n          setIsGettingLocation(false);\n          toast({\n            title: \"Location Updated\",\n            description: `Switched to nearest market: ${indianMarkets.find(m => m.value === nearestMarket)?.label}`,\n          });\n        } catch (error) {\n          setIsGettingLocation(false);\n          toast({\n            title: \"Location Error\",\n            description: \"Failed to get your location. Please try again.\",\n            variant: \"destructive\",\n          });\n        }\n      },\n      (error) => {\n        setIsGettingLocation(false);\n        toast({\n          title: \"Location Error\",\n          description: \"Failed to access location. Please select a market manually.\",\n          variant: \"destructive\",\n        });\n      }\n    );\n  };\n\n  const findNearestMarket = (lat: number, lng: number): string => {\n    // Simplified nearest market logic based on major city coordinates\n    const marketCoords: { [key: string]: [number, number] } = {\n      mumbai: [19.0760, 72.8777],\n      delhi: [28.6139, 77.2090],\n      pune: [18.5204, 73.8567],\n      nashik: [19.9975, 73.7898],\n      kolkata: [22.5726, 88.3639],\n      chennai: [13.0827, 80.2707],\n      bangalore: [12.9716, 77.5946],\n      hyderabad: [17.3850, 78.4867],\n    };\n\n    let nearest = \"mumbai\";\n    let minDistance = Infinity;\n\n    Object.entries(marketCoords).forEach(([market, [mlat, mlng]]) => {\n      const distance = Math.sqrt(Math.pow(lat - mlat, 2) + Math.pow(lng - mlng, 2));\n      if (distance < minDistance) {\n        minDistance = distance;\n        nearest = market;\n      }\n    });\n\n    return nearest;\n  };\n\n  const getPriceIcon = (change: number) => {\n    if (change > 0) return <TrendingUp className=\"h-4 w-4 text-green-600\" />;\n    if (change < 0) return <TrendingDown className=\"h-4 w-4 text-red-600\" />;\n    return <Minus className=\"h-4 w-4 text-muted-foreground\" />;\n  };\n\n  const getPriceColor = (change: number) => {\n    if (change > 0) return \"text-green-600\";\n    if (change < 0) return \"text-red-600\";\n    return \"text-muted-foreground\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted/30 pb-20 relative overflow-hidden\">\n      {/* Animated Background Elements */}\n      <motion.div \n        className=\"absolute inset-0 pointer-events-none\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 2 }}\n      >\n        <motion.div className=\"absolute top-32 right-20 w-72 h-72 bg-gradient-to-br from-amber-500/10 to-orange-500/10 rounded-full blur-3xl\" animate={{ scale: [1, 1.1, 1], opacity: [0.3, 0.6, 0.3] }} transition={{ duration: 4, repeat: Infinity }} />\n        <motion.div className=\"absolute bottom-32 left-16 w-64 h-64 bg-gradient-to-br from-emerald-500/10 to-teal-500/10 rounded-full blur-3xl\" animate={{ scale: [1, 1.15, 1], opacity: [0.4, 0.7, 0.4] }} transition={{ duration: 3, repeat: Infinity, delay: 1.5 }} />\n        <motion.div className=\"absolute top-1/3 left-1/4 w-40 h-40 bg-gradient-to-br from-blue-500/10 to-cyan-500/10 rounded-full blur-2xl\" animate={{ scale: [1, 1.2, 1], opacity: [0.2, 0.5, 0.2] }} transition={{ duration: 5, repeat: Infinity, delay: 3 }} />\n      </motion.div>\n\n      {/* Header */}\n      <motion.header \n        className=\"bg-gradient-to-r from-primary/5 via-primary/10 to-accent/5 border-b border-border/50 backdrop-blur-sm p-6 flex items-center relative z-10\" \n        data-testid=\"mandi-prices-header\"\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setLocation(\"/dashboard\")}\n          className=\"mr-4\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n          {t(\"mandi.title\", \"Mandi Prices\")}\n        </h1>\n      </motion.header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Enhanced Filters */}\n        <Card data-testid=\"filters-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Search className=\"h-5 w-5 mr-2\" />\n              Market & Crop Filters\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Location controls */}\n            <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n              <div className=\"flex items-center\">\n                <MapPin className=\"h-4 w-4 text-muted-foreground mr-2\" />\n                <span className=\"text-sm font-medium\">Current Market</span>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={getCurrentLocation}\n                disabled={isGettingLocation}\n                data-testid=\"button-get-nearest-mandi\"\n              >\n                {isGettingLocation ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <MapPin className=\"h-4 w-4\" />\n                )}\n                <span className=\"ml-2\">\n                  {isGettingLocation ? \"Finding...\" : \"Use Nearest Mandi\"}\n                </span>\n              </Button>\n            </div>\n\n            <div className=\"grid md:grid-cols-3 gap-4\">\n              <div>\n                <Label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Select Market\n                </Label>\n                <Select value={selectedMarket} onValueChange={setSelectedMarket} data-testid=\"select-market\">\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select market\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {getLocationBasedMarkets().map((market) => (\n                      <SelectItem key={market.value} value={market.value}>\n                        {market.label} ({market.state})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Select Date\n                </Label>\n                <Input\n                  type=\"date\"\n                  value={selectedDate}\n                  onChange={(e) => setSelectedDate(e.target.value)}\n                  data-testid=\"input-date\"\n                />\n              </div>\n              <div>\n                <Label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Search Crops\n                </Label>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search crops...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-crops\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Quick crop filters */}\n            <div>\n              <Label className=\"block text-sm font-medium text-foreground mb-2\">\n                Popular Crops\n              </Label>\n              <div className=\"flex flex-wrap gap-2\">\n                {popularCrops.slice(0, 8).map((crop) => (\n                  <Button\n                    key={crop}\n                    variant={searchQuery.toLowerCase() === crop.toLowerCase() ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSearchQuery(searchQuery === crop ? \"\" : crop)}\n                    data-testid={`button-crop-${crop.toLowerCase()}`}\n                  >\n                    {crop}\n                  </Button>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <p className=\"text-sm text-muted-foreground\">\n                Showing prices for {indianMarkets.find(m => m.value === selectedMarket)?.label || selectedMarket}\n              </p>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => refetch()}\n                disabled={isLoading}\n                data-testid=\"button-refresh-prices\"\n              >\n                <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n                <span className=\"ml-2\">Refresh</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Price cards */}\n        <div className=\"space-y-4\">\n          {isLoading ? (\n            // Loading skeleton\n            Array.from({ length: 4 }).map((_, index) => (\n              <Card key={index} data-testid={`price-skeleton-${index}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"animate-pulse\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-12 h-12 bg-muted rounded-xl mr-4\"></div>\n                        <div>\n                          <div className=\"h-4 bg-muted rounded w-24 mb-2\"></div>\n                          <div className=\"h-3 bg-muted rounded w-16\"></div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"h-6 bg-muted rounded w-20 mb-1\"></div>\n                        <div className=\"h-3 bg-muted rounded w-16\"></div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : filteredPrices && filteredPrices.length > 0 ? (\n            filteredPrices.map((price: MandiPrice, index: number) => (\n              <motion.div\n                key={price.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card data-testid={`price-card-${index}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-12 h-12 bg-primary/10 rounded-xl flex items-center justify-center mr-4\">\n                          <span className=\"text-2xl\">üåæ</span>\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-foreground\" data-testid={`price-commodity-${index}`}>\n                            {price.commodity} {price.variety && `(${price.variety})`}\n                          </h3>\n                          <p className=\"text-muted-foreground text-sm\" data-testid={`price-grade-${index}`}>\n                            {price.grade || \"Grade A Quality\"}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-foreground\" data-testid={`price-amount-${index}`}>\n                          {formatPrice(price.modalPrice || price.maxPrice)}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\" data-testid={`price-unit-${index}`}>\n                          {price.priceUnit}\n                        </div>\n                        {price.minPrice && price.maxPrice && (\n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            Range: {formatPrice(price.minPrice)} - {formatPrice(price.maxPrice)}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between mt-4\">\n                      <div className={`flex items-center ${getPriceColor(0)}`} data-testid={`price-change-${index}`}>\n                        {getPriceIcon(0)}\n                        <span className=\"text-sm font-medium ml-1\">\n                          No change today\n                        </span>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\" data-testid={`price-updated-${index}`}>\n                        Updated {new Date(price.reportDate).toLocaleDateString()}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))\n          ) : (\n            // Empty state\n            <Card data-testid=\"empty-state\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-6xl mb-4\">üìä</div>\n                <h3 className=\"text-lg font-semibold mb-2\">\n                  {searchQuery ? `No crops found for \"${searchQuery}\"` : \"No Price Data Available\"}\n                </h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  {searchQuery \n                    ? \"Try searching for different crops or clear the search to see all available prices.\"\n                    : \"Price data for the selected market and date is not available.\"}\n                </p>\n                {searchQuery && (\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setSearchQuery(\"\")}\n                    data-testid=\"button-clear-search\"\n                  >\n                    Clear Search\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Search Results Summary */}\n          {searchQuery && filteredPrices.length > 0 && (\n            <Card className=\"bg-muted/50\">\n              <CardContent className=\"p-4\">\n                <p className=\"text-sm text-muted-foreground text-center\">\n                  Found {filteredPrices.length} result(s) for \"{searchQuery}\"\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Price alerts and tips */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <Card className=\"bg-accent/10 border-accent/20\" data-testid=\"price-alerts-card\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center mb-4\">\n                <Bell className=\"text-accent mr-3 h-5 w-5\" />\n                <h3 className=\"font-semibold text-foreground\" data-testid=\"price-alerts-title\">\n                  Price Alerts\n                </h3>\n              </div>\n              <p className=\"text-muted-foreground text-sm mb-4\" data-testid=\"price-alerts-description\">\n                Get notified when crop prices reach your target in nearby mandis.\n              </p>\n              <PriceAlertsDialog />\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-primary/10 border-primary/20\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center mb-4\">\n                <TrendingUp className=\"text-primary mr-3 h-5 w-5\" />\n                <h3 className=\"font-semibold text-foreground\">\n                  Market Tips\n                </h3>\n              </div>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>‚Ä¢ Check multiple markets for best prices</p>\n                <p>‚Ä¢ Morning rates are usually more stable</p>\n                <p>‚Ä¢ Consider transportation costs to nearby mandis</p>\n                <p>‚Ä¢ Weather affects price fluctuations</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20727},"client/src/pages/marketplace.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Plus, MapPin } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst categories = [\n  { id: \"all\", label: \"marketplace.all\" },\n  { id: \"seeds\", label: \"marketplace.seeds\" },\n  { id: \"fertilizers\", label: \"marketplace.fertilizers\" },\n  { id: \"tools\", label: \"marketplace.tools\" },\n  { id: \"produce\", label: \"marketplace.produce\" },\n];\n\nexport default function Marketplace() {\n  const { t } = useTranslation();\n  const [, setLocation] = useLocation();\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  const { data: marketplaceItems, isLoading } = useQuery({\n    queryKey: [\"/api/marketplace/items\", selectedCategory],\n  });\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"seeds\": return \"bg-primary/10 text-primary\";\n      case \"fertilizers\": return \"bg-accent/10 text-accent\";\n      case \"tools\": return \"bg-blue-500/10 text-blue-500\";\n      case \"produce\": return \"bg-green-500/10 text-green-500\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-6 flex items-center\" data-testid=\"marketplace-header\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setLocation(\"/dashboard\")}\n          className=\"mr-4\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-xl font-semibold flex-1\" data-testid=\"page-title\">\n          {t(\"marketplace.title\")}\n        </h1>\n        <Button size=\"icon\" data-testid=\"button-sell-product\">\n          <Plus className=\"h-5 w-5\" />\n        </Button>\n      </header>\n\n      <div className=\"p-6\">\n        {/* Category tabs */}\n        <div className=\"flex space-x-2 mb-6 overflow-x-auto\" data-testid=\"category-tabs\">\n          {categories.map((category) => (\n            <Button\n              key={category.id}\n              variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n              className=\"whitespace-nowrap\"\n              onClick={() => setSelectedCategory(category.id)}\n              data-testid={`category-${category.id}`}\n            >\n              {t(category.label)}\n            </Button>\n          ))}\n        </div>\n\n        {/* Marketplace listings */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {isLoading ? (\n            // Loading skeleton\n            Array.from({ length: 4 }).map((_, index) => (\n              <Card key={index} data-testid={`item-skeleton-${index}`}>\n                <div className=\"animate-pulse\">\n                  <div className=\"w-full h-48 bg-muted\"></div>\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2 mb-4\"></div>\n                    <div className=\"h-6 bg-muted rounded w-1/3 mb-4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-full\"></div>\n                  </CardContent>\n                </div>\n              </Card>\n            ))\n          ) : marketplaceItems && marketplaceItems.length > 0 ? (\n            marketplaceItems.map((item: any, index: number) => (\n              <motion.div\n                key={item.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className=\"overflow-hidden hover:shadow-lg transition-shadow\" data-testid={`item-${item.id}`}>\n                  {item.images && item.images.length > 0 ? (\n                    <img \n                      src={item.images[0]} \n                      alt={item.title}\n                      className=\"w-full h-48 object-cover\"\n                      data-testid={`item-image-${item.id}`}\n                    />\n                  ) : (\n                    <div className=\"w-full h-48 bg-muted flex items-center justify-center\">\n                      <span className=\"text-4xl\">üì¶</span>\n                    </div>\n                  )}\n                  \n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"font-semibold text-foreground\" data-testid={`item-title-${item.id}`}>\n                        {item.title}\n                      </h3>\n                      <Badge className={getCategoryColor(item.category)} data-testid={`item-category-${item.id}`}>\n                        {item.category}\n                      </Badge>\n                    </div>\n                    <p className=\"text-muted-foreground text-sm mb-4\" data-testid={`item-description-${item.id}`}>\n                      {item.description}\n                    </p>\n                    \n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"text-2xl font-bold text-foreground\" data-testid={`item-price-${item.id}`}>\n                        {formatPrice(parseFloat(item.price))}\n                        {item.priceUnit && item.priceUnit !== \"per unit\" && (\n                          <span className=\"text-sm font-normal text-muted-foreground\">\n                            /{item.priceUnit.replace(\"per \", \"\")}\n                          </span>\n                        )}\n                      </div>\n                      {item.quantity && (\n                        <div className=\"text-sm text-muted-foreground\" data-testid={`item-quantity-${item.id}`}>\n                          {item.quantity} {item.quantityUnit} available\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center text-muted-foreground text-sm\" data-testid={`item-location-${item.id}`}>\n                        <MapPin className=\"h-4 w-4 mr-2\" />\n                        <span>{item.location || \"Location not specified\"}</span>\n                      </div>\n                      <Button data-testid={`button-contact-${item.id}`}>\n                        {t(\"marketplace.contact\")}\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))\n          ) : (\n            // Empty state\n            <div className=\"col-span-full\">\n              <Card data-testid=\"empty-state\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-6xl mb-4\">üè™</div>\n                  <h3 className=\"text-lg font-semibold mb-2\">No Items Available</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {selectedCategory === \"all\" \n                      ? \"No items are currently listed in the marketplace.\"\n                      : `No items available in the ${selectedCategory} category.`\n                    }\n                  </p>\n                  <Button data-testid=\"button-sell-first-item\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    List Your First Item\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7984},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/onboarding.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { Loader2, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/lib/auth\";\n\nconst crops = [\n  { id: \"rice\", name: \"Rice\" },\n  { id: \"wheat\", name: \"Wheat\" },\n  { id: \"cotton\", name: \"Cotton\" },\n  { id: \"sugarcane\", name: \"Sugarcane\" },\n  { id: \"maize\", name: \"Maize\" },\n  { id: \"others\", name: \"Others\" },\n];\n\nexport default function Onboarding() {\n  const { t, i18n } = useTranslation();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user, updateUser } = useAuth();\n  \n  const [formData, setFormData] = useState({\n    name: user?.name || \"\",\n    age: user?.age || \"\",\n    location: user?.location || \"\",\n    farmSize: user?.farmSize || \"\",\n    primaryCrops: user?.primaryCrops || [],\n    language: user?.language || \"en\",\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async (userData: typeof formData) => {\n      const response = await apiRequest(\"PUT\", \"/api/user/profile\", userData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      updateUser(data.user);\n      // Update language immediately\n      i18n.changeLanguage(data.user.language);\n      setLocation(\"/dashboard\");\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been successfully completed!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter your name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateUserMutation.mutate(formData);\n  };\n\n  const handleCropToggle = (cropId: string) => {\n    setFormData(prev => ({\n      ...prev,\n      primaryCrops: prev.primaryCrops.includes(cropId)\n        ? prev.primaryCrops.filter(id => id !== cropId)\n        : [...prev.primaryCrops, cropId]\n    }));\n  };\n\n  return (\n    <section className=\"min-h-screen bg-background p-6\">\n      <motion.div\n        className=\"max-w-2xl mx-auto\"\n        initial={{ opacity: 0, y: 50 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <Card className=\"shadow-xl border border-border\" data-testid=\"onboarding-card\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center mb-8\">\n              <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <User className=\"text-white text-2xl\" />\n              </div>\n              <h2 className=\"text-3xl font-bold text-foreground mb-2\" data-testid=\"onboarding-title\">\n                {t(\"onboarding.title\")}\n              </h2>\n              <p className=\"text-muted-foreground\" data-testid=\"onboarding-subtitle\">\n                {t(\"onboarding.subtitle\")}\n              </p>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"onboarding-form\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <Label htmlFor=\"name\" className=\"block text-sm font-medium text-foreground mb-2\">\n                    {t(\"onboarding.name\")}\n                  </Label>\n                  <Input\n                    id=\"name\"\n                    type=\"text\"\n                    placeholder=\"Enter your name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    data-testid=\"input-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"age\" className=\"block text-sm font-medium text-foreground mb-2\">\n                    {t(\"onboarding.age\")}\n                  </Label>\n                  <Input\n                    id=\"age\"\n                    type=\"number\"\n                    placeholder=\"25\"\n                    value={formData.age}\n                    onChange={(e) => setFormData(prev => ({ ...prev, age: e.target.value }))}\n                    data-testid=\"input-age\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"location\" className=\"block text-sm font-medium text-foreground mb-2\">\n                  {t(\"onboarding.location\")}\n                </Label>\n                <Input\n                  id=\"location\"\n                  type=\"text\"\n                  placeholder=\"Village, District, State\"\n                  value={formData.location}\n                  onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}\n                  data-testid=\"input-location\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"farmSize\" className=\"block text-sm font-medium text-foreground mb-2\">\n                  {t(\"onboarding.farmSize\")}\n                </Label>\n                <Input\n                  id=\"farmSize\"\n                  type=\"number\"\n                  placeholder=\"5\"\n                  value={formData.farmSize}\n                  onChange={(e) => setFormData(prev => ({ ...prev, farmSize: e.target.value }))}\n                  data-testid=\"input-farm-size\"\n                />\n              </div>\n\n              <div>\n                <Label className=\"block text-sm font-medium text-foreground mb-2\">\n                  {t(\"onboarding.crops\")}\n                </Label>\n                <div className=\"grid grid-cols-3 gap-3\" data-testid=\"crops-selection\">\n                  {crops.map((crop) => (\n                    <label \n                      key={crop.id}\n                      className=\"flex items-center p-3 border border-input rounded-lg hover:bg-muted cursor-pointer\"\n                      data-testid={`crop-option-${crop.id}`}\n                    >\n                      <Checkbox\n                        checked={formData.primaryCrops.includes(crop.id)}\n                        onCheckedChange={() => handleCropToggle(crop.id)}\n                        className=\"mr-3\"\n                      />\n                      <span className=\"text-sm\">{crop.name}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"block text-sm font-medium text-foreground mb-2\">\n                  {t(\"onboarding.language\")}\n                </Label>\n                <Select \n                  value={formData.language} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, language: value }))}\n                  data-testid=\"select-language\"\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select language\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"en\">English</SelectItem>\n                    <SelectItem value=\"hi\">‡§π‡§ø‡§Ç‡§¶‡•Ä</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full py-4 text-lg font-semibold\"\n                disabled={updateUserMutation.isPending}\n                data-testid=\"button-complete-setup\"\n              >\n                {updateUserMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Setting up...\n                  </>\n                ) : (\n                  t(\"onboarding.complete\")\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </section>\n  );\n}\n","size_bytes":8415},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg text-sm font-medium ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 active:scale-[0.98] transform\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 shadow-sm hover:shadow-md\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-sm hover:shadow-md\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground shadow-sm hover:shadow-md\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80 shadow-sm hover:shadow-md\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-lg px-3\",\n        lg: \"h-12 rounded-xl px-8 text-base\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2055},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/types/session.ts":{"content":"declare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n    phone?: string;\n    otpSent?: boolean;\n    authenticated?: boolean;\n  }\n}","size_bytes":159},"client/src/pages/government-schemes.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { \n  ArrowLeft, \n  ExternalLink, \n  IndianRupee, \n  Users, \n  Tractor, \n  Leaf,\n  Shield,\n  Award,\n  Search,\n  Filter\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface Scheme {\n  id: string;\n  name: string;\n  description: string;\n  benefits: string;\n  eligibility: string;\n  category: string;\n  amount: string;\n  icon: any;\n  applyLink: string;\n}\n\nconst schemes: Scheme[] = [\n  {\n    id: \"pmkisan\",\n    name: \"PM-KISAN\",\n    description: \"Direct income support to farmers families\",\n    benefits: \"‚Çπ6,000 per year in three equal installments\",\n    eligibility: \"Small and marginal farmers with cultivable land\",\n    category: \"Financial Support\",\n    amount: \"‚Çπ6,000/year\",\n    icon: IndianRupee,\n    applyLink: \"https://pmkisan.gov.in/\"\n  },\n  {\n    id: \"pmfby\",\n    name: \"Pradhan Mantri Fasal Bima Yojana\",\n    description: \"Crop insurance scheme for farmers\",\n    benefits: \"Insurance coverage against crop loss due to natural disasters\",\n    eligibility: \"All farmers growing notified crops in notified areas\",\n    category: \"Insurance\",\n    amount: \"Based on sum insured\",\n    icon: Shield,\n    applyLink: \"https://pmfby.gov.in/\"\n  },\n  {\n    id: \"kcc\",\n    name: \"Kisan Credit Card\",\n    description: \"Credit support for agricultural and allied activities\",\n    benefits: \"Easy access to credit at subsidized interest rates\",\n    eligibility: \"All farmers including tenant farmers, oral lessees\",\n    category: \"Credit\",\n    amount: \"Based on crop area & type\",\n    icon: Award,\n    applyLink: \"https://www.india.gov.in/spotlight/kisan-credit-card-kcc-scheme\"\n  },\n  {\n    id: \"pmksny\",\n    name: \"PM Kisan Samman Nidhi Yojana\",\n    description: \"Income support scheme for farmer families\",\n    benefits: \"Direct benefit transfer to bank accounts\",\n    eligibility: \"Small and marginal farmer families\",\n    category: \"Financial Support\",\n    amount: \"‚Çπ6,000/year\",\n    icon: Users,\n    applyLink: \"https://pmkisan.gov.in/\"\n  },\n  {\n    id: \"mssp\",\n    name: \"Minimum Support Price\",\n    description: \"Price support mechanism for agricultural products\",\n    benefits: \"Guaranteed minimum price for crops\",\n    eligibility: \"Farmers selling notified crops\",\n    category: \"Price Support\",\n    amount: \"Varies by crop\",\n    icon: Leaf,\n    applyLink: \"https://cacp.dacnet.nic.in/\"\n  },\n  {\n    id: \"smam\",\n    name: \"Sub-Mission on Agricultural Mechanization\",\n    description: \"Financial assistance for farm equipment\",\n    benefits: \"Subsidy on purchase of farm machinery\",\n    eligibility: \"Individual farmers and farmer groups\",\n    category: \"Equipment\",\n    amount: \"Up to 50% subsidy\",\n    icon: Tractor,\n    applyLink: \"https://agrimachinery.nic.in/\"\n  }\n];\n\nconst categories = [\"All\", \"Financial Support\", \"Insurance\", \"Credit\", \"Price Support\", \"Equipment\"];\n\nexport default function GovernmentSchemes() {\n  const { t } = useTranslation();\n  const [, setLocation] = useLocation();\n  \n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\n\n  const filteredSchemes = schemes.filter(scheme => {\n    const matchesSearch = scheme.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         scheme.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"All\" || scheme.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const getCategoryColor = (category: string) => {\n    const colors = {\n      \"Financial Support\": \"bg-green-500/10 text-green-600 border-green-200\",\n      \"Insurance\": \"bg-blue-500/10 text-blue-600 border-blue-200\",\n      \"Credit\": \"bg-purple-500/10 text-purple-600 border-purple-200\",\n      \"Price Support\": \"bg-orange-500/10 text-orange-600 border-orange-200\",\n      \"Equipment\": \"bg-indigo-500/10 text-indigo-600 border-indigo-200\"\n    };\n    return colors[category as keyof typeof colors] || \"bg-gray-500/10 text-gray-600 border-gray-200\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-emerald-50 to-teal-50 p-4 pb-20\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6 pt-4\">\n        <Button \n          variant=\"ghost\" \n          size=\"icon\"\n          onClick={() => setLocation(\"/dashboard\")}\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-2xl font-bold text-center flex-1\" data-testid=\"schemes-title\">\n          Government Schemes\n        </h1>\n        <div className=\"w-10\"></div>\n      </div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n        className=\"max-w-4xl mx-auto space-y-6\"\n      >\n        {/* Search and Filter */}\n        <Card className=\"glass-enhanced shadow-lg border border-white/20\" data-testid=\"search-filter-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search schemes...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"search-schemes\"\n                />\n              </div>\n              <div className=\"relative\">\n                <Filter className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground z-10\" />\n                <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                  <SelectTrigger className=\"w-full sm:w-48 pl-10\" data-testid=\"filter-category\">\n                    <SelectValue placeholder=\"Filter by category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Schemes Grid */}\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {filteredSchemes.map((scheme, index) => (\n            <motion.div\n              key={scheme.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.4, delay: index * 0.1 }}\n            >\n              <Card \n                className=\"glass-enhanced shadow-lg border border-white/20 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 h-full\" \n                data-testid={`scheme-${scheme.id}`}\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-xl flex items-center justify-center\">\n                      <scheme.icon className=\"h-6 w-6 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg font-bold text-gray-900 mb-2\" data-testid={`scheme-name-${scheme.id}`}>\n                        {scheme.name}\n                      </CardTitle>\n                      <Badge \n                        variant=\"outline\" \n                        className={getCategoryColor(scheme.category)}\n                        data-testid={`scheme-category-${scheme.id}`}\n                      >\n                        {scheme.category}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-sm text-gray-600\" data-testid={`scheme-description-${scheme.id}`}>\n                    {scheme.description}\n                  </p>\n                  \n                  <div className=\"space-y-2\">\n                    <div>\n                      <p className=\"text-xs font-semibold text-gray-700 mb-1\">Benefits:</p>\n                      <p className=\"text-sm text-gray-600\" data-testid={`scheme-benefits-${scheme.id}`}>\n                        {scheme.benefits}\n                      </p>\n                    </div>\n                    \n                    <div>\n                      <p className=\"text-xs font-semibold text-gray-700 mb-1\">Amount:</p>\n                      <p className=\"text-sm font-bold text-emerald-600\" data-testid={`scheme-amount-${scheme.id}`}>\n                        {scheme.amount}\n                      </p>\n                    </div>\n                    \n                    <div>\n                      <p className=\"text-xs font-semibold text-gray-700 mb-1\">Eligibility:</p>\n                      <p className=\"text-xs text-gray-600\" data-testid={`scheme-eligibility-${scheme.id}`}>\n                        {scheme.eligibility}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <motion.div\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button \n                      className=\"w-full mt-4 bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 text-white shadow-md hover:shadow-lg transition-all duration-300 font-semibold\"\n                      onClick={() => {\n                        // Show a confirmation toast before redirect\n                        window.open(scheme.applyLink, '_blank');\n                      }}\n                      data-testid={`button-apply-${scheme.id}`}\n                    >\n                      <ExternalLink className=\"mr-2 h-4 w-4\" />\n                      Apply on Official Website\n                      <motion.div\n                        className=\"ml-2\"\n                        animate={{ x: [0, 3, 0] }}\n                        transition={{ duration: 1.5, repeat: Infinity }}\n                      >\n                        ‚Üí\n                      </motion.div>\n                    </Button>\n                  </motion.div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n\n        {filteredSchemes.length === 0 && (\n          <Card className=\"glass-enhanced shadow-lg border border-white/20\">\n            <CardContent className=\"p-8 text-center\">\n              <Search className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No schemes found</h3>\n              <p className=\"text-gray-600\">Try adjusting your search or filter criteria.</p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Disclaimer */}\n        <Card className=\"glass-enhanced shadow-lg border border-white/20 bg-blue-50/50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-start gap-3\">\n              <Shield className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n              <div>\n                <p className=\"text-sm font-semibold text-blue-900 mb-1\">Important Note</p>\n                <p className=\"text-xs text-blue-800\">\n                  Please verify eligibility criteria and application procedures on official government websites. \n                  Scheme details may change periodically.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":12187},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { \n  ArrowLeft, \n  User, \n  Phone, \n  Globe, \n  MapPin, \n  Camera, \n  Edit, \n  Save,\n  LogOut,\n  Settings\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Profile() {\n  const { t } = useTranslation();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user, updateUser, logout } = useAuth();\n  \n  const [isEditing, setIsEditing] = useState(false);\n  const [editForm, setEditForm] = useState({\n    name: user?.name || \"\",\n    farmSize: user?.farmSize || \"\",\n    location: user?.location || \"\",\n    primaryCrops: user?.primaryCrops || [],\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"PUT\", \"/api/user/profile\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      updateUser(data.user);\n      setIsEditing(false);\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveProfile = () => {\n    updateProfileMutation.mutate(editForm);\n  };\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/\");\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-lg text-muted-foreground\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-emerald-50 to-teal-50 p-4 pb-20\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6 pt-4\">\n        <Button \n          variant=\"ghost\" \n          size=\"icon\"\n          onClick={() => setLocation(\"/dashboard\")}\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-2xl font-bold text-center flex-1\" data-testid=\"profile-title\">\n          {t(\"profile.title\", \"Profile\")}\n        </h1>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\"\n          onClick={() => setIsEditing(!isEditing)}\n          data-testid=\"button-edit\"\n        >\n          {isEditing ? <Save className=\"h-5 w-5\" /> : <Edit className=\"h-5 w-5\" />}\n        </Button>\n      </div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n        className=\"max-w-md mx-auto space-y-6\"\n      >\n        {/* Profile Avatar & Basic Info */}\n        <Card className=\"glass-enhanced shadow-lg border border-white/20\" data-testid=\"profile-card\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center mb-6\">\n              <div className=\"relative\">\n                <Avatar className=\"w-24 h-24 mx-auto mb-4\" data-testid=\"profile-avatar\">\n                  <AvatarFallback className=\"bg-gradient-to-br from-emerald-500 to-teal-600 text-white text-2xl\">\n                    {user.name?.charAt(0).toUpperCase() || user.phone?.charAt(-2) || \"F\"}\n                  </AvatarFallback>\n                </Avatar>\n                {isEditing && (\n                  <Button\n                    size=\"icon\"\n                    variant=\"secondary\"\n                    className=\"absolute bottom-0 right-1/2 transform translate-x-1/2 translate-y-1/2\"\n                    data-testid=\"button-change-avatar\"\n                  >\n                    <Camera className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n              \n              {isEditing ? (\n                <div className=\"space-y-3\">\n                  <div>\n                    <Label htmlFor=\"name\" className=\"text-sm font-medium\">Name</Label>\n                    <Input\n                      id=\"name\"\n                      value={editForm.name}\n                      onChange={(e) => setEditForm(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"Enter your name\"\n                      data-testid=\"input-name\"\n                    />\n                  </div>\n                </div>\n              ) : (\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-2\" data-testid=\"profile-name\">\n                    {user.name || \"Farmer\"}\n                  </h2>\n                  <Badge variant=\"secondary\" className=\"mb-2\" data-testid=\"user-type\">\n                    <User className=\"w-3 h-3 mr-1\" />\n                    Farmer\n                  </Badge>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact Information */}\n        <Card className=\"glass-enhanced shadow-lg border border-white/20\" data-testid=\"contact-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Phone className=\"h-5 w-5\" />\n              Contact Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center gap-3\">\n              <Phone className=\"h-4 w-4 text-muted-foreground\" />\n              <span data-testid=\"profile-phone\">{user.phone}</span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Globe className=\"h-4 w-4 text-muted-foreground\" />\n              <span data-testid=\"profile-language\">\n                {user.language === 'hi' ? '‡§π‡§ø‡§Ç‡§¶‡•Ä' : 'English'}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Farm Information */}\n        <Card className=\"glass-enhanced shadow-lg border border-white/20\" data-testid=\"farm-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MapPin className=\"h-5 w-5\" />\n              Farm Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {isEditing ? (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"location\" className=\"text-sm font-medium\">Farm Location</Label>\n                  <Input\n                    id=\"location\"\n                    value={editForm.location}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, location: e.target.value }))}\n                    placeholder=\"Enter farm location\"\n                    data-testid=\"input-farm-location\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"farmSize\" className=\"text-sm font-medium\">Farm Size</Label>\n                  <Input\n                    id=\"farmSize\"\n                    value={editForm.farmSize}\n                    onChange={(e) => setEditForm(prev => ({ ...prev, farmSize: e.target.value }))}\n                    placeholder=\"e.g., 2 acres\"\n                    data-testid=\"input-farm-size\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-3\">\n                  <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                  <span data-testid=\"farm-location\">\n                    {user.location || \"Not specified\"}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <Settings className=\"h-4 w-4 text-muted-foreground\" />\n                  <span data-testid=\"farm-size\">\n                    {user.farmSize || \"Not specified\"}\n                  </span>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">Primary Crops:</p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {user.primaryCrops && user.primaryCrops.length > 0 ? (\n                      user.primaryCrops.map((crop, index) => (\n                        <Badge key={index} variant=\"outline\" data-testid={`crop-${index}`}>\n                          {crop}\n                        </Badge>\n                      ))\n                    ) : (\n                      <span className=\"text-sm text-muted-foreground\">Not specified</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"space-y-3\">\n          {isEditing && (\n            <Button \n              className=\"w-full font-bold text-lg py-6 bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300\"\n              onClick={handleSaveProfile}\n              disabled={updateProfileMutation.isPending}\n              data-testid=\"button-save-profile\"\n            >\n              {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          )}\n          \n          <Separator />\n          \n          <Button \n            variant=\"outline\" \n            className=\"w-full text-red-600 border-red-200 hover:bg-red-50\"\n            onClick={handleLogout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            Logout\n          </Button>\n        </div>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":10212},"client/src/pages/weather.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, CloudSun, Thermometer, Wind, Droplets, Eye, MapPin, Loader2, RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface WeatherData {\n  location: string;\n  temperature: number;\n  condition: string;\n  humidity: number;\n  windSpeed: number;\n  description: string;\n  icon: string;\n}\n\ninterface WeatherAlert {\n  type: \"info\" | \"warning\" | \"danger\";\n  message: string;\n}\n\nexport default function Weather() {\n  const { t } = useTranslation();\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n  const [currentLocation, setCurrentLocation] = useState<string>(\n    user?.location || \"Mumbai, Maharashtra\"\n  );\n\n  const { data: weather, isLoading, error, refetch } = useQuery<WeatherData>({\n    queryKey: [\"/api/weather/current\", currentLocation],\n    enabled: !!currentLocation,\n    refetchInterval: 5 * 60 * 1000, // Refetch every 5 minutes\n  });\n\n  const getCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      toast({\n        title: \"Location Error\",\n        description: \"Geolocation is not supported by this browser.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsGettingLocation(true);\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        try {\n          const { latitude, longitude } = position.coords;\n          const locationName = `${latitude},${longitude}`;\n          setCurrentLocation(locationName);\n          setIsGettingLocation(false);\n          toast({\n            title: \"Location Updated\",\n            description: \"Weather data updated for your current location.\",\n          });\n        } catch (error) {\n          setIsGettingLocation(false);\n          toast({\n            title: \"Location Error\",\n            description: \"Failed to get your location. Please try again.\",\n            variant: \"destructive\",\n          });\n        }\n      },\n      (error) => {\n        setIsGettingLocation(false);\n        let errorMessage = \"Failed to get your location.\";\n        \n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = \"Location access denied. Please allow location access and try again.\";\n            break;\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = \"Location information is unavailable.\";\n            break;\n          case error.TIMEOUT:\n            errorMessage = \"Location request timed out.\";\n            break;\n        }\n        \n        toast({\n          title: \"Location Error\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 300000, // Cache for 5 minutes\n      }\n    );\n  };\n\n  const getTemperatureColor = (temp: number) => {\n    if (temp <= 10) return \"text-blue-600\";\n    if (temp <= 25) return \"text-green-600\";\n    if (temp <= 35) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getWeatherAlerts = (weather: WeatherData): WeatherAlert[] => {\n    const alerts: WeatherAlert[] = [];\n    \n    if (weather.temperature > 35) {\n      alerts.push({\n        type: \"warning\",\n        message: \"High temperature warning. Ensure adequate water supply for crops and livestock.\",\n      });\n    }\n    \n    if (weather.temperature < 10) {\n      alerts.push({\n        type: \"warning\",\n        message: \"Cold weather alert. Protect sensitive crops from frost damage.\",\n      });\n    }\n    \n    if (weather.humidity > 80) {\n      alerts.push({\n        type: \"info\",\n        message: \"High humidity detected. Monitor crops for fungal diseases.\",\n      });\n    }\n    \n    if (weather.windSpeed > 30) {\n      alerts.push({\n        type: \"warning\",\n        message: \"Strong winds expected. Secure loose structures and protect young plants.\",\n      });\n    }\n    \n    if (weather.condition.toLowerCase().includes(\"rain\")) {\n      alerts.push({\n        type: \"info\",\n        message: \"Rain expected. Good for water-stressed crops but ensure proper drainage.\",\n      });\n    }\n    \n    return alerts;\n  };\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background pb-20\">\n        <header className=\"bg-card border-b border-border p-6 flex items-center\" data-testid=\"weather-header\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/dashboard\")}\n            className=\"mr-4\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n            {t(\"weather.title\", \"Weather\")}\n          </h1>\n        </header>\n        \n        <div className=\"p-6 flex items-center justify-center min-h-[400px]\">\n          <Card className=\"text-center\">\n            <CardContent className=\"p-6\">\n              <CloudSun className=\"mx-auto h-16 w-16 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Unable to load weather data</h3>\n              <p className=\"text-muted-foreground mb-4\">Please check your connection and try again.</p>\n              <Button onClick={() => refetch()} data-testid=\"button-retry\">\n                <RefreshCw className=\"mr-2 h-4 w-4\" />\n                Try Again\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-6 flex items-center\" data-testid=\"weather-header\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setLocation(\"/dashboard\")}\n          className=\"mr-4\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"h-5 w-5\" />\n        </Button>\n        <h1 className=\"text-xl font-semibold\" data-testid=\"page-title\">\n          {t(\"weather.title\", \"Weather\")}\n        </h1>\n        <div className=\"ml-auto\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => refetch()}\n            disabled={isLoading}\n            data-testid=\"button-refresh\"\n          >\n            <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\n          </Button>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Location Controls */}\n        <Card data-testid=\"location-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <MapPin className=\"h-5 w-5 text-muted-foreground mr-2\" />\n                <div>\n                  <p className=\"font-medium\" data-testid=\"current-location\">\n                    {weather?.location || currentLocation}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Current location</p>\n                </div>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={getCurrentLocation}\n                disabled={isGettingLocation}\n                data-testid=\"button-get-location\"\n              >\n                {isGettingLocation ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <MapPin className=\"h-4 w-4\" />\n                )}\n                <span className=\"ml-2\">\n                  {isGettingLocation ? \"Getting...\" : \"Use Current Location\"}\n                </span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Weather Card */}\n        {isLoading ? (\n          <Card data-testid=\"weather-loading\">\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-16 h-16 bg-muted rounded-full mr-6\"></div>\n                    <div>\n                      <div className=\"h-8 bg-muted rounded w-32 mb-2\"></div>\n                      <div className=\"h-4 bg-muted rounded w-24\"></div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"h-12 bg-muted rounded w-20 mb-2\"></div>\n                    <div className=\"h-4 bg-muted rounded w-16\"></div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ) : weather ? (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.4 }}\n          >\n            <Card data-testid=\"weather-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mr-6\">\n                      <CloudSun className=\"h-8 w-8 text-primary\" />\n                    </div>\n                    <div>\n                      <h2 className=\"text-2xl font-bold\" data-testid=\"weather-condition\">\n                        {weather.condition}\n                      </h2>\n                      <p className=\"text-muted-foreground\" data-testid=\"weather-description\">\n                        {weather.description}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className={`text-4xl font-bold ${getTemperatureColor(weather.temperature)}`} data-testid=\"weather-temperature\">\n                      {weather.temperature}¬∞C\n                    </p>\n                    <p className=\"text-muted-foreground text-sm\">Temperature</p>\n                  </div>\n                </div>\n\n                {/* Weather Details Grid */}\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"text-center\" data-testid=\"weather-humidity\">\n                    <Droplets className=\"h-6 w-6 text-blue-500 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-semibold\">{weather.humidity}%</p>\n                    <p className=\"text-sm text-muted-foreground\">Humidity</p>\n                  </div>\n                  <div className=\"text-center\" data-testid=\"weather-wind\">\n                    <Wind className=\"h-6 w-6 text-green-500 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-semibold\">{weather.windSpeed} km/h</p>\n                    <p className=\"text-sm text-muted-foreground\">Wind Speed</p>\n                  </div>\n                  <div className=\"text-center\" data-testid=\"weather-visibility\">\n                    <Eye className=\"h-6 w-6 text-purple-500 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-semibold\">Good</p>\n                    <p className=\"text-sm text-muted-foreground\">Visibility</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        ) : null}\n\n        {/* Weather Alerts */}\n        {weather && (\n          <div className=\"space-y-3\">\n            <h3 className=\"text-lg font-semibold\" data-testid=\"alerts-title\">\n              Farming Alerts\n            </h3>\n            {getWeatherAlerts(weather).map((alert, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.3, delay: index * 0.1 }}\n              >\n                <Card data-testid={`alert-${index}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start\">\n                      <Badge\n                        variant={alert.type === \"danger\" ? \"destructive\" : alert.type === \"warning\" ? \"default\" : \"secondary\"}\n                        className=\"mr-3 mt-0.5\"\n                      >\n                        {alert.type}\n                      </Badge>\n                      <p className=\"text-sm text-foreground flex-1\">{alert.message}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n            {getWeatherAlerts(weather).length === 0 && (\n              <Card data-testid=\"no-alerts\">\n                <CardContent className=\"p-4 text-center\">\n                  <p className=\"text-muted-foreground\">No weather alerts for your area.</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n\n        {/* Farming Recommendations */}\n        {weather && (\n          <Card data-testid=\"recommendations-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Thermometer className=\"h-5 w-5 mr-2\" />\n                Today's Farming Recommendations\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"p-3 bg-muted/50 rounded-lg\">\n                  <h4 className=\"font-medium mb-1\">Watering</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {weather.humidity > 70 \n                      ? \"High humidity - reduce watering frequency\"\n                      : weather.temperature > 30\n                      ? \"Hot weather - increase watering, preferably early morning or evening\"\n                      : \"Normal watering schedule recommended\"}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-muted/50 rounded-lg\">\n                  <h4 className=\"font-medium mb-1\">Field Work</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {weather.condition.toLowerCase().includes(\"rain\")\n                      ? \"Avoid field operations due to wet conditions\"\n                      : weather.windSpeed > 25\n                      ? \"Windy conditions - postpone spraying activities\"\n                      : \"Good conditions for normal farm operations\"}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-muted/50 rounded-lg\">\n                  <h4 className=\"font-medium mb-1\">Pest Management</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {weather.humidity > 80\n                      ? \"High humidity may increase fungal disease risk - monitor crops closely\"\n                      : weather.temperature > 35\n                      ? \"Hot weather may stress plants - watch for heat-related pest activity\"\n                      : \"Normal pest monitoring recommended\"}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":15490},"client/src/pages/ai-assistant.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { \n  ArrowLeft, \n  Send, \n  Mic, \n  MicOff, \n  Sparkles, \n  MessageCircle,\n  Loader2,\n  User,\n  Bot,\n  Leaf,\n  Sun,\n  TrendingUp\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/lib/auth\";\n\ninterface ChatMessage {\n  id: string;\n  text: string;\n  isUser: boolean;\n  timestamp: Date;\n}\n\nexport default function AIAssistant() {\n  const { t } = useTranslation();\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      id: \"welcome\",\n      text: `Hello ${user?.name || \"Farmer\"}! üëã I'm your AI farming assistant. I can help you with crop diseases, weather advice, farming techniques, and answer any agricultural questions you have. How can I assist you today?`,\n      isUser: false,\n      timestamp: new Date(),\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/assistant/chat\", { \n        message,\n        context: {\n          userLocation: user?.location,\n          primaryCrops: user?.primaryCrops,\n          farmSize: user?.farmSize\n        }\n      });\n      return response.json();\n    },\n    onSuccess: (data, message) => {\n      // Add user message\n      const userMessage: ChatMessage = {\n        id: Date.now().toString(),\n        text: message,\n        isUser: true,\n        timestamp: new Date(),\n      };\n\n      // Add AI response\n      const aiMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        text: data.response,\n        isUser: false,\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, userMessage, aiMessage]);\n      setInputMessage(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim() || sendMessageMutation.isPending) return;\n    sendMessageMutation.mutate(inputMessage.trim());\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const quickQuestions = [\n    {\n      text: \"What diseases affect my crops?\",\n      icon: Leaf,\n      color: \"bg-emerald-500/10 text-emerald-600\",\n    },\n    {\n      text: \"Best planting time for my area?\",\n      icon: Sun,\n      color: \"bg-amber-500/10 text-amber-600\",\n    },\n    {\n      text: \"How to improve crop yield?\",\n      icon: TrendingUp,\n      color: \"bg-blue-500/10 text-blue-600\",\n    },\n  ];\n\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted/30 pb-20\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-10 bg-gradient-to-r from-primary/5 via-primary/10 to-accent/5 border-b border-border/50 backdrop-blur-sm p-6\">\n        <div className=\"flex items-center justify-between\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/dashboard\")}\n            className=\"mr-4\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          \n          <motion.div \n            className=\"flex items-center space-x-3 flex-1\"\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n          >\n            <motion.div\n              className=\"w-10 h-10 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center shadow-lg\"\n              animate={{ \n                scale: [1, 1.1, 1],\n                rotate: [0, 5, -5, 0]\n              }}\n              transition={{ \n                duration: 4,\n                repeat: Infinity,\n                ease: \"easeInOut\"\n              }}\n            >\n              <Bot className=\"text-white text-xl\" />\n            </motion.div>\n            <div>\n              <h1 className=\"text-xl font-bold bg-gradient-to-r from-foreground to-foreground/80 bg-clip-text text-transparent\">\n                AI Farm Assistant\n              </h1>\n              <p className=\"text-sm text-muted-foreground flex items-center\">\n                <motion.div\n                  className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"\n                  animate={{ scale: [1, 1.2, 1] }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n                Online & Ready to Help\n              </p>\n            </div>\n          </motion.div>\n\n          <motion.div\n            animate={{ rotate: [0, 360] }}\n            transition={{ duration: 8, repeat: Infinity, ease: \"linear\" }}\n          >\n            <Sparkles className=\"h-6 w-6 text-primary\" />\n          </motion.div>\n        </div>\n      </header>\n\n      {/* Chat Area */}\n      <div className=\"flex flex-col h-[calc(100vh-140px)]\">\n        <ScrollArea className=\"flex-1 p-6\" ref={scrollAreaRef}>\n          <div className=\"max-w-3xl mx-auto space-y-4\">\n            <AnimatePresence>\n              {messages.map((message, index) => (\n                <motion.div\n                  key={message.id}\n                  initial={{ opacity: 0, y: 20, scale: 0.9 }}\n                  animate={{ opacity: 1, y: 0, scale: 1 }}\n                  exit={{ opacity: 0, y: -20, scale: 0.9 }}\n                  transition={{ duration: 0.3, delay: index * 0.1 }}\n                  className={`flex ${message.isUser ? \"justify-end\" : \"justify-start\"}`}\n                >\n                  <div className={`flex items-start space-x-3 max-w-[85%] ${message.isUser ? \"flex-row-reverse space-x-reverse\" : \"\"}`}>\n                    {/* Avatar */}\n                    <motion.div\n                      className={`w-8 h-8 rounded-2xl flex items-center justify-center shadow-md ${\n                        message.isUser \n                          ? \"bg-gradient-to-br from-blue-500 to-blue-600\" \n                          : \"bg-gradient-to-br from-emerald-500 to-teal-600\"\n                      }`}\n                      whileHover={{ scale: 1.1 }}\n                    >\n                      {message.isUser ? (\n                        <User className=\"text-white text-sm\" />\n                      ) : (\n                        <Bot className=\"text-white text-sm\" />\n                      )}\n                    </motion.div>\n\n                    {/* Message */}\n                    <motion.div\n                      className={`p-4 rounded-2xl shadow-sm ${\n                        message.isUser\n                          ? \"bg-gradient-to-br from-blue-500 to-blue-600 text-white\"\n                          : \"bg-card border border-border\"\n                      }`}\n                      whileHover={{ scale: 1.02 }}\n                    >\n                      <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">\n                        {message.text}\n                      </p>\n                      <p className={`text-xs mt-2 ${message.isUser ? \"text-blue-100\" : \"text-muted-foreground\"}`}>\n                        {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                      </p>\n                    </motion.div>\n                  </div>\n                </motion.div>\n              ))}\n            </AnimatePresence>\n\n            {/* Typing indicator */}\n            {sendMessageMutation.isPending && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"flex justify-start\"\n              >\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center\">\n                    <Bot className=\"text-white text-sm\" />\n                  </div>\n                  <div className=\"bg-card border border-border p-4 rounded-2xl shadow-sm\">\n                    <div className=\"flex items-center space-x-2\">\n                      <motion.div\n                        className=\"w-2 h-2 bg-primary rounded-full\"\n                        animate={{ scale: [1, 1.5, 1] }}\n                        transition={{ duration: 0.8, repeat: Infinity, delay: 0 }}\n                      />\n                      <motion.div\n                        className=\"w-2 h-2 bg-primary rounded-full\"\n                        animate={{ scale: [1, 1.5, 1] }}\n                        transition={{ duration: 0.8, repeat: Infinity, delay: 0.2 }}\n                      />\n                      <motion.div\n                        className=\"w-2 h-2 bg-primary rounded-full\"\n                        animate={{ scale: [1, 1.5, 1] }}\n                        transition={{ duration: 0.8, repeat: Infinity, delay: 0.4 }}\n                      />\n                      <span className=\"text-sm text-muted-foreground ml-2\">AI is thinking...</span>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* Quick Questions */}\n            {messages.length === 1 && (\n              <motion.div\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.5 }}\n                className=\"pt-6\"\n              >\n                <h3 className=\"text-lg font-semibold text-center mb-4 text-muted-foreground\">\n                  Quick Questions to Get Started\n                </h3>\n                <div className=\"grid gap-3\">\n                  {quickQuestions.map((question, index) => (\n                    <motion.div\n                      key={question.text}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: 0.7 + index * 0.1 }}\n                    >\n                      <Card \n                        className=\"cursor-pointer hover:shadow-lg transition-all duration-300 border-2 border-dashed border-muted-foreground/30 hover:border-primary/50\"\n                        onClick={() => {\n                          setInputMessage(question.text);\n                          inputRef.current?.focus();\n                        }}\n                      >\n                        <CardContent className=\"p-4 flex items-center space-x-3\">\n                          <div className={`w-10 h-10 rounded-xl flex items-center justify-center ${question.color}`}>\n                            <question.icon className=\"h-5 w-5\" />\n                          </div>\n                          <p className=\"font-medium\">{question.text}</p>\n                        </CardContent>\n                      </Card>\n                    </motion.div>\n                  ))}\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </ScrollArea>\n\n        {/* Input Area */}\n        <div className=\"border-t border-border p-4 bg-card/50 backdrop-blur-sm\">\n          <div className=\"max-w-3xl mx-auto\">\n            <div className=\"flex items-end space-x-3\">\n              <div className=\"flex-1 relative\">\n                <Input\n                  ref={inputRef}\n                  value={inputMessage}\n                  onChange={(e) => setInputMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder=\"Ask me anything about farming...\"\n                  className=\"pr-12 py-3 text-base border-2 focus:border-primary/50 rounded-xl\"\n                  disabled={sendMessageMutation.isPending}\n                  data-testid=\"input-message\"\n                />\n                \n                {/* Voice input button */}\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"absolute right-2 top-1/2 transform -translate-y-1/2 hover:bg-primary/10\"\n                  onClick={() => setIsListening(!isListening)}\n                  data-testid=\"button-voice\"\n                >\n                  {isListening ? (\n                    <MicOff className=\"h-4 w-4 text-red-500\" />\n                  ) : (\n                    <Mic className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </div>\n\n              <motion.div\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!inputMessage.trim() || sendMessageMutation.isPending}\n                  className=\"px-6 py-3 bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 shadow-lg rounded-xl\"\n                  data-testid=\"button-send\"\n                >\n                  {sendMessageMutation.isPending ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    <Send className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </motion.div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14071},"client/src/components/price-alerts-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Bell, Plus, Trash2, Edit, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst createAlertSchema = z.object({\n  commodity: z.string().min(1, \"Commodity is required\"),\n  market: z.string().min(1, \"Market is required\"),\n  targetPrice: z.number().positive(\"Target price must be positive\"),\n  priceUnit: z.string().optional(),\n  alertType: z.enum([\"above\", \"below\"], { required_error: \"Alert type is required\" }),\n});\n\ntype CreateAlertForm = z.infer<typeof createAlertSchema>;\n\ninterface PriceAlert {\n  id: string;\n  commodity: string;\n  market: string;\n  targetPrice: string;\n  priceUnit: string;\n  alertType: \"above\" | \"below\";\n  isActive: boolean;\n  createdAt: string;\n}\n\nconst popularCrops = [\n  \"Rice\", \"Wheat\", \"Sugarcane\", \"Cotton\", \"Jowar\", \"Bajra\", \n  \"Maize\", \"Tur\", \"Gram\", \"Masoor\", \"Moong\", \"Urad\",\n  \"Groundnut\", \"Sunflower\", \"Soybean\", \"Onion\", \"Potato\", \"Tomato\"\n];\n\nconst indianMarkets = [\n  \"Mumbai APMC\", \"Delhi Market\", \"Pune Market\", \"Nashik Market\", \n  \"Sangli Market\", \"Kolkata Market\", \"Chennai Market\", \"Bangalore Market\", \n  \"Hyderabad Market\", \"Ahmedabad Market\"\n];\n\ninterface PriceAlertsDialogProps {\n  trigger?: React.ReactNode;\n}\n\nexport default function PriceAlertsDialog({ trigger }: PriceAlertsDialogProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isOpen, setIsOpen] = useState(false);\n  const [isCreating, setIsCreating] = useState(false);\n\n  const form = useForm<CreateAlertForm>({\n    resolver: zodResolver(createAlertSchema),\n    defaultValues: {\n      commodity: \"\",\n      market: \"\",\n      targetPrice: 0,\n      priceUnit: \"per quintal\",\n      alertType: \"above\",\n    },\n  });\n\n  // Fetch user's price alerts\n  const { data: alerts = [], isLoading } = useQuery<PriceAlert[]>({\n    queryKey: [\"/api/price-alerts\"],\n    enabled: isOpen,\n  });\n\n  // Create price alert mutation\n  const createAlertMutation = useMutation({\n    mutationFn: (data: CreateAlertForm) => apiRequest(\"POST\", \"/api/price-alerts\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/price-alerts\"] });\n      form.reset();\n      setIsCreating(false);\n      toast({\n        title: \"Alert Created\",\n        description: \"Your price alert has been set up successfully!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create price alert\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete price alert mutation\n  const deleteAlertMutation = useMutation({\n    mutationFn: (alertId: string) => apiRequest(\"DELETE\", `/api/price-alerts/${alertId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/price-alerts\"] });\n      toast({\n        title: \"Alert Deleted\",\n        description: \"Price alert has been removed successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete price alert\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateAlertForm) => {\n    createAlertMutation.mutate(data);\n  };\n\n  const formatPrice = (price: string | number) => {\n    const numPrice = typeof price === 'string' ? parseFloat(price) : price;\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(numPrice);\n  };\n\n  const defaultTrigger = (\n    <Button className=\"bg-accent text-accent-foreground hover:bg-accent/90\" data-testid=\"button-setup-alerts\">\n      <Bell className=\"h-4 w-4 mr-2\" />\n      Setup Price Alerts\n    </Button>\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {trigger || defaultTrigger}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"price-alerts-dialog\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center\">\n            <Bell className=\"h-5 w-5 mr-2 text-accent\" />\n            Price Alerts Management\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Current Alerts */}\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold\">Your Active Alerts</h3>\n              <Button\n                onClick={() => setIsCreating(!isCreating)}\n                size=\"sm\"\n                data-testid=\"button-create-alert\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New Alert\n              </Button>\n            </div>\n\n            {isLoading ? (\n              <div className=\"space-y-3\">\n                {Array.from({ length: 3 }).map((_, i) => (\n                  <Card key={i}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"animate-pulse flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-muted rounded-lg\"></div>\n                          <div>\n                            <div className=\"h-4 bg-muted rounded w-32 mb-2\"></div>\n                            <div className=\"h-3 bg-muted rounded w-24\"></div>\n                          </div>\n                        </div>\n                        <div className=\"h-8 bg-muted rounded w-16\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : alerts.length > 0 ? (\n              <div className=\"space-y-3\">\n                {alerts.map((alert) => (\n                  <Card key={alert.id} data-testid={`alert-card-${alert.id}`}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                            {alert.alertType === \"above\" ? (\n                              <TrendingUp className=\"h-5 w-5 text-green-600\" />\n                            ) : (\n                              <TrendingDown className=\"h-5 w-5 text-red-600\" />\n                            )}\n                          </div>\n                          <div>\n                            <h4 className=\"font-medium\" data-testid={`alert-commodity-${alert.id}`}>\n                              {alert.commodity} - {alert.market}\n                            </h4>\n                            <p className=\"text-sm text-muted-foreground\" data-testid={`alert-details-${alert.id}`}>\n                              Alert when price goes {alert.alertType} {formatPrice(alert.targetPrice)} {alert.priceUnit}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className={`px-2 py-1 rounded-full text-xs ${\n                            alert.isActive \n                              ? \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100\" \n                              : \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100\"\n                          }`}>\n                            {alert.isActive ? \"Active\" : \"Paused\"}\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deleteAlertMutation.mutate(alert.id)}\n                            disabled={deleteAlertMutation.isPending}\n                            data-testid={`button-delete-${alert.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <Bell className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Price Alerts Set</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Create your first price alert to get notified when crop prices reach your target.\n                  </p>\n                  <Button onClick={() => setIsCreating(true)} data-testid=\"button-create-first-alert\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Your First Alert\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Create New Alert Form */}\n          {isCreating && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Create New Price Alert</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\" data-testid=\"create-alert-form\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"commodity\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Crop/Commodity</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-commodity\">\n                                  <SelectValue placeholder=\"Select commodity\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {popularCrops.map((crop) => (\n                                  <SelectItem key={crop} value={crop}>\n                                    {crop}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"market\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Market</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-market\">\n                                  <SelectValue placeholder=\"Select market\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {indianMarkets.map((market) => (\n                                  <SelectItem key={market} value={market}>\n                                    {market}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid md:grid-cols-3 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"targetPrice\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Target Price (‚Çπ)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"3000\"\n                                {...field}\n                                onChange={(e) => field.onChange(Number(e.target.value))}\n                                data-testid=\"input-target-price\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"priceUnit\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Price Unit</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-price-unit\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"per quintal\">per quintal</SelectItem>\n                                <SelectItem value=\"per kg\">per kg</SelectItem>\n                                <SelectItem value=\"per ton\">per ton</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"alertType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Alert When Price Goes</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-alert-type\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"above\">Above target price</SelectItem>\n                                <SelectItem value=\"below\">Below target price</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsCreating(false)}\n                        data-testid=\"button-cancel-alert\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={createAlertMutation.isPending}\n                        data-testid=\"button-submit-alert\"\n                      >\n                        {createAlertMutation.isPending ? \"Creating...\" : \"Create Alert\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Info Card */}\n          <Card className=\"bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <Bell className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                <div>\n                  <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-1\">\n                    How Price Alerts Work\n                  </h4>\n                  <div className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n                    <p>‚Ä¢ Get SMS notifications when prices reach your target</p>\n                    <p>‚Ä¢ Alerts check prices multiple times daily from nearby markets</p>\n                    <p>‚Ä¢ You can pause or delete alerts anytime</p>\n                    <p>‚Ä¢ Set both upper and lower price thresholds for better trading decisions</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":17713},"server/services/twilio.ts":{"content":"import twilio from 'twilio';\n\nconst client = twilio(\n  process.env.TWILIO_ACCOUNT_SID,\n  process.env.TWILIO_AUTH_TOKEN\n);\n\nconst TWILIO_PHONE_NUMBER = process.env.TWILIO_PHONE_NUMBER;\n\n// Store OTPs temporarily (in production, use Redis or database)\nconst otpStore = new Map<string, { otp: string; expires: number }>();\n\nexport function generateOTP(): string {\n  return Math.floor(1000 + Math.random() * 9000).toString();\n}\n\nexport async function sendOTP(phoneNumber: string): Promise<{ success: boolean; error?: string }> {\n  try {\n    // Check if Twilio credentials are available\n    if (!process.env.TWILIO_ACCOUNT_SID || !process.env.TWILIO_AUTH_TOKEN || !process.env.TWILIO_PHONE_NUMBER) {\n      console.log('Twilio credentials not found, using demo mode');\n      // Store demo OTP\n      otpStore.set(phoneNumber, { \n        otp: '0000', \n        expires: Date.now() + 10 * 60 * 1000 // 10 minutes\n      });\n      return { success: true };\n    }\n\n    const otp = generateOTP();\n    \n    // Send SMS via Twilio\n    await client.messages.create({\n      body: `Your FarmConnect verification code is: ${otp}. This code will expire in 10 minutes.`,\n      from: TWILIO_PHONE_NUMBER,\n      to: phoneNumber\n    });\n\n    // Store OTP with expiration (10 minutes)\n    otpStore.set(phoneNumber, { \n      otp, \n      expires: Date.now() + 10 * 60 * 1000 \n    });\n\n    console.log(`OTP sent to ${phoneNumber}: ${otp}`);\n    return { success: true };\n  } catch (error) {\n    console.error('Twilio SMS error:', error);\n    \n    // Fallback to demo mode if Twilio fails\n    console.log('Falling back to demo mode');\n    otpStore.set(phoneNumber, { \n      otp: '0000', \n      expires: Date.now() + 10 * 60 * 1000 \n    });\n    \n    return { success: true };\n  }\n}\n\nexport function verifyOTP(phoneNumber: string, inputOtp: string): boolean {\n  const stored = otpStore.get(phoneNumber);\n  \n  if (!stored) {\n    return false;\n  }\n  \n  // Check if OTP has expired\n  if (Date.now() > stored.expires) {\n    otpStore.delete(phoneNumber);\n    return false;\n  }\n  \n  // Verify OTP\n  const isValid = stored.otp === inputOtp;\n  \n  if (isValid) {\n    // Remove OTP after successful verification\n    otpStore.delete(phoneNumber);\n  }\n  \n  return isValid;\n}\n\nexport function isValidPhoneNumber(phone: string): boolean {\n  // Basic phone number validation - should start with + and have 10-15 digits\n  const phoneRegex = /^\\+[1-9]\\d{1,14}$/;\n  return phoneRegex.test(phone);\n}\n\n// Clean up expired OTPs periodically\nsetInterval(() => {\n  const now = Date.now();\n  const entries = Array.from(otpStore.entries());\n  for (const [phone, data] of entries) {\n    if (now > data.expires) {\n      otpStore.delete(phone);\n    }\n  }\n}, 5 * 60 * 1000); // Clean up every 5 minutes","size_bytes":2741},"server/services/priceMonitor.ts":{"content":"import { storage } from \"../storage\";\nimport { getMandiPrices } from \"./mandi\";\nimport type { PriceAlert, MandiPrice } from \"@shared/schema\";\n\n// Demo SMS function\nfunction sendDemoSMS(phoneNumber: string, message: string): Promise<void> {\n  console.log(`Demo SMS Alert to ${phoneNumber}: ${message}`);\n  return Promise.resolve();\n}\n\n// Check price alerts every 30 minutes\nconst PRICE_CHECK_INTERVAL = 30 * 60 * 1000; // 30 minutes\n\ninterface PriceAlertCheck {\n  alert: PriceAlert;\n  currentPrice: number | null;\n  triggered: boolean;\n  reason?: string;\n}\n\nexport class PriceMonitorService {\n  private isRunning = false;\n  private intervalId: NodeJS.Timeout | null = null;\n\n  start() {\n    if (this.isRunning) {\n      console.log(\"Price monitor is already running\");\n      return;\n    }\n\n    this.isRunning = true;\n    console.log(\"Starting price monitor service...\");\n    \n    // Run initial check\n    this.checkPriceAlerts().catch(console.error);\n    \n    // Schedule regular checks\n    this.intervalId = setInterval(() => {\n      this.checkPriceAlerts().catch(console.error);\n    }, PRICE_CHECK_INTERVAL);\n  }\n\n  stop() {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this.isRunning = false;\n    console.log(\"Stopping price monitor service...\");\n    \n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n\n  async checkPriceAlerts(): Promise<void> {\n    try {\n      console.log(\"Checking price alerts...\");\n      \n      // Get all active price alerts\n      const alerts = await storage.getActivePriceAlerts();\n      \n      if (alerts.length === 0) {\n        console.log(\"No active price alerts found\");\n        return;\n      }\n\n      console.log(`Found ${alerts.length} active price alerts`);\n      \n      // Group alerts by market for efficient price fetching\n      const alertsByMarket = new Map<string, PriceAlert[]>();\n      alerts.forEach(alert => {\n        if (!alertsByMarket.has(alert.market)) {\n          alertsByMarket.set(alert.market, []);\n        }\n        alertsByMarket.get(alert.market)!.push(alert);\n      });\n\n      // Check each market\n      for (const [market, marketAlerts] of alertsByMarket) {\n        await this.checkMarketAlerts(market, marketAlerts);\n      }\n      \n      console.log(\"Price alert check completed\");\n    } catch (error) {\n      console.error(\"Error checking price alerts:\", error);\n    }\n  }\n\n  private async checkMarketAlerts(market: string, alerts: PriceAlert[]): Promise<void> {\n    try {\n      // Fetch current prices for this market\n      const prices = await getMandiPrices(market);\n      \n      if (!prices || prices.length === 0) {\n        console.log(`No prices found for market: ${market}`);\n        return;\n      }\n\n      // Create a map of commodity to price for quick lookup\n      const priceMap = new Map<string, MandiPrice>();\n      prices.forEach(price => {\n        const key = price.commodity.toLowerCase();\n        priceMap.set(key, price);\n      });\n\n      // Check each alert\n      for (const alert of alerts) {\n        await this.checkSingleAlert(alert, priceMap);\n      }\n    } catch (error) {\n      console.error(`Error checking alerts for market ${market}:`, error);\n    }\n  }\n\n  private async checkSingleAlert(alert: PriceAlert, priceMap: Map<string, MandiPrice>): Promise<void> {\n    try {\n      const commodityKey = alert.commodity.toLowerCase();\n      const currentPriceData = priceMap.get(commodityKey);\n      \n      if (!currentPriceData) {\n        console.log(`No current price data found for ${alert.commodity} in ${alert.market}`);\n        return;\n      }\n\n      // Get the current price (prefer modal price, then max price)\n      const currentPriceStr = currentPriceData.modalPrice || currentPriceData.maxPrice;\n      if (!currentPriceStr) {\n        console.log(`No valid price found for ${alert.commodity}`);\n        return;\n      }\n\n      const currentPrice = parseFloat(currentPriceStr);\n      const targetPrice = parseFloat(alert.targetPrice);\n      \n      if (isNaN(currentPrice) || isNaN(targetPrice)) {\n        console.log(`Invalid price values for alert ${alert.id}`);\n        return;\n      }\n\n      // Check if alert condition is met\n      const shouldTrigger = this.shouldTriggerAlert(alert, currentPrice, targetPrice);\n      \n      if (shouldTrigger) {\n        await this.triggerAlert(alert, currentPrice, targetPrice);\n      }\n    } catch (error) {\n      console.error(`Error checking alert ${alert.id}:`, error);\n    }\n  }\n\n  private shouldTriggerAlert(alert: PriceAlert, currentPrice: number, targetPrice: number): boolean {\n    // Check if alert was triggered recently (within last 2 hours)\n    if (alert.lastTriggered) {\n      const timeSinceLastTrigger = Date.now() - new Date(alert.lastTriggered).getTime();\n      const twoHours = 2 * 60 * 60 * 1000;\n      \n      if (timeSinceLastTrigger < twoHours) {\n        return false; // Don't spam notifications\n      }\n    }\n\n    // Check alert condition\n    if (alert.alertType === \"above\" && currentPrice >= targetPrice) {\n      return true;\n    }\n    \n    if (alert.alertType === \"below\" && currentPrice <= targetPrice) {\n      return true;\n    }\n    \n    return false;\n  }\n\n  private async triggerAlert(alert: PriceAlert, currentPrice: number, targetPrice: number): Promise<void> {\n    try {\n      // Get user details for SMS\n      const user = await storage.getUser(alert.userId);\n      if (!user) {\n        console.error(`User not found for alert ${alert.id}`);\n        return;\n      }\n\n      // Format prices for display\n      const formatPrice = (price: number) => {\n        return new Intl.NumberFormat('en-IN', {\n          style: 'currency',\n          currency: 'INR',\n          maximumFractionDigits: 0,\n        }).format(price);\n      };\n\n      // Create SMS message\n      const direction = alert.alertType === \"above\" ? \"risen above\" : \"fallen below\";\n      const message = `FarmConnect Alert: ${alert.commodity} price in ${alert.market} has ${direction} your target of ${formatPrice(targetPrice)}. Current price: ${formatPrice(currentPrice)} ${alert.priceUnit}. Check the app for more details.`;\n\n      // Send SMS notification\n      console.log(`Sending price alert to ${user.phone}: ${message}`);\n      \n      try {\n        await this.sendSMSAlert(user.phone, message);\n        console.log(`Price alert sent successfully to ${user.phone}`);\n      } catch (smsError) {\n        console.error(\"Failed to send SMS alert:\", smsError);\n        // Continue to update the alert even if SMS fails\n      }\n\n      // Update alert's last triggered time\n      await storage.updatePriceAlert(alert.id, {\n        lastTriggered: new Date(),\n      });\n\n      console.log(`Price alert ${alert.id} triggered for ${alert.commodity} in ${alert.market}`);\n    } catch (error) {\n      console.error(`Error triggering alert ${alert.id}:`, error);\n    }\n  }\n\n  private async sendSMSAlert(phoneNumber: string, message: string): Promise<void> {\n    // Use demo SMS system\n    await sendDemoSMS(phoneNumber, message);\n  }\n}\n\n// Create and export a singleton instance\nexport const priceMonitor = new PriceMonitorService();\n\n// Auto-start the service when the module is loaded\nif (process.env.NODE_ENV !== 'test') {\n  // Start monitoring after a short delay to ensure database is ready\n  setTimeout(() => {\n    priceMonitor.start();\n  }, 5000); // 5 second delay\n}","size_bytes":7345},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"numpy>=2.3.2\",\n    \"pillow>=11.3.0\",\n    \"torch>=2.8.0\",\n    \"torchvision>=0.23.0\",\n]\n\n[[tool.uv.index]]\nexplicit = true\nname = \"pytorch-cpu\"\nurl = \"https://download.pytorch.org/whl/cpu\"\n\n[tool.uv.sources]\nAA-module = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nABlooper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nAnalysisG = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nAutoRAG = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nBERTeam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nBxTorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nByaldi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCALM-Pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCOPEX-high-rate-compression-quality-metrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCityLearn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCoCa-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCoLT5-attention = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nComfyUI-EasyNodes = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nCrawl4AI = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDALL-E = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDI-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDatasetRising = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDeepCache = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDeepMatter = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nDraugr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nESRNN = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nEn-transformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nExpoSeq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nFLAML = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nFSRS-Optimizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGANDLF = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGQLAlchemy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGhostScan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nGraKeL = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nHEBO = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nIOPaint = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nISLP = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nInvokeAI = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nJAEN = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nKapoorLabs-Lightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nLightAutoML = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nLingerGRN = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nMMEdu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nMRzeroCore = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nModeva = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nNeuralFoil = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nNiMARE = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nNinjaTools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nOpenHosta = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nOpenNMT-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPOT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPVNet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPaLM-rlhf-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPepperPepper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPiML = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nPoutyne = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nQNCP = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRAGatouille = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRareGO = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRealtimeSTT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nRelevanceAI-Workflows-Core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nResemblyzer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nScandEval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nSimba-UW-tf-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nSwissArmyTransformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTPOT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTTS = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTorchCRF = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nTotalSegmentator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nUtilsRL = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nWhisperSpeech = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nXAISuite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\na-unet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\na5dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naccelerate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naccelerated-scan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naccern-xyme = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nachatbot = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nacids-rave = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nactorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nacvl-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadabelief-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadam-atan2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadan-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadapters = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadmin-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadtoolbox = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nadversarial-robustness-toolbox = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naeiou = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naeon = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nafricanwhisper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nag-llama-api = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nagentdojo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nagilerl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-edge-torch-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-parrot = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai-transform = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai2-olmo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai2-olmo-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nai2-tango = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naicmder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naider-chat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naider-chat-x = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naif360 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naihwkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naimodelshare = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nairllm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nairtestProject = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nairunner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naisak = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naislib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naisquared = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naistore = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naithree = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nakasha-terminal = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalibi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalibi-detect = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalignn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nall-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallennlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallennlp-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallennlp-pvt-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallophant = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nallosaurus = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naloy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalpaca-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphafold2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphafold3-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphamed-federated = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nalphawave = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\namazon-braket-pennylane-plugin = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\namazon-photos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nanemoi-graphs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nanemoi-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nanomalib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\napache-beam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\napache-tvm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naperturedb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naphrodite-engine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naqlm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narcAGI2024 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narchisound = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nargbind = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narize = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narm-pytorch-utilities = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narray-api-compat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\narus = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nassert-llm-tools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nasteroid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nasteroid-filterbanks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nastra-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nastrovision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\natomate2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nattacut = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudio-diffusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudio-encoders-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudio-separator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudiocraft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naudiolm-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nauralis = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nauraloss = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nauto-gptq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nautoawq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nautoawq-kernels = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"autogluon.multimodal\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"autogluon.tabular\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"autogluon.timeseries\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nautotrain-advanced = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\navdeepfake1m = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\naws-fortuna = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nax-platform = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-automl-dnn-vision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-contrib-automl-dnn-forecasting = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-evaluate-mlflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-metrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nazureml-train-automl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nb2bTools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbackpack-for-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbalrog-nle = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatch-face = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatchalign = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatchgeneratorsv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbatchtensor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbbrl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbenchpots = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbent = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbert-score = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbertopic = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbertviz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbestOf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbetty-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbig-sleep = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-core-cpp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-core-npu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbigdl-nano = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"bioimageio.core\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbitfount = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbitsandbytes = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbittensor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbittensor-cli = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nblackboxopt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nblanc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nblindai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbm25-pt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nboltz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbotorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nboxmot = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbrainchain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbraindecode = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbrevitas = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbriton = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbrowsergym-visualwebarena = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbuzz-captions = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbyotrack = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nbyzerllm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nc4v-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncalflops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncame-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncamel-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncamel-tools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncannai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncaptum = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncarte-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncarvekit-colab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncatalyst = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncausalml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncausalnex = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncausy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncbrkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncca-zoo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncdp-backend = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellacdc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellfinder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellpose = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncellxgene-census = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchattts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchemprop = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchgnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nchitra = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncircuitsvis = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncjm-yolox-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclarinpl-embeddings = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclass-resolver = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclassifier-free-guidance-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclassiq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclassy-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclean-fid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncleanvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-anytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-benchmark = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-by-openai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-interrogator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclip-retrieval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncltk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nclusterops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncnocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncnstd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoba = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncofi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncolbert-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncolpali-engine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-ray = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-ray-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-train = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposabl-train-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncomposer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompressai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompressed-tensors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncompressed-tensors-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconcrete-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconfit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncontextualSpellCheck = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncontinual-inference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncontrolnet-aux = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nconvokit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoola = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoqui-tts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncoqui-tts-trainer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncraft-text-detector = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncreme = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncrocodile = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncrowd-kit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncryoSPHERE = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncsle-common = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncsle-system-identification = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nctgan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncurated-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncut-cross-entropy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncvat-sdk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ncybertask = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nd3rlpy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndalle-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndalle2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndanila-lib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndanling = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndarts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndarwin-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndata-gradients = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatachain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndataclass-array = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndataeval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatarobot-drum = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatarobotx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatasets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndatumaro = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndctorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeep-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepchecks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepchem = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepctr-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepecho = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepepochs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepforest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeeplabcut = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepmd-kit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepmultilingualpunctuation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeeprobust = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepsparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepsparse-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndeepspeed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndenoising-diffusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndescript-audio-codec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndescript-audiotools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndetecto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndetoxify = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndgenerate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndghs-imgutils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndgl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndialogy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndice-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndiffgram = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndiffq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndiffusers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndistilabel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndistrifuser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndnikit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndocarray = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndoclayout-yolo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndocling-ibm-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndocquery = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndomino-code-assist = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndreamsim = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndropblock = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndruida = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ndvclive = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ne2-tts-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ne2cnn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ne3nn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neasyocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nebtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\necallisto-ng = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nedsnlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neffdet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neinx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neir-dl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neis1600 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\neland = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nema-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nembedchain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nenformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nentmax = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nesm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nespaloma-charge = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nespnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\netils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\netna = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nevadb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nevalscope = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nevaluate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nexllamav2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nextractable = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nface-alignment = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfacenet-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfacexlib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfair-esm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfairseq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfairseq2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfairseq2n = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfaker-file = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfarm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfast-bert = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfast-pytorch-kmeans = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfastai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfastcore = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfastestimator-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfasttreeshap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfedml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfelupe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfemr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfft-conv-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfickling = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfireworks-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflair = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflashrag-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflax = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflexgen = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflgo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflopth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflowcept = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflytekitplugins-kfpytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nflytekitplugins-onnxpytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfmbench = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfocal-frequency-loss = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfoldedtensor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfractal-tasks-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfreegenius = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfreqtrade = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfschat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunasr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunctorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunlbm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nfunsor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngalore-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngarak = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngarf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngateloop-transformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngeffnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngenutility = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngfpgan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngigagan-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngin-config = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nglasflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngliner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngluonts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngmft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngoogle-cloud-aiplatform = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngpforecaster = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngpt3discord = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngpytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngrad-cam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngraph-weather = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngraphistry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngravitorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngretel-synthetics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngsplat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nguardrails-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nguidance = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ngymnasium = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhanlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhappytransformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhbutils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nheavyball = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhezar = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhf-deepali = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhf-doc-builder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhigher = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhjxdl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhkkang-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhordelib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhpsv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhuggingface-hub = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhummingbird-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhvae-backbone = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhya = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nhypothesis-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nibm-metrics-plugin = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nibm-watson-machine-learning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nibm-watsonx-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nicetk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nicevision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niden = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nidvpackage = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niglovikov-helper-functions = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimagededup = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimagen-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimaginAIry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nimg2vec-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nincendio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninference-gpu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninfinity-emb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninfo-nce-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninfoapps-mlops-sdk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-dolomite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-sdg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninstructlab-training = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ninvisible-watermark = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niobm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nipex-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\niree-turbine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml-tasks-azure-openai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml-tasks-torchvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nirisml-tasks-training = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nitem-matching = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nivadomed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njaqpotpy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njina = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njudo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\njunky = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nk-diffusion = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nk1lib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nk2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkappadata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkappamodules = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkarbonn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkats = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkbnf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkedro-datasets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkeybert = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkeytotext = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkhoj = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkiui = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkonfuzio-sdk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkornia = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkornia-moons = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkraken = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkwarray = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nkwimage = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlabml-nn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlagent = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlaion-clap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlale = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlama-cleaner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlancedb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangcheck = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangroid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlangtest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlayoutparser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nldp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleafmap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleap-ie = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleibniz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nleptonai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nletmedoit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlhotse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlib310 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlibpecos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlibrec-auto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlibretranslate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nliger-kernel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nliger-kernel-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-bolts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-fabric = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-habana = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightning-lite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightrag = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightweight-gan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlightwood = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinear-attention-transformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinear-operator = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinformer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlinformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nliom-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlit-nlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlitdata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlitelama = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlitgpt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-embeddings-adapter = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-embeddings-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-embeddings-instructor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-llms-huggingface = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllama-index-postprocessor-colbert-rerank = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-blender = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-foundry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-guard = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm-rs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllm2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllmcompressor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllmlingua = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nllmvm-cli = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlm-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlmdeploy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlmms-eval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlocal-attention = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlovely-tensors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlpips = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nlycoris-lora = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmace-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmagic-pdf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmagicsoup = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmagvit2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmaite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmanga-ocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmanifest-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmanipulation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmarker-pdf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmatgl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmed-imagetools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmedaka = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmedcat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmedmnist = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmegablocks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmegatron-energon = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmemos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmeshgpt-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmetatensor-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmflux = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmia-vgg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmiditok = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nminari = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nminicons = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nml2rt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlagents = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlbench-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlcroissant = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlpfile = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmlx-whisper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmaction2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmengine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmengine-lite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmpose = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmmsegmentation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodeci-mdf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodel2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodelscope = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmodelspec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonai-weekly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonotonic-alignment-search = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmonty = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmosaicml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmosaicml-streaming = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmoshi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmteb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmtmtrain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmulti-quantization = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nmyhand = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnGPT-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnaeural-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnapari = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnapatrackmater = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnara-wpe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnatten = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnbeats-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnebulae = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnemo-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneptune = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneptune-client = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnerfacc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnerfstudio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnessai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnetcal = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneural-rag = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuralforecast = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuralnets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuralprophet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nneuspell = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnevergrad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnexfort = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnimblephysics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnirtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnkululeko = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnlptooltest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnAudio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnodely = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnsight = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnnunetv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnoisereduce = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnonebot-plugin-nailongremove = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnowcasting-dataloader = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnowcasting-forecast = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnshtrainer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnuwa-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnvflare = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nnvidia-modelopt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nocf-datapipes = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nocnn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nogb = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nohmeow-blurr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nolive-ai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nomlt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nommlx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonediff = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonediffx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonnx2pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nonnx2torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopacus = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopen-clip-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopen-flamingo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopen-interpreter = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenbb-terminal-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenmim = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenunmix = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenvino-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenvino-tokenizers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenvino-xai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopenwakeword = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nopt-einsum-fx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-habana = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-intel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-neuron = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptimum-quanto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptree = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptuna = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptuna-dashboard = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noptuna-integration = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noracle-ads = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\norbit-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\notx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noutetts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noutlines = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\noutlines-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npaddlenlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npai-easycv = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npandasai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npanns-inference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npatchwork-cli = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npeft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npegasuspy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npelutils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npenn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nperforatedai-freemium = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nperformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npetastorm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npfio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npgmpy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nphenolrs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nphobos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npi-zero-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npinecone-text = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npiq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npix2tex = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npix2text = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npnnx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npolicyengine-us-data = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npolyfuzz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npomegranate = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npositional-encodings = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nprefigure = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nproduct-key-memory = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nptflops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nptwt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npulser-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npunctuators = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npy2ls = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyabsa = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n\"pyannote.audio\" = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyawd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyclarity = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npycox = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyfemtet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyg-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npygrinder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyhealth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyhf = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyiqa = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npykeen = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npykeops = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npylance = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npylineaGT = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npymanopt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npymde = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npypots = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyqlib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyqtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyro-ppl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npysentimiento = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyserini = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npysr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npythainlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npython-doctr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-fid = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-forecasting = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-ignite = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-kinematics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-lightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-lightning-bolts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-metric-learning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-model-summary = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-msssim = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-pfn-extras = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-pretrained-bert = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-ranger = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-seed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-tabnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-tabular = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-toolbelt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-transformers-pvt-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-triton-rocm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-warmup = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch-wavelets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch_optimizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorch_revgrad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorchcv = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npytorchltr2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyvene = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\npyvespa = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqianfan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqibo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqiskit-machine-learning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nqtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nquanto = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nquick-anomaly-detector = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrastervision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrastervision-pytorch-backend = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrastervision-pytorch-learner = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nray-lightning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrclip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrealesrgan = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrecbole = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrecommenders = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nredcat = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nreformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nregex-sampler = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nreplay-rec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrerankers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nresearch-framework = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nresemble-enhance = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nresnest = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrf-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrf-groundingdino = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrfconv = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrich-logger = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nring-attention-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrltrade-test = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrotary-embedding-torch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrsp-ml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nrust-circuit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ns2fft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ns3prl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ns3torchconnector = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsaferx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsafetensors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsagemaker-huggingface-inference-toolkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsagemaker-ssh-helper = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsalesforce-lavis = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsalesforce-merlion = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsamv2 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nscib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nscib-metrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nscvi-tools = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsdmetrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsecretflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsegment-anything-hq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsegment-anything-py = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsegmentation-models-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nself-rewarding-lm-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsemantic-kernel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsemantic-router = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsenselab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsent2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsentence-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsequence-model-train = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nserotiny = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsevenn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsglang = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nshap = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsilero-api-server = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsilero-vad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsilicondiff-npu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsimclr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsimple-lama-inpainting = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsinabs = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsixdrepnet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskforecast = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskrl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nskt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsktime = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsktmls = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nslangtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmartnoise-synth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmashed = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmplx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmqtk-descriptors = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsmqtk-detection = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsnntorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsnorkel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsnowflake-ml-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nso-vits-svc-fork = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsonusai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsony-custom-layers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsotopia = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-curated-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-experimental = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-huggingface-pipelines = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspacy-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspan-marker = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspandrel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspandrel-extra-arches = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsparrow-python = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspatialdata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspeechbrain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspeechtokenizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspikeinterface = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspikingjelly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspotiflow = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspotpython = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nspotriver = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsquirrel-core = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstable-baselines3 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstable-diffusion-sdkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstable-ts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstanford-stk = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstanfordnlp = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstanza = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstartorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstreamtasks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstruct-eqtable = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nstylegan2-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsupar = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsuper-gradients = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsuper-image = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsuperlinked = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsupervisely = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsurya-ocr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsvdiff-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswarm-models = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswarmauri = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswarms-memory = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nswebench = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsyft = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsympytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsyne-tune = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nsynthcity = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nt5 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntab-transformer-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntabpfn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntaming-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntaming-transformers-rom1504 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntaskwiz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntbparse = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntecton = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensor-parallel = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensorcircuit-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensordict = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensordict-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensorizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntensorrt-llm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntexify = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntext2text = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntextattack = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntfkit = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthepipe-api = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthinc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthingsvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthirdai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nthop = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntianshou = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntidy3d = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntimesfm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntimm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntipo-kgen = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntmnt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntoad = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntomesd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntop2vec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-audiomentations = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-dct = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-delaunay = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-directml = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-ema = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-encoding = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-fidelity = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-geometric = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-geopooling = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-harmonics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-kmeans = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-lr-finder = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-max-mem = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-npu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-optimi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-optimizer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-ort = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-pitch-shift = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-ppr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-pruning = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-snippets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-stoi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-struct = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorch-tensorrt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchani = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchattacks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchaudio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchbiggraph = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcam = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcde = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcfm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchcrepe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdata = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdatasets-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdiffeq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchdyn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchestra = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorcheval = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorcheval-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchextractor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchfcpe = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchfun = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchfunc-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchgeo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchgeometry = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchio = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchjpeg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchlayers-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchmeta = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchmetrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchmocks = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchpack = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchpippy = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchpq = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchprofile = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchquantlib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrec = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrec-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrec-nightly-cpu = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrl = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchrl-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchscale = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsde = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchseg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchserve = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchserve-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsnapshot-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsr = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchstain = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchsummaryX = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtext = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtnt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtnt-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchtyping = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchutil = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchvinecopulib = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchviz = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchx-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntorchxrayvision = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntotalspineseg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntracebloc-package-dev = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntrainer = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformer-engine = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformer-lens = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformer-smaller-training-vocab = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransformers-domain-adaptation = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransfusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntransparent-background = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntreescope = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntrolo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntsai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntslearn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nttspod = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntxtai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\ntyro = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nu8darts = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nuhg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nuitestrunner-syberos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nultimate-rvc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nultralytics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nultralytics-thop = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunav = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunbabel-comet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunderthesea = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunfoldNd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunimernet = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunitorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunitxt = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunsloth = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunsloth-zoo = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunstructured = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nunstructured-inference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nutilsd = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nv-diffusion-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvIQA = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvectice = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvector-quantize-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvectorhub-nightly = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nversatile-audio-upscaler = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvertexai = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvesin = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvgg-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvideo-representations-extractor = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nviser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvision-datasets = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvisionmetrics = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvisu3d = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvit-pytorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nviturka-nn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvllm = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvllm-flash-attn = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvocos = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvollseg = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nvtorch = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwavmark = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwdoc = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwhisper-live = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwhisper-timestamped = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwhisperx = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwilds = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwordllama = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nworker-automate-hub = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nwxbtool = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nx-clip = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nx-transformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxaitk_saliency = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxformers = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxgrammar = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxinference = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nxtts-api-server = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyolo-poser = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyolov5 = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyolov7-package = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nyta-general-utils = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nzensvi = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nzetascale = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\nzuko = [{ index = \"pytorch-cpu\", marker = \"platform_system == 'Linux'\" }]\n","size_bytes":90613},"server/services/pytorchService.ts":{"content":"import { spawn } from \"child_process\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport interface CropDiseaseAnalysis {\n  diseaseName: string;\n  severity: string;\n  confidence: number;\n  symptoms: string;\n  treatment: string;\n  isPytorchResult?: boolean;\n  error?: string;\n}\n\n/**\n * PyTorch-based crop disease detection service\n * \n * This service interfaces with a Python script that uses PyTorch\n * to analyze crop images for disease detection.\n */\nexport class PyTorchDiseaseDetector {\n  private pythonScriptPath: string;\n\n  constructor() {\n    this.pythonScriptPath = path.join(__dirname, \"pytorch_inference.py\");\n  }\n\n  /**\n   * Analyze an image buffer for crop diseases using PyTorch model\n   * @param imageBuffer - Buffer containing the image data\n   * @returns Promise<CropDiseaseAnalysis> - Disease analysis result\n   */\n  async analyzeImage(imageBuffer: Buffer): Promise<CropDiseaseAnalysis> {\n    return new Promise((resolve, reject) => {\n      try {\n        // Convert image buffer to base64 for Python script\n        const imageBase64 = imageBuffer.toString('base64');\n        \n        // Spawn Python process\n        const pythonProcess = spawn('python3', [this.pythonScriptPath, imageBase64], {\n          stdio: ['pipe', 'pipe', 'pipe'],\n          timeout: 60000, // 60 second timeout\n        });\n\n        let stdout = '';\n        let stderr = '';\n\n        // Collect stdout data\n        pythonProcess.stdout.on('data', (data) => {\n          stdout += data.toString();\n        });\n\n        // Collect stderr data\n        pythonProcess.stderr.on('data', (data) => {\n          stderr += data.toString();\n        });\n\n        // Handle process completion\n        pythonProcess.on('close', (code) => {\n          try {\n            if (code === 0) {\n              // Parse the JSON output from Python script\n              const result = JSON.parse(stdout.trim());\n              resolve(result);\n            } else {\n              console.error(`Python script exited with code ${code}`);\n              console.error(`stderr: ${stderr}`);\n              \n              // Return fallback result\n              resolve(this.getFallbackResult(`Python script failed with code ${code}`));\n            }\n          } catch (parseError) {\n            console.error('Failed to parse Python script output:', parseError);\n            console.error('stdout:', stdout);\n            console.error('stderr:', stderr);\n            \n            resolve(this.getFallbackResult('Failed to parse model output'));\n          }\n        });\n\n        // Handle process errors\n        pythonProcess.on('error', (error) => {\n          console.error('Python process error:', error);\n          resolve(this.getFallbackResult(`Process error: ${error.message}`));\n        });\n\n        // Handle timeout\n        pythonProcess.on('timeout', () => {\n          console.error('Python process timed out');\n          pythonProcess.kill();\n          resolve(this.getFallbackResult('Analysis timed out'));\n        });\n\n      } catch (error) {\n        console.error('PyTorch analysis error:', error);\n        resolve(this.getFallbackResult(`Analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`));\n      }\n    });\n  }\n\n  /**\n   * Get a fallback result when PyTorch analysis fails\n   * @param errorMessage - Error message to include\n   * @returns CropDiseaseAnalysis - Fallback analysis result\n   */\n  private getFallbackResult(errorMessage: string): CropDiseaseAnalysis {\n    return {\n      diseaseName: \"Analysis Unavailable\",\n      severity: \"Unknown\",\n      confidence: 0,\n      symptoms: `PyTorch model analysis failed: ${errorMessage}. This may be due to model loading issues or image processing problems.`,\n      treatment: \"Please try uploading a clear, high-quality image of the crop leaf. Ensure the image shows clear details of any symptoms. If the problem persists, consider consulting with local agricultural experts.\",\n      isPytorchResult: false,\n      error: errorMessage\n    };\n  }\n\n  /**\n   * Check if PyTorch service is available\n   * @returns Promise<boolean> - True if service is available\n   */\n  async checkAvailability(): Promise<boolean> {\n    return new Promise((resolve) => {\n      try {\n        const testProcess = spawn('python3', ['--version'], {\n          stdio: ['pipe', 'pipe', 'pipe'],\n          timeout: 5000,\n        });\n\n        testProcess.on('close', (code) => {\n          resolve(code === 0);\n        });\n\n        testProcess.on('error', () => {\n          resolve(false);\n        });\n\n        testProcess.on('timeout', () => {\n          testProcess.kill();\n          resolve(false);\n        });\n\n      } catch (error) {\n        resolve(false);\n      }\n    });\n  }\n}\n\n// Export singleton instance\nexport const pytorchDetector = new PyTorchDiseaseDetector();\n\n/**\n * Convenience function to analyze image with PyTorch\n * @param imageBuffer - Buffer containing the image data\n * @returns Promise<CropDiseaseAnalysis> - Disease analysis result\n */\nexport async function analyzeCropImage(imageBuffer: Buffer): Promise<CropDiseaseAnalysis> {\n  return pytorchDetector.analyzeImage(imageBuffer);\n}","size_bytes":5235},"server/services/pytorch_inference.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nPyTorch Crop Disease Detection Service\n\nThis service loads a pre-trained PyTorch model for crop disease detection\nand provides inference functionality.\n\"\"\"\n\nimport sys\nimport json\nimport os\nimport torch\nimport torchvision.transforms as transforms\nfrom PIL import Image\nimport io\nimport base64\nimport traceback\nimport urllib.request\nfrom pathlib import Path\n\n# Disease class mappings for cassava disease detection\nDISEASE_CLASSES = [\n    \"Cassava Bacterial Blight (CBB)\",\n    \"Cassava Brown Streak Disease (CBSD)\",\n    \"Cassava Green Mottle (CGM)\",\n    \"Cassava Mosaic Disease (CMD)\",\n    \"Healthy\"\n]\n\nclass CassavaModel:\n    def __init__(self, model_path=None):\n        \"\"\"Initialize the model\"\"\"\n        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n        self.model = None\n        self.model_path = model_path or \"models/cassava_pytorch_model_optimized.pth\"\n        self.is_loaded = False\n        \n        # Image preprocessing pipeline\n        self.transform = transforms.Compose([\n            transforms.Resize((224, 224)),\n            transforms.ToTensor(),\n            transforms.Normalize(\n                mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225]\n            )\n        ])\n        \n    def download_model_if_needed(self):\n        \"\"\"Download model from Hugging Face if not available locally\"\"\"\n        model_dir = Path(\"models\")\n        model_dir.mkdir(exist_ok=True)\n        \n        if not os.path.exists(self.model_path):\n            try:\n                print(\"Downloading model from Hugging Face Hub...\")\n                \n                # Hugging Face model URL\n                model_url = \"https://huggingface.co/Gunn01/cassava-disease-model/resolve/main/cassava_pytorch_model_optimized.pth\"\n                \n                # Download the model\n                urllib.request.urlretrieve(model_url, self.model_path)\n                print(f\"Model downloaded successfully to {self.model_path}\")\n                \n            except Exception as e:\n                print(f\"Failed to download model: {e}\")\n                return False\n        \n        return True\n    \n    def load_model(self):\n        \"\"\"Load the PyTorch model\"\"\"\n        try:\n            # Try to download model if it doesn't exist\n            if not self.download_model_if_needed():\n                return False\n                \n            if not os.path.exists(self.model_path):\n                print(f\"Model file not found at {self.model_path}\")\n                return False\n            \n            # Load the model\n            self.model = torch.load(self.model_path, map_location=self.device)\n            self.model.eval()\n            self.is_loaded = True\n            \n            print(f\"Model loaded successfully on {self.device}\")\n            return True\n            \n        except Exception as e:\n            print(f\"Error loading model: {e}\")\n            traceback.print_exc()\n            return False\n    \n    def preprocess_image(self, image_data):\n        \"\"\"Preprocess image for model inference\"\"\"\n        try:\n            # Decode base64 image\n            image_bytes = base64.b64decode(image_data)\n            image = Image.open(io.BytesIO(image_bytes)).convert('RGB')\n            \n            # Apply transformations\n            input_tensor = self.transform(image).unsqueeze(0)\n            return input_tensor.to(self.device)\n            \n        except Exception as e:\n            print(f\"Error preprocessing image: {e}\")\n            return None\n    \n    def predict(self, image_data):\n        \"\"\"Run inference on the image\"\"\"\n        try:\n            if not self.is_loaded:\n                if not self.load_model():\n                    return self.get_fallback_result(\"Model not available\")\n            \n            # Preprocess image\n            input_tensor = self.preprocess_image(image_data)\n            if input_tensor is None:\n                return self.get_fallback_result(\"Failed to preprocess image\")\n            \n            # Run inference\n            with torch.no_grad():\n                outputs = self.model(input_tensor)\n                probabilities = torch.nn.functional.softmax(outputs[0], dim=0)\n                \n                # Get prediction\n                predicted_idx = torch.argmax(probabilities).item()\n                confidence = float(probabilities[predicted_idx]) * 100\n                \n                disease_name = DISEASE_CLASSES[predicted_idx] if predicted_idx < len(DISEASE_CLASSES) else \"Unknown Disease\"\n                \n                # Determine severity based on confidence and disease type\n                severity = self.determine_severity(disease_name, confidence)\n                \n                # Generate symptoms and treatment\n                symptoms, treatment = self.get_disease_info(disease_name)\n                \n                return {\n                    \"diseaseName\": disease_name,\n                    \"severity\": severity,\n                    \"confidence\": round(confidence, 2),\n                    \"symptoms\": symptoms,\n                    \"treatment\": treatment,\n                    \"isPytorchResult\": True\n                }\n                \n        except Exception as e:\n            print(f\"Error during prediction: {e}\")\n            traceback.print_exc()\n            return self.get_fallback_result(f\"Prediction failed: {str(e)}\")\n    \n    def determine_severity(self, disease_name, confidence):\n        \"\"\"Determine disease severity based on prediction confidence\"\"\"\n        if \"Healthy\" in disease_name:\n            return \"None\"\n        elif confidence >= 80:\n            return \"High\"\n        elif confidence >= 60:\n            return \"Medium\"\n        else:\n            return \"Low\"\n    \n    def get_disease_info(self, disease_name):\n        \"\"\"Get symptoms and treatment information for the disease\"\"\"\n        disease_info = {\n            \"Cassava Bacterial Blight (CBB)\": {\n                \"symptoms\": \"Angular, water-soaked lesions on leaves that turn brown and may have a yellow halo. Wilting and blackening of stems.\",\n                \"treatment\": \"Remove and destroy infected plants. Use copper-based fungicides. Ensure proper spacing for air circulation. Plant resistant varieties.\"\n            },\n            \"Cassava Brown Streak Disease (CBSD)\": {\n                \"symptoms\": \"Brown streaking on stems, yellowing and withering of leaves, brown necrotic streaks in storage roots.\",\n                \"treatment\": \"Use virus-free planting material. Control whitefly vectors with insecticides. Remove infected plants immediately. Plant resistant varieties.\"\n            },\n            \"Cassava Green Mottle (CGM)\": {\n                \"symptoms\": \"Green and yellow mottling on leaves, mild chlorosis, reduced plant vigor.\",\n                \"treatment\": \"Use certified virus-free planting material. Control aphid vectors. Remove infected plants. Maintain good field hygiene.\"\n            },\n            \"Cassava Mosaic Disease (CMD)\": {\n                \"symptoms\": \"Yellow and green mosaic patterns on leaves, leaf distortion, stunted growth, reduced yield.\",\n                \"treatment\": \"Plant resistant varieties. Use virus-free planting material. Control whitefly vectors. Remove infected plants promptly.\"\n            },\n            \"Healthy\": {\n                \"symptoms\": \"No disease symptoms detected. Plant appears healthy with normal leaf color and growth.\",\n                \"treatment\": \"Maintain good agricultural practices. Continue regular monitoring for early disease detection. Ensure proper nutrition and watering.\"\n            }\n        }\n        \n        info = disease_info.get(disease_name, {\n            \"symptoms\": \"Disease symptoms detected but specific identification may require further analysis.\",\n            \"treatment\": \"Consult with local agricultural extension services for specific treatment recommendations.\"\n        })\n        \n        return info[\"symptoms\"], info[\"treatment\"]\n    \n    def get_fallback_result(self, error_message):\n        \"\"\"Return a fallback result when model prediction fails\"\"\"\n        return {\n            \"diseaseName\": \"Analysis Pending\",\n            \"severity\": \"Unknown\",\n            \"confidence\": 0,\n            \"symptoms\": f\"Model analysis failed: {error_message}. Please try again or consult with agricultural experts.\",\n            \"treatment\": \"Ensure image quality is good and shows clear leaf details. Consider consulting local agricultural extension services.\",\n            \"isPytorchResult\": False,\n            \"error\": error_message\n        }\n\ndef main():\n    \"\"\"Main function for command-line interface\"\"\"\n    try:\n        if len(sys.argv) < 2:\n            print(json.dumps({\"error\": \"No image data provided\"}))\n            return\n        \n        # Get base64 image data from command line argument\n        image_data = sys.argv[1]\n        \n        # Initialize model\n        model = CassavaModel()\n        \n        # Run prediction\n        result = model.predict(image_data)\n        \n        # Output result as JSON\n        print(json.dumps(result))\n        \n    except Exception as e:\n        error_result = {\n            \"error\": f\"Fatal error: {str(e)}\",\n            \"diseaseName\": \"System Error\",\n            \"severity\": \"Unknown\",\n            \"confidence\": 0,\n            \"symptoms\": \"System error occurred during analysis.\",\n            \"treatment\": \"Please try again or contact technical support.\",\n            \"isPytorchResult\": False\n        }\n        print(json.dumps(error_result))\n\nif __name__ == \"__main__\":\n    main()","size_bytes":9571},"client/src/pages/farmer-marketplace.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { \n  ArrowLeft, \n  Plus, \n  Package, \n  Gavel, \n  Truck, \n  MapPin,\n  Calendar,\n  DollarSign,\n  Clock,\n  CheckCircle,\n  Users,\n  Eye,\n  ArrowRight\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/lib/auth\";\n\nexport default function FarmerMarketplace() {\n  const { t } = useTranslation();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedListing, setSelectedListing] = useState<any>(null);\n  const [showBidForm, setShowBidForm] = useState(false);\n\n  // Form states\n  const [listingForm, setListingForm] = useState({\n    cropName: \"\",\n    variety: \"\",\n    quantity: \"\",\n    quantityUnit: \"quintal\",\n    quality: \"A\",\n    expectedPrice: \"\",\n    harvestDate: \"\",\n    location: \"\",\n    description: \"\"\n  });\n\n  const [bidForm, setBidForm] = useState({\n    bidAmount: \"\",\n    quantity: \"\",\n    buyerType: \"buyer\",\n    notes: \"\",\n    validUntil: \"\"\n  });\n\n\n  // Queries\n  const { data: listings, isLoading: listingsLoading } = useQuery({\n    queryKey: [\"/api/produce-listings\"],\n  });\n\n  const { data: userBids } = useQuery({\n    queryKey: [\"/api/bids/user\"],\n  });\n\n  const { data: logisticsOrders } = useQuery({\n    queryKey: [\"/api/logistics-orders\"],\n  });\n\n  // Mutations\n  const createListingMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/produce-listings\", data),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Produce listing created successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/produce-listings\"] });\n      setListingForm({\n        cropName: \"\",\n        variety: \"\",\n        quantity: \"\",\n        quantityUnit: \"quintal\",\n        quality: \"A\",\n        expectedPrice: \"\",\n        harvestDate: \"\",\n        location: \"\",\n        description: \"\"\n      });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create listing\", variant: \"destructive\" });\n    }\n  });\n\n  const createBidMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/bids\", data),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Bid placed successfully!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bids/user\"] });\n      setShowBidForm(false);\n      setBidForm({\n        bidAmount: \"\",\n        quantity: \"\",\n        buyerType: \"buyer\",\n        notes: \"\",\n        validUntil: \"\"\n      });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to place bid\", variant: \"destructive\" });\n    }\n  });\n\n  const handleCreateListing = (e: React.FormEvent) => {\n    e.preventDefault();\n    createListingMutation.mutate({\n      ...listingForm,\n      quantity: parseFloat(listingForm.quantity),\n      expectedPrice: parseFloat(listingForm.expectedPrice),\n      harvestDate: new Date(listingForm.harvestDate),\n    });\n  };\n\n  const handlePlaceBid = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedListing) return;\n    \n    createBidMutation.mutate({\n      listingId: selectedListing.id,\n      bidAmount: parseFloat(bidForm.bidAmount),\n      quantity: parseFloat(bidForm.quantity),\n      buyerType: bidForm.buyerType,\n      notes: bidForm.notes,\n      validUntil: new Date(bidForm.validUntil),\n    });\n  };\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const getQualityColor = (quality: string) => {\n    switch (quality) {\n      case \"A\": return \"status-success\";\n      case \"B\": return \"status-warning\";\n      case \"C\": return \"status-info\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Clean Header */}\n      <header className=\"bg-white border-b border-border px-6 py-4\" data-testid=\"farmer-marketplace-header\">\n        <div className=\"flex items-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/dashboard\")}\n            className=\"mr-4\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-xl font-semibold text-foreground\" data-testid=\"page-title\">\n            Farmer Marketplace\n          </h1>\n        </div>\n      </header>\n\n      <div className=\"p-6\">\n        <Tabs defaultValue=\"listings\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 mb-6\">\n            <TabsTrigger value=\"listings\" className=\"flex items-center gap-2\" data-testid=\"tab-listings\">\n              <Package className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">My Produce</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"bidding\" className=\"flex items-center gap-2\" data-testid=\"tab-bidding\">\n              <Gavel className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Bidding</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"logistics\" className=\"flex items-center gap-2\" data-testid=\"tab-logistics\">\n              <Truck className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Logistics</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Produce Listings Tab */}\n          <TabsContent value=\"listings\" className=\"space-y-6\">\n            {/* Create Listing Form */}\n            <Card className=\"farm-card\" data-testid=\"create-listing-form\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-lg\">\n                  <Plus className=\"h-5 w-5\" />\n                  List Your Produce\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleCreateListing} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"cropName\" className=\"text-sm font-medium\">Crop Name</Label>\n                      <Input\n                        id=\"cropName\"\n                        className=\"input-farm\"\n                        value={listingForm.cropName}\n                        onChange={(e) => setListingForm(prev => ({ ...prev, cropName: e.target.value }))}\n                        placeholder=\"e.g., Rice, Wheat, Cotton\"\n                        required\n                        data-testid=\"input-crop-name\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"variety\" className=\"text-sm font-medium\">Variety</Label>\n                      <Input\n                        id=\"variety\"\n                        className=\"input-farm\"\n                        value={listingForm.variety}\n                        onChange={(e) => setListingForm(prev => ({ ...prev, variety: e.target.value }))}\n                        placeholder=\"e.g., Basmati, Lokvan\"\n                        data-testid=\"input-variety\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"quantity\" className=\"text-sm font-medium\">Quantity</Label>\n                      <Input\n                        id=\"quantity\"\n                        type=\"number\"\n                        className=\"input-farm\"\n                        value={listingForm.quantity}\n                        onChange={(e) => setListingForm(prev => ({ ...prev, quantity: e.target.value }))}\n                        placeholder=\"Enter quantity\"\n                        required\n                        data-testid=\"input-quantity\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"quantityUnit\" className=\"text-sm font-medium\">Unit</Label>\n                      <Select value={listingForm.quantityUnit} onValueChange={(value) => setListingForm(prev => ({ ...prev, quantityUnit: value }))}>\n                        <SelectTrigger className=\"input-farm\" data-testid=\"select-quantity-unit\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"quintal\">Quintal</SelectItem>\n                          <SelectItem value=\"kg\">Kilograms</SelectItem>\n                          <SelectItem value=\"tons\">Tons</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"quality\" className=\"text-sm font-medium\">Quality Grade</Label>\n                      <Select value={listingForm.quality} onValueChange={(value) => setListingForm(prev => ({ ...prev, quality: value }))}>\n                        <SelectTrigger className=\"input-farm\" data-testid=\"select-quality\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"A\">Grade A (Premium)</SelectItem>\n                          <SelectItem value=\"B\">Grade B (Good)</SelectItem>\n                          <SelectItem value=\"C\">Grade C (Standard)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"expectedPrice\" className=\"text-sm font-medium\">\n                        Expected Price (‚Çπ per {listingForm.quantityUnit})\n                      </Label>\n                      <Input\n                        id=\"expectedPrice\"\n                        type=\"number\"\n                        className=\"input-farm\"\n                        value={listingForm.expectedPrice}\n                        onChange={(e) => setListingForm(prev => ({ ...prev, expectedPrice: e.target.value }))}\n                        placeholder=\"Enter expected price\"\n                        required\n                        data-testid=\"input-expected-price\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"harvestDate\" className=\"text-sm font-medium\">Harvest Date</Label>\n                      <Input\n                        id=\"harvestDate\"\n                        type=\"date\"\n                        className=\"input-farm\"\n                        value={listingForm.harvestDate}\n                        onChange={(e) => setListingForm(prev => ({ ...prev, harvestDate: e.target.value }))}\n                        required\n                        data-testid=\"input-harvest-date\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"location\" className=\"text-sm font-medium\">Location</Label>\n                      <Input\n                        id=\"location\"\n                        className=\"input-farm\"\n                        value={listingForm.location}\n                        onChange={(e) => setListingForm(prev => ({ ...prev, location: e.target.value }))}\n                        placeholder=\"City, State\"\n                        required\n                        data-testid=\"input-location\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"description\" className=\"text-sm font-medium\">Description</Label>\n                    <Textarea\n                      id=\"description\"\n                      className=\"input-farm\"\n                      value={listingForm.description}\n                      onChange={(e) => setListingForm(prev => ({ ...prev, description: e.target.value }))}\n                      placeholder=\"Additional details about your produce...\"\n                      rows={3}\n                      data-testid=\"textarea-description\"\n                    />\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"btn-farm-primary w-full\" \n                    disabled={createListingMutation.isPending}\n                    data-testid=\"button-create-listing\"\n                  >\n                    {createListingMutation.isPending ? \"Creating...\" : \"Create Listing\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Active Listings */}\n            <div>\n              <h3 className=\"section-header\">\n                <Eye className=\"h-5 w-5\" />\n                Your Active Listings\n              </h3>\n              <div className=\"space-y-4\">\n                {listingsLoading ? (\n                  Array.from({ length: 3 }).map((_, index) => (\n                    <Card key={index} className=\"farm-card\" data-testid={`listing-skeleton-${index}`}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"animate-pulse\">\n                          <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                          <div className=\"h-3 bg-muted rounded w-1/2 mb-4\"></div>\n                          <div className=\"h-6 bg-muted rounded w-1/3\"></div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : listings && listings.length > 0 ? (\n                  listings.map((listing: any) => (\n                    <Card key={listing.id} className=\"farm-card\" data-testid={`listing-${listing.id}`}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div>\n                            <h4 className=\"font-semibold text-foreground\" data-testid={`listing-title-${listing.id}`}>\n                              {listing.cropName} {listing.variety && `(${listing.variety})`}\n                            </h4>\n                            <div className=\"flex items-center gap-2 mt-1\">\n                              <Badge className={getQualityColor(listing.quality)} data-testid={`listing-quality-${listing.id}`}>\n                                Grade {listing.quality}\n                              </Badge>\n                              <span className=\"text-sm text-muted-foreground\">\n                                {listing.quantity} {listing.quantityUnit}\n                              </span>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-xl font-semibold text-green-600\" data-testid={`listing-price-${listing.id}`}>\n                              {formatPrice(parseFloat(listing.expectedPrice))}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">per {listing.quantityUnit}</div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <span className=\"flex items-center gap-1\">\n                            <MapPin className=\"h-3 w-3\" />\n                            {listing.location}\n                          </span>\n                          <span className=\"flex items-center gap-1\">\n                            <Calendar className=\"h-3 w-3\" />\n                            {new Date(listing.harvestDate).toLocaleDateString()}\n                          </span>\n                        </div>\n                        \n                        {listing.description && (\n                          <p className=\"text-sm text-muted-foreground mt-3\" data-testid={`listing-description-${listing.id}`}>\n                            {listing.description}\n                          </p>\n                        )}\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <Card className=\"farm-card border-dashed\" data-testid=\"no-listings\">\n                    <CardContent className=\"p-6 text-center\">\n                      <div className=\"w-16 h-16 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                        <Package className=\"h-8 w-8 text-green-600\" />\n                      </div>\n                      <h3 className=\"font-semibold text-foreground mb-2\">No Listings Yet</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Create your first produce listing to start selling!\n                      </p>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Real-time Bidding Tab */}\n          <TabsContent value=\"bidding\" className=\"space-y-6\">\n            <div className=\"space-y-6\">\n              {/* Available Listings for Bidding */}\n              <div>\n                <h3 className=\"section-header\">\n                  <Gavel className=\"h-5 w-5\" />\n                  Available for Bidding\n                </h3>\n                <div className=\"space-y-4\">\n                  {listings && listings.length > 0 ? (\n                    listings.filter((listing: any) => listing.status === \"active\").map((listing: any) => (\n                      <Card key={listing.id} className=\"farm-card\" data-testid={`bidding-listing-${listing.id}`}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div>\n                              <h4 className=\"font-semibold text-foreground\">\n                                {listing.cropName} {listing.variety && `(${listing.variety})`}\n                              </h4>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <Badge className={getQualityColor(listing.quality)}>\n                                  Grade {listing.quality}\n                                </Badge>\n                                <span className=\"text-sm text-muted-foreground\">\n                                  {listing.quantity} {listing.quantityUnit} available\n                                </span>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"text-lg font-semibold text-primary\">\n                                Starting at {formatPrice(parseFloat(listing.expectedPrice))}\n                              </div>\n                              <Button \n                                onClick={() => {\n                                  setSelectedListing(listing);\n                                  setShowBidForm(true);\n                                }}\n                                className=\"btn-farm-primary mt-2\"\n                                data-testid={`button-bid-${listing.id}`}\n                              >\n                                <Gavel className=\"h-4 w-4 mr-2\" />\n                                Place Bid\n                              </Button>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                            <span className=\"flex items-center gap-1\">\n                              <MapPin className=\"h-3 w-3\" />\n                              {listing.location}\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              Listed {new Date(listing.createdAt).toLocaleDateString()}\n                            </span>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                  ) : (\n                    <Card className=\"farm-card border-dashed\" data-testid=\"no-bidding-listings\">\n                      <CardContent className=\"p-6 text-center\">\n                        <div className=\"w-16 h-16 bg-orange-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                          <Gavel className=\"h-8 w-8 text-orange-600\" />\n                        </div>\n                        <h3 className=\"font-semibold text-foreground mb-2\">No Active Listings</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          No produce available for bidding at the moment.\n                        </p>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </div>\n\n              {/* My Bids */}\n              <div>\n                <h3 className=\"section-header\">My Bids</h3>\n                <div className=\"space-y-4\">\n                  {userBids && userBids.length > 0 ? (\n                    userBids.map((bid: any) => (\n                      <Card key={bid.id} className=\"farm-card\" data-testid={`bid-${bid.id}`}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between\">\n                            <div>\n                              <h4 className=\"font-semibold text-foreground\">\n                                Bid for Listing #{bid.listingId.slice(-8)}\n                              </h4>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <Users className=\"h-3 w-3\" />\n                                <span className=\"text-sm text-muted-foreground capitalize\">\n                                  {bid.buyerType}\n                                </span>\n                                <Badge className={\n                                  bid.status === \"pending\" ? \"bg-yellow-100 text-yellow-800\" : \n                                  bid.status === \"accepted\" ? \"status-success\" : \"bg-red-100 text-red-800\"\n                                }>\n                                  {bid.status}\n                                </Badge>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"text-lg font-semibold text-foreground\">\n                                {formatPrice(parseFloat(bid.bidAmount))}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                for {bid.quantity} units\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {bid.notes && (\n                            <p className=\"text-sm text-muted-foreground mt-3\">\n                              Note: {bid.notes}\n                            </p>\n                          )}\n                          \n                          <div className=\"text-xs text-muted-foreground mt-2\">\n                            Valid until: {new Date(bid.validUntil).toLocaleDateString()}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                  ) : (\n                    <Card className=\"farm-card border-dashed\" data-testid=\"no-bids\">\n                      <CardContent className=\"p-6 text-center\">\n                        <div className=\"w-16 h-16 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                          <DollarSign className=\"h-8 w-8 text-blue-600\" />\n                        </div>\n                        <h3 className=\"font-semibold text-foreground mb-2\">No Bids Yet</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          You haven't placed any bids yet.\n                        </p>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Bid Form Modal */}\n            {showBidForm && selectedListing && (\n              <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\" data-testid=\"bid-form-modal\">\n                <Card className=\"w-full max-w-md\">\n                  <CardHeader>\n                    <CardTitle>Place Bid for {selectedListing.cropName}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <form onSubmit={handlePlaceBid} className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"bidAmount\" className=\"text-sm font-medium\">\n                          Bid Amount (‚Çπ per {selectedListing.quantityUnit})\n                        </Label>\n                        <Input\n                          id=\"bidAmount\"\n                          type=\"number\"\n                          className=\"input-farm\"\n                          value={bidForm.bidAmount}\n                          onChange={(e) => setBidForm(prev => ({ ...prev, bidAmount: e.target.value }))}\n                          placeholder={`Minimum: ${selectedListing.expectedPrice}`}\n                          min={selectedListing.expectedPrice}\n                          required\n                          data-testid=\"input-bid-amount\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"bidQuantity\" className=\"text-sm font-medium\">\n                          Quantity ({selectedListing.quantityUnit})\n                        </Label>\n                        <Input\n                          id=\"bidQuantity\"\n                          type=\"number\"\n                          className=\"input-farm\"\n                          value={bidForm.quantity}\n                          onChange={(e) => setBidForm(prev => ({ ...prev, quantity: e.target.value }))}\n                          placeholder={`Available: ${selectedListing.quantity}`}\n                          max={selectedListing.quantity}\n                          required\n                          data-testid=\"input-bid-quantity\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"buyerType\" className=\"text-sm font-medium\">Buyer Type</Label>\n                        <Select value={bidForm.buyerType} onValueChange={(value) => setBidForm(prev => ({ ...prev, buyerType: value }))}>\n                          <SelectTrigger className=\"input-farm\" data-testid=\"select-buyer-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"buyer\">Individual Buyer</SelectItem>\n                            <SelectItem value=\"warehouse\">Warehouse</SelectItem>\n                            <SelectItem value=\"transporter\">Transporter</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"validUntil\" className=\"text-sm font-medium\">Valid Until</Label>\n                        <Input\n                          id=\"validUntil\"\n                          type=\"datetime-local\"\n                          className=\"input-farm\"\n                          value={bidForm.validUntil}\n                          onChange={(e) => setBidForm(prev => ({ ...prev, validUntil: e.target.value }))}\n                          required\n                          data-testid=\"input-valid-until\"\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"bidNotes\" className=\"text-sm font-medium\">Notes (Optional)</Label>\n                        <Textarea\n                          id=\"bidNotes\"\n                          className=\"input-farm\"\n                          value={bidForm.notes}\n                          onChange={(e) => setBidForm(prev => ({ ...prev, notes: e.target.value }))}\n                          placeholder=\"Any additional information...\"\n                          rows={2}\n                          data-testid=\"textarea-bid-notes\"\n                        />\n                      </div>\n\n                      <div className=\"flex gap-2\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          className=\"flex-1\"\n                          onClick={() => setShowBidForm(false)}\n                          data-testid=\"button-cancel-bid\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          className=\"btn-farm-primary flex-1\"\n                          disabled={createBidMutation.isPending}\n                          data-testid=\"button-submit-bid\"\n                        >\n                          {createBidMutation.isPending ? \"Placing...\" : \"Place Bid\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Logistics & Payment Tab */}\n          <TabsContent value=\"logistics\" className=\"space-y-6\">\n            <div className=\"space-y-6\">\n              {/* Logistics Partners */}\n              <Card className=\"farm-card\" data-testid=\"logistics-partners\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Truck className=\"h-5 w-5\" />\n                    Logistics Partners\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    {/* Transport Partners */}\n                    <div>\n                      <h4 className=\"font-semibold text-foreground mb-3\">Transport Services</h4>\n                      <div className=\"space-y-3\">\n                        {[\n                          { name: \"FastTrack Logistics\", price: \"‚Çπ5-8/km\", rating: \"4.8\", speciality: \"Cold Storage\" },\n                          { name: \"AgriMove Express\", price: \"‚Çπ6-10/km\", rating: \"4.6\", speciality: \"Bulk Transport\" },\n                          { name: \"FarmLink Transport\", price: \"‚Çπ4-7/km\", rating: \"4.7\", speciality: \"Local Delivery\" }\n                        ].map((partner, index) => (\n                          <Card key={index} className=\"farm-card p-3\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h5 className=\"font-medium text-foreground\">{partner.name}</h5>\n                              <Badge className=\"status-info\">‚òÖ {partner.rating}</Badge>\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              <div>{partner.price}</div>\n                              <div>Speciality: {partner.speciality}</div>\n                            </div>\n                          </Card>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Storage Partners */}\n                    <div>\n                      <h4 className=\"font-semibold text-foreground mb-3\">Storage Services</h4>\n                      <div className=\"space-y-3\">\n                        {[\n                          { name: \"ColdChain Pro\", price: \"‚Çπ2-4/quintal/day\", rating: \"4.9\", speciality: \"Temperature Controlled\" },\n                          { name: \"AgriStore Solutions\", price: \"‚Çπ1-3/quintal/day\", rating: \"4.5\", speciality: \"Dry Storage\" },\n                          { name: \"FreshKeep Warehouses\", price: \"‚Çπ3-5/quintal/day\", rating: \"4.7\", speciality: \"Multi-commodity\" }\n                        ].map((partner, index) => (\n                          <Card key={index} className=\"farm-card p-3\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h5 className=\"font-medium text-foreground\">{partner.name}</h5>\n                              <Badge className=\"status-info\">‚òÖ {partner.rating}</Badge>\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              <div>{partner.price}</div>\n                              <div>Speciality: {partner.speciality}</div>\n                            </div>\n                          </Card>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Payment Gateway */}\n              <Card className=\"farm-card\" data-testid=\"payment-gateway\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <DollarSign className=\"h-5 w-5\" />\n                    Payment Options\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid md:grid-cols-3 gap-4 text-center\">\n                    <div>\n                      <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                        <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                      </div>\n                      <h4 className=\"font-semibold text-foreground mb-1\">Secure Payments</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Bank-grade security with encryption\n                      </p>\n                    </div>\n                    <div>\n                      <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                        <Clock className=\"h-6 w-6 text-blue-600\" />\n                      </div>\n                      <h4 className=\"font-semibold text-foreground mb-1\">Quick Settlement</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Funds within 24 hours of delivery\n                      </p>\n                    </div>\n                    <div>\n                      <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                        <Users className=\"h-6 w-6 text-purple-600\" />\n                      </div>\n                      <h4 className=\"font-semibold text-foreground mb-1\">Multiple Methods</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        UPI, Cards, Net Banking\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Active Orders */}\n              <Card className=\"farm-card\" data-testid=\"active-orders\">\n                <CardHeader>\n                  <CardTitle>Your Orders</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {logisticsOrders && logisticsOrders.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {logisticsOrders.map((order: any) => (\n                        <Card key={order.id} className=\"farm-card p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div>\n                              <h4 className=\"font-semibold text-foreground\">Order #{order.id.slice(-8)}</h4>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <Badge className={\n                                  order.orderStatus === \"completed\" ? \"status-success\" : \n                                  order.orderStatus === \"in_transit\" ? \"status-warning\" : \"status-info\"\n                                }>\n                                  {order.orderStatus?.replace(\"_\", \" \") || \"pending\"}\n                                </Badge>\n                                <Badge className={order.paymentStatus === \"paid\" ? \"status-success\" : \"status-warning\"}>\n                                  {order.paymentStatus}\n                                </Badge>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-semibold text-foreground text-lg\">\n                                {formatPrice(parseFloat(order.totalAmount))}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                Total Amount\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                            <div>\n                              <div className=\"font-medium text-foreground\">Transport Partner</div>\n                              <div className=\"text-muted-foreground\">{order.transportPartner}</div>\n                            </div>\n                            <div>\n                              <div className=\"font-medium text-foreground\">Delivery Location</div>\n                              <div className=\"text-muted-foreground\">{order.deliveryLocation}</div>\n                            </div>\n                          </div>\n                          \n                          {order.estimatedDelivery && (\n                            <div className=\"mt-3 text-sm\">\n                              <span className=\"font-medium text-foreground\">Estimated Delivery: </span>\n                              <span className=\"text-muted-foreground\">\n                                {new Date(order.estimatedDelivery).toLocaleDateString()}\n                              </span>\n                            </div>\n                          )}\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <div className=\"w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                        <Truck className=\"h-8 w-8 text-gray-600\" />\n                      </div>\n                      <h3 className=\"font-semibold text-foreground mb-2\">No Orders Yet</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Your logistics and delivery orders will appear here.\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":39877},"client/src/pages/solar-income-planner.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"wouter\";\nimport { \n  ArrowLeft, \n  Sun,\n  Calculator,\n  DollarSign\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\nimport { solarCalculatorSchema, type SolarCalculatorForm } from \"@shared/schema\";\n\ninterface SolarCalculation {\n  fieldSizeInAcres: string;\n  dailyEnergyProduction: string;\n  annualEnergyProduction: string;\n  annualSolarIncome: string;\n  annualMaintenanceCost: string;\n  netAnnualSolarIncome: string;\n  currentAnnualIncome: string;\n  totalAnnualIncome: string;\n  additionalIncomePercentage: string;\n  totalInstallationCost: string;\n  subsidyAmount: string;\n  netInstallationCost: string;\n  paybackPeriodYears: string;\n}\n\nexport default function SolarIncomePlanner() {\n  const { t } = useTranslation();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const [solarCalculation, setSolarCalculation] = useState<SolarCalculation | null>(null);\n\n  const form = useForm<SolarCalculatorForm>({\n    resolver: zodResolver(solarCalculatorSchema),\n    defaultValues: {\n      fieldSize: \"\",\n      fieldSizeUnit: \"acre\",\n      currentCropIncome: \"\",\n      solarPanelCapacity: \"\",\n      sunlightHours: \"\",\n      electricityRate: \"\",\n      installationCost: \"\",\n      governmentSubsidy: \"\",\n      maintenanceCost: \"\"\n    }\n  });\n\n  const calculateSolarIncome = (data: SolarCalculatorForm) => {\n    const {\n      fieldSize,\n      fieldSizeUnit,\n      currentCropIncome,\n      solarPanelCapacity,\n      sunlightHours,\n      electricityRate,\n      installationCost,\n      governmentSubsidy,\n      maintenanceCost\n    } = data;\n\n    // Convert to numbers with safety checks\n    const fieldSizeNum = parseFloat(fieldSize);\n    const currentAnnualIncomeNum = parseFloat(currentCropIncome);\n    const solarCapacityNum = parseFloat(solarPanelCapacity);\n    const sunlightHoursNum = parseFloat(sunlightHours);\n    const electricityRateNum = parseFloat(electricityRate);\n    const installationCostNum = parseFloat(installationCost || \"0\");\n    const subsidyAmountNum = parseFloat(governmentSubsidy || \"0\");\n    const maintenanceCostNum = parseFloat(maintenanceCost || \"0\");\n\n    // Check for invalid inputs\n    if (isNaN(fieldSizeNum) || fieldSizeNum <= 0 ||\n        isNaN(currentAnnualIncomeNum) || currentAnnualIncomeNum <= 0 ||\n        isNaN(solarCapacityNum) || solarCapacityNum <= 0 ||\n        isNaN(sunlightHoursNum) || sunlightHoursNum <= 0 ||\n        isNaN(electricityRateNum) || electricityRateNum <= 0) {\n      toast({ \n        title: t(\"solar.errors.missingFields\"), \n        description: t(\"solar.errors.fillRequired\"), \n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    // Field size conversion\n    const fieldSizeInAcres = fieldSizeUnit === \"hectare\" ? fieldSizeNum * 2.47 : fieldSizeNum;\n    \n    // Solar calculations with safety checks\n    const dailyEnergyProduction = solarCapacityNum * sunlightHoursNum; // kWh per day\n    const annualEnergyProduction = dailyEnergyProduction * 365; // kWh per year\n    const annualSolarIncome = annualEnergyProduction * electricityRateNum; // Annual income from solar\n    \n    // Costs\n    const totalInstallationCost = installationCostNum;\n    const subsidyAmount = subsidyAmountNum;\n    const netInstallationCost = Math.max(0, totalInstallationCost - subsidyAmount);\n    const annualMaintenanceCost = maintenanceCostNum;\n    const netAnnualSolarIncome = Math.max(0, annualSolarIncome - annualMaintenanceCost);\n    \n    // Additional income calculation with safety checks\n    const totalAnnualIncome = currentAnnualIncomeNum + netAnnualSolarIncome;\n    \n    // Safe percentage calculation - prevent division by zero\n    let additionalIncomePercentage = 0;\n    if (currentAnnualIncomeNum > 0) {\n      additionalIncomePercentage = (netAnnualSolarIncome / currentAnnualIncomeNum) * 100;\n    }\n    \n    // Safe payback period calculation - prevent division by zero\n    let paybackPeriodYears = 0;\n    if (netInstallationCost > 0 && netAnnualSolarIncome > 0) {\n      paybackPeriodYears = netInstallationCost / netAnnualSolarIncome;\n    } else if (netInstallationCost <= 0) {\n      // If there's no net cost (subsidies cover everything or more), payback is immediate\n      paybackPeriodYears = 0;\n    } else {\n      // If net annual solar income is zero or negative, payback is infinite (show as \"N/A\")\n      paybackPeriodYears = Infinity;\n    }\n    \n    // Format results with safety checks for Infinity/NaN\n    const calculation: SolarCalculation = {\n      fieldSizeInAcres: fieldSizeInAcres.toFixed(2),\n      dailyEnergyProduction: dailyEnergyProduction.toFixed(2),\n      annualEnergyProduction: annualEnergyProduction.toFixed(0),\n      annualSolarIncome: annualSolarIncome.toFixed(0),\n      annualMaintenanceCost: annualMaintenanceCost.toFixed(0),\n      netAnnualSolarIncome: netAnnualSolarIncome.toFixed(0),\n      currentAnnualIncome: currentAnnualIncomeNum.toFixed(0),\n      totalAnnualIncome: totalAnnualIncome.toFixed(0),\n      additionalIncomePercentage: isFinite(additionalIncomePercentage) ? additionalIncomePercentage.toFixed(1) : \"0.0\",\n      totalInstallationCost: totalInstallationCost.toFixed(0),\n      subsidyAmount: subsidyAmount.toFixed(0),\n      netInstallationCost: netInstallationCost.toFixed(0),\n      paybackPeriodYears: isFinite(paybackPeriodYears) ? paybackPeriodYears.toFixed(1) : \"N/A\"\n    };\n\n    setSolarCalculation(calculation);\n    toast({ \n      title: t(\"solar.errors.calculation\"), \n      description: t(\"solar.errors.success\") \n    });\n  };\n\n  const onSubmit = (data: SolarCalculatorForm) => {\n    calculateSolarIncome(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-border px-6 py-4\" data-testid=\"solar-planner-header\">\n        <div className=\"flex items-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/dashboard\")}\n            className=\"mr-4\"\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n          <h1 className=\"text-xl font-semibold text-foreground\" data-testid=\"page-title\">\n            {t(\"solar.title\")}\n          </h1>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Solar Calculator Form */}\n        <Card className=\"farm-card\" data-testid=\"solar-calculator\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Sun className=\"h-5 w-5\" />\n              {t(\"solar.calculateTitle\")}\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              {t(\"solar.subtitle\")}\n            </p>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {/* Field & Farming Information */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-semibold text-foreground\">{t(\"solar.fieldInfo\")}</h4>\n                    \n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <FormField\n                        control={form.control}\n                        name=\"fieldSize\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>{t(\"solar.fieldSize\")} *</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                className=\"input-farm\"\n                                placeholder={t(\"solar.placeholders.fieldSize\")}\n                                data-testid=\"input-field-size\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"fieldSizeUnit\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>{t(\"solar.unit\")}</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger className=\"input-farm\" data-testid=\"select-field-size-unit\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"acre\">{t(\"solar.acre\")}</SelectItem>\n                                <SelectItem value=\"hectare\">{t(\"solar.hectare\")}</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"currentCropIncome\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t(\"solar.currentIncome\")} *</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              className=\"input-farm\"\n                              placeholder={t(\"solar.placeholders.currentIncome\")}\n                              data-testid=\"input-current-crop-income\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* Solar System Information */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-semibold text-foreground\">{t(\"solar.solarInfo\")}</h4>\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"solarPanelCapacity\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t(\"solar.solarCapacity\")} *</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              className=\"input-farm\"\n                              placeholder={t(\"solar.placeholders.solarCapacity\")}\n                              data-testid=\"input-solar-capacity\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormDescription className=\"text-xs text-muted-foreground\">\n                            {t(\"solar.help.solarCapacity\")}\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"sunlightHours\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t(\"solar.sunlightHours\")} *</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              step=\"0.1\"\n                              className=\"input-farm\"\n                              placeholder={t(\"solar.placeholders.sunlightHours\")}\n                              data-testid=\"input-sunlight-hours\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormDescription className=\"text-xs text-muted-foreground\">\n                            {t(\"solar.help.sunlightHours\")}\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"electricityRate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t(\"solar.electricityRate\")} *</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              step=\"0.01\"\n                              className=\"input-farm\"\n                              placeholder={t(\"solar.placeholders.electricityRate\")}\n                              data-testid=\"input-electricity-rate\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormDescription className=\"text-xs text-muted-foreground\">\n                            {t(\"solar.help.electricityRate\")}\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* Cost Information */}\n                  <div className=\"space-y-4 md:col-span-2\">\n                    <h4 className=\"font-semibold text-foreground\">{t(\"solar.costInfo\")}</h4>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"installationCost\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>{t(\"solar.installationCost\")}</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                className=\"input-farm\"\n                                placeholder={t(\"solar.placeholders.installationCost\")}\n                                data-testid=\"input-installation-cost\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormDescription className=\"text-xs text-muted-foreground\">\n                              {t(\"solar.help.installationCost\")}\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"governmentSubsidy\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>{t(\"solar.subsidy\")}</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                className=\"input-farm\"\n                                placeholder={t(\"solar.placeholders.subsidy\")}\n                                data-testid=\"input-government-subsidy\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormDescription className=\"text-xs text-muted-foreground\">\n                              {t(\"solar.help.subsidy\")}\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"maintenanceCost\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>{t(\"solar.maintenance\")}</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                className=\"input-farm\"\n                                placeholder={t(\"solar.placeholders.maintenance\")}\n                                data-testid=\"input-maintenance-cost\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormDescription className=\"text-xs text-muted-foreground\">\n                              {t(\"solar.help.maintenance\")}\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <Button \n                  type=\"submit\"\n                  className=\"btn-farm-primary w-full mt-6\" \n                  disabled={form.formState.isSubmitting}\n                  data-testid=\"button-calculate-solar\"\n                >\n                  <Calculator className=\"h-4 w-4 mr-2\" />\n                  {t(\"solar.calculate\")}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Solar Income Results */}\n        {solarCalculation && (\n          <Card className=\"farm-card\" data-testid=\"solar-results\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-5 w-5\" />\n                {t(\"solar.results\")}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n                {/* Key Metrics Cards */}\n                <Card className=\"farm-card bg-green-50 dark:bg-green-950 border-green-200 dark:border-green-800\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"text-additional-income\">\n                      +‚Çπ{solarCalculation.netAnnualSolarIncome}\n                    </div>\n                    <div className=\"text-sm text-green-700 dark:text-green-300\">{t(\"solar.additionalIncome\")}</div>\n                    <div className=\"text-xs text-green-600 dark:text-green-400 mt-1\">\n                      +{solarCalculation.additionalIncomePercentage}% {t(\"solar.units.increase\")}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"farm-card bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\" data-testid=\"text-total-income\">\n                      ‚Çπ{solarCalculation.totalAnnualIncome}\n                    </div>\n                    <div className=\"text-sm text-blue-700 dark:text-blue-300\">{t(\"solar.totalIncome\")}</div>\n                    <div className=\"text-xs text-blue-600 dark:text-blue-400 mt-1\">\n                      {t(\"solar.units.combined\")}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"farm-card bg-orange-50 dark:bg-orange-950 border-orange-200 dark:border-orange-800\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-2xl font-bold text-orange-600 dark:text-orange-400\" data-testid=\"text-payback-period\">\n                      {solarCalculation.paybackPeriodYears} {solarCalculation.paybackPeriodYears !== \"N/A\" ? t(\"solar.units.years\") : \"\"}\n                    </div>\n                    <div className=\"text-sm text-orange-700 dark:text-orange-300\">{t(\"solar.paybackPeriod\")}</div>\n                    <div className=\"text-xs text-orange-600 dark:text-orange-400 mt-1\">\n                      {t(\"solar.units.roi\")}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"farm-card bg-purple-50 dark:bg-purple-950 border-purple-200 dark:border-purple-800\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\" data-testid=\"text-energy-production\">\n                      {solarCalculation.annualEnergyProduction}\n                    </div>\n                    <div className=\"text-sm text-purple-700 dark:text-purple-300\">{t(\"solar.energyProduction\")}</div>\n                    <div className=\"text-xs text-purple-600 dark:text-purple-400 mt-1\">\n                      {t(\"solar.units.capacity\")}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Detailed Breakdown */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-semibold text-foreground mb-3\">{t(\"solar.incomeBreakdown\")}</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">{t(\"solar.currentFarming\")}</span>\n                      <span className=\"font-medium\">‚Çπ{solarCalculation.currentAnnualIncome}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">{t(\"solar.solarRevenue\")}</span>\n                      <span className=\"font-medium\">‚Çπ{solarCalculation.annualSolarIncome}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">{t(\"solar.maintenanceCosts\")}</span>\n                      <span className=\"font-medium text-red-600 dark:text-red-400\">-‚Çπ{solarCalculation.annualMaintenanceCost}</span>\n                    </div>\n                    <hr className=\"border-border\" />\n                    <div className=\"flex justify-between font-semibold\">\n                      <span>{t(\"solar.netAdditional\")}</span>\n                      <span className=\"text-green-600 dark:text-green-400\">+‚Çπ{solarCalculation.netAnnualSolarIncome}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-semibold text-foreground mb-3\">{t(\"solar.investmentSummary\")}</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">{t(\"solar.totalCost\")}</span>\n                      <span className=\"font-medium\">‚Çπ{solarCalculation.totalInstallationCost}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">{t(\"solar.subsidyAmount\")}</span>\n                      <span className=\"font-medium text-green-600 dark:text-green-400\">-‚Çπ{solarCalculation.subsidyAmount}</span>\n                    </div>\n                    <hr className=\"border-border\" />\n                    <div className=\"flex justify-between font-semibold\">\n                      <span>{t(\"solar.netInvestment\")}</span>\n                      <span>‚Çπ{solarCalculation.netInstallationCost}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">{t(\"solar.fieldSizeAcres\")}</span>\n                      <span>{solarCalculation.fieldSizeInAcres} {t(\"solar.units.acres\")}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">{t(\"solar.dailyProduction\")}</span>\n                      <span>{solarCalculation.dailyEnergyProduction} {t(\"solar.units.kwh\")}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Benefits Note */}\n              <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-950 rounded-lg border border-blue-200 dark:border-blue-800\">\n                <h5 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">{t(\"solar.benefits\")}</h5>\n                <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n                  <li>{t(\"solar.benefit1\")}</li>\n                  <li>{t(\"solar.benefit2\")}</li>\n                  <li>{t(\"solar.benefit3\")}</li>\n                  <li>{t(\"solar.benefit4\")}</li>\n                  <li>{t(\"solar.benefit5\")}</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Information Card */}\n        <Card className=\"farm-card bg-yellow-50 dark:bg-yellow-950 border-yellow-200 dark:border-yellow-800\" data-testid=\"solar-info\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-start gap-3\">\n              <Sun className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400 mt-0.5\" />\n              <div>\n                <h4 className=\"font-semibold text-yellow-900 dark:text-yellow-100\">{t(\"solar.importantNotes\")}</h4>\n                <ul className=\"text-sm text-yellow-800 dark:text-yellow-200 mt-2 space-y-1\">\n                  <li>{t(\"solar.note1\")}</li>\n                  <li>{t(\"solar.note2\")}</li>\n                  <li>{t(\"solar.note3\")}</li>\n                  <li>{t(\"solar.note4\")}</li>\n                  <li>{t(\"solar.note5\")}</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":26727}},"version":1}